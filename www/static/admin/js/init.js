/*! jQuery v2.2.0 | (c) jQuery Foundation | jquery.org/license */
!function(a,b){"object"==typeof module&&"object"==typeof module.exports?module.exports=a.document?b(a,!0):function(a){if(!a.document)throw new Error("jQuery requires a window with a document");return b(a)}:b(a)}("undefined"!=typeof window?window:this,function(a,b){var c=[],d=a.document,e=c.slice,f=c.concat,g=c.push,h=c.indexOf,i={},j=i.toString,k=i.hasOwnProperty,l={},m="2.2.0",n=function(a,b){return new n.fn.init(a,b)},o=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,p=/^-ms-/,q=/-([\da-z])/gi,r=function(a,b){return b.toUpperCase()};n.fn=n.prototype={jquery:m,constructor:n,selector:"",length:0,toArray:function(){return e.call(this)},get:function(a){return null!=a?0>a?this[a+this.length]:this[a]:e.call(this)},pushStack:function(a){var b=n.merge(this.constructor(),a);return b.prevObject=this,b.context=this.context,b},each:function(a){return n.each(this,a)},map:function(a){return this.pushStack(n.map(this,function(b,c){return a.call(b,c,b)}))},slice:function(){return this.pushStack(e.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},eq:function(a){var b=this.length,c=+a+(0>a?b:0);return this.pushStack(c>=0&&b>c?[this[c]]:[])},end:function(){return this.prevObject||this.constructor()},push:g,sort:c.sort,splice:c.splice},n.extend=n.fn.extend=function(){var a,b,c,d,e,f,g=arguments[0]||{},h=1,i=arguments.length,j=!1;for("boolean"==typeof g&&(j=g,g=arguments[h]||{},h++),"object"==typeof g||n.isFunction(g)||(g={}),h===i&&(g=this,h--);i>h;h++)if(null!=(a=arguments[h]))for(b in a)c=g[b],d=a[b],g!==d&&(j&&d&&(n.isPlainObject(d)||(e=n.isArray(d)))?(e?(e=!1,f=c&&n.isArray(c)?c:[]):f=c&&n.isPlainObject(c)?c:{},g[b]=n.extend(j,f,d)):void 0!==d&&(g[b]=d));return g},n.extend({expando:"jQuery"+(m+Math.random()).replace(/\D/g,""),isReady:!0,error:function(a){throw new Error(a)},noop:function(){},isFunction:function(a){return"function"===n.type(a)},isArray:Array.isArray,isWindow:function(a){return null!=a&&a===a.window},isNumeric:function(a){var b=a&&a.toString();return!n.isArray(a)&&b-parseFloat(b)+1>=0},isPlainObject:function(a){return"object"!==n.type(a)||a.nodeType||n.isWindow(a)?!1:a.constructor&&!k.call(a.constructor.prototype,"isPrototypeOf")?!1:!0},isEmptyObject:function(a){var b;for(b in a)return!1;return!0},type:function(a){return null==a?a+"":"object"==typeof a||"function"==typeof a?i[j.call(a)]||"object":typeof a},globalEval:function(a){var b,c=eval;a=n.trim(a),a&&(1===a.indexOf("use strict")?(b=d.createElement("script"),b.text=a,d.head.appendChild(b).parentNode.removeChild(b)):c(a))},camelCase:function(a){return a.replace(p,"ms-").replace(q,r)},nodeName:function(a,b){return a.nodeName&&a.nodeName.toLowerCase()===b.toLowerCase()},each:function(a,b){var c,d=0;if(s(a)){for(c=a.length;c>d;d++)if(b.call(a[d],d,a[d])===!1)break}else for(d in a)if(b.call(a[d],d,a[d])===!1)break;return a},trim:function(a){return null==a?"":(a+"").replace(o,"")},makeArray:function(a,b){var c=b||[];return null!=a&&(s(Object(a))?n.merge(c,"string"==typeof a?[a]:a):g.call(c,a)),c},inArray:function(a,b,c){return null==b?-1:h.call(b,a,c)},merge:function(a,b){for(var c=+b.length,d=0,e=a.length;c>d;d++)a[e++]=b[d];return a.length=e,a},grep:function(a,b,c){for(var d,e=[],f=0,g=a.length,h=!c;g>f;f++)d=!b(a[f],f),d!==h&&e.push(a[f]);return e},map:function(a,b,c){var d,e,g=0,h=[];if(s(a))for(d=a.length;d>g;g++)e=b(a[g],g,c),null!=e&&h.push(e);else for(g in a)e=b(a[g],g,c),null!=e&&h.push(e);return f.apply([],h)},guid:1,proxy:function(a,b){var c,d,f;return"string"==typeof b&&(c=a[b],b=a,a=c),n.isFunction(a)?(d=e.call(arguments,2),f=function(){return a.apply(b||this,d.concat(e.call(arguments)))},f.guid=a.guid=a.guid||n.guid++,f):void 0},now:Date.now,support:l}),"function"==typeof Symbol&&(n.fn[Symbol.iterator]=c[Symbol.iterator]),n.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),function(a,b){i["[object "+b+"]"]=b.toLowerCase()});function s(a){var b=!!a&&"length"in a&&a.length,c=n.type(a);return"function"===c||n.isWindow(a)?!1:"array"===c||0===b||"number"==typeof b&&b>0&&b-1 in a}var t=function(a){var b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u="sizzle"+1*new Date,v=a.document,w=0,x=0,y=ga(),z=ga(),A=ga(),B=function(a,b){return a===b&&(l=!0),0},C=1<<31,D={}.hasOwnProperty,E=[],F=E.pop,G=E.push,H=E.push,I=E.slice,J=function(a,b){for(var c=0,d=a.length;d>c;c++)if(a[c]===b)return c;return-1},K="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",L="[\\x20\\t\\r\\n\\f]",M="(?:\\\\.|[\\w-]|[^\\x00-\\xa0])+",N="\\["+L+"*("+M+")(?:"+L+"*([*^$|!~]?=)"+L+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+M+"))|)"+L+"*\\]",O=":("+M+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+N+")*)|.*)\\)|)",P=new RegExp(L+"+","g"),Q=new RegExp("^"+L+"+|((?:^|[^\\\\])(?:\\\\.)*)"+L+"+$","g"),R=new RegExp("^"+L+"*,"+L+"*"),S=new RegExp("^"+L+"*([>+~]|"+L+")"+L+"*"),T=new RegExp("="+L+"*([^\\]'\"]*?)"+L+"*\\]","g"),U=new RegExp(O),V=new RegExp("^"+M+"$"),W={ID:new RegExp("^#("+M+")"),CLASS:new RegExp("^\\.("+M+")"),TAG:new RegExp("^("+M+"|[*])"),ATTR:new RegExp("^"+N),PSEUDO:new RegExp("^"+O),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+L+"*(even|odd|(([+-]|)(\\d*)n|)"+L+"*(?:([+-]|)"+L+"*(\\d+)|))"+L+"*\\)|)","i"),bool:new RegExp("^(?:"+K+")$","i"),needsContext:new RegExp("^"+L+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+L+"*((?:-\\d)?\\d*)"+L+"*\\)|)(?=[^-]|$)","i")},X=/^(?:input|select|textarea|button)$/i,Y=/^h\d$/i,Z=/^[^{]+\{\s*\[native \w/,$=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,_=/[+~]/,aa=/'|\\/g,ba=new RegExp("\\\\([\\da-f]{1,6}"+L+"?|("+L+")|.)","ig"),ca=function(a,b,c){var d="0x"+b-65536;return d!==d||c?b:0>d?String.fromCharCode(d+65536):String.fromCharCode(d>>10|55296,1023&d|56320)},da=function(){m()};try{H.apply(E=I.call(v.childNodes),v.childNodes),E[v.childNodes.length].nodeType}catch(ea){H={apply:E.length?function(a,b){G.apply(a,I.call(b))}:function(a,b){var c=a.length,d=0;while(a[c++]=b[d++]);a.length=c-1}}}function fa(a,b,d,e){var f,h,j,k,l,o,r,s,w=b&&b.ownerDocument,x=b?b.nodeType:9;if(d=d||[],"string"!=typeof a||!a||1!==x&&9!==x&&11!==x)return d;if(!e&&((b?b.ownerDocument||b:v)!==n&&m(b),b=b||n,p)){if(11!==x&&(o=$.exec(a)))if(f=o[1]){if(9===x){if(!(j=b.getElementById(f)))return d;if(j.id===f)return d.push(j),d}else if(w&&(j=w.getElementById(f))&&t(b,j)&&j.id===f)return d.push(j),d}else{if(o[2])return H.apply(d,b.getElementsByTagName(a)),d;if((f=o[3])&&c.getElementsByClassName&&b.getElementsByClassName)return H.apply(d,b.getElementsByClassName(f)),d}if(c.qsa&&!A[a+" "]&&(!q||!q.test(a))){if(1!==x)w=b,s=a;else if("object"!==b.nodeName.toLowerCase()){(k=b.getAttribute("id"))?k=k.replace(aa,"\\$&"):b.setAttribute("id",k=u),r=g(a),h=r.length,l=V.test(k)?"#"+k:"[id='"+k+"']";while(h--)r[h]=l+" "+qa(r[h]);s=r.join(","),w=_.test(a)&&oa(b.parentNode)||b}if(s)try{return H.apply(d,w.querySelectorAll(s)),d}catch(y){}finally{k===u&&b.removeAttribute("id")}}}return i(a.replace(Q,"$1"),b,d,e)}function ga(){var a=[];function b(c,e){return a.push(c+" ")>d.cacheLength&&delete b[a.shift()],b[c+" "]=e}return b}function ha(a){return a[u]=!0,a}function ia(a){var b=n.createElement("div");try{return!!a(b)}catch(c){return!1}finally{b.parentNode&&b.parentNode.removeChild(b),b=null}}function ja(a,b){var c=a.split("|"),e=c.length;while(e--)d.attrHandle[c[e]]=b}function ka(a,b){var c=b&&a,d=c&&1===a.nodeType&&1===b.nodeType&&(~b.sourceIndex||C)-(~a.sourceIndex||C);if(d)return d;if(c)while(c=c.nextSibling)if(c===b)return-1;return a?1:-1}function la(a){return function(b){var c=b.nodeName.toLowerCase();return"input"===c&&b.type===a}}function ma(a){return function(b){var c=b.nodeName.toLowerCase();return("input"===c||"button"===c)&&b.type===a}}function na(a){return ha(function(b){return b=+b,ha(function(c,d){var e,f=a([],c.length,b),g=f.length;while(g--)c[e=f[g]]&&(c[e]=!(d[e]=c[e]))})})}function oa(a){return a&&"undefined"!=typeof a.getElementsByTagName&&a}c=fa.support={},f=fa.isXML=function(a){var b=a&&(a.ownerDocument||a).documentElement;return b?"HTML"!==b.nodeName:!1},m=fa.setDocument=function(a){var b,e,g=a?a.ownerDocument||a:v;return g!==n&&9===g.nodeType&&g.documentElement?(n=g,o=n.documentElement,p=!f(n),(e=n.defaultView)&&e.top!==e&&(e.addEventListener?e.addEventListener("unload",da,!1):e.attachEvent&&e.attachEvent("onunload",da)),c.attributes=ia(function(a){return a.className="i",!a.getAttribute("className")}),c.getElementsByTagName=ia(function(a){return a.appendChild(n.createComment("")),!a.getElementsByTagName("*").length}),c.getElementsByClassName=Z.test(n.getElementsByClassName),c.getById=ia(function(a){return o.appendChild(a).id=u,!n.getElementsByName||!n.getElementsByName(u).length}),c.getById?(d.find.ID=function(a,b){if("undefined"!=typeof b.getElementById&&p){var c=b.getElementById(a);return c?[c]:[]}},d.filter.ID=function(a){var b=a.replace(ba,ca);return function(a){return a.getAttribute("id")===b}}):(delete d.find.ID,d.filter.ID=function(a){var b=a.replace(ba,ca);return function(a){var c="undefined"!=typeof a.getAttributeNode&&a.getAttributeNode("id");return c&&c.value===b}}),d.find.TAG=c.getElementsByTagName?function(a,b){return"undefined"!=typeof b.getElementsByTagName?b.getElementsByTagName(a):c.qsa?b.querySelectorAll(a):void 0}:function(a,b){var c,d=[],e=0,f=b.getElementsByTagName(a);if("*"===a){while(c=f[e++])1===c.nodeType&&d.push(c);return d}return f},d.find.CLASS=c.getElementsByClassName&&function(a,b){return"undefined"!=typeof b.getElementsByClassName&&p?b.getElementsByClassName(a):void 0},r=[],q=[],(c.qsa=Z.test(n.querySelectorAll))&&(ia(function(a){o.appendChild(a).innerHTML="<a id='"+u+"'></a><select id='"+u+"-\r\\' msallowcapture=''><option selected=''></option></select>",a.querySelectorAll("[msallowcapture^='']").length&&q.push("[*^$]="+L+"*(?:''|\"\")"),a.querySelectorAll("[selected]").length||q.push("\\["+L+"*(?:value|"+K+")"),a.querySelectorAll("[id~="+u+"-]").length||q.push("~="),a.querySelectorAll(":checked").length||q.push(":checked"),a.querySelectorAll("a#"+u+"+*").length||q.push(".#.+[+~]")}),ia(function(a){var b=n.createElement("input");b.setAttribute("type","hidden"),a.appendChild(b).setAttribute("name","D"),a.querySelectorAll("[name=d]").length&&q.push("name"+L+"*[*^$|!~]?="),a.querySelectorAll(":enabled").length||q.push(":enabled",":disabled"),a.querySelectorAll("*,:x"),q.push(",.*:")})),(c.matchesSelector=Z.test(s=o.matches||o.webkitMatchesSelector||o.mozMatchesSelector||o.oMatchesSelector||o.msMatchesSelector))&&ia(function(a){c.disconnectedMatch=s.call(a,"div"),s.call(a,"[s!='']:x"),r.push("!=",O)}),q=q.length&&new RegExp(q.join("|")),r=r.length&&new RegExp(r.join("|")),b=Z.test(o.compareDocumentPosition),t=b||Z.test(o.contains)?function(a,b){var c=9===a.nodeType?a.documentElement:a,d=b&&b.parentNode;return a===d||!(!d||1!==d.nodeType||!(c.contains?c.contains(d):a.compareDocumentPosition&&16&a.compareDocumentPosition(d)))}:function(a,b){if(b)while(b=b.parentNode)if(b===a)return!0;return!1},B=b?function(a,b){if(a===b)return l=!0,0;var d=!a.compareDocumentPosition-!b.compareDocumentPosition;return d?d:(d=(a.ownerDocument||a)===(b.ownerDocument||b)?a.compareDocumentPosition(b):1,1&d||!c.sortDetached&&b.compareDocumentPosition(a)===d?a===n||a.ownerDocument===v&&t(v,a)?-1:b===n||b.ownerDocument===v&&t(v,b)?1:k?J(k,a)-J(k,b):0:4&d?-1:1)}:function(a,b){if(a===b)return l=!0,0;var c,d=0,e=a.parentNode,f=b.parentNode,g=[a],h=[b];if(!e||!f)return a===n?-1:b===n?1:e?-1:f?1:k?J(k,a)-J(k,b):0;if(e===f)return ka(a,b);c=a;while(c=c.parentNode)g.unshift(c);c=b;while(c=c.parentNode)h.unshift(c);while(g[d]===h[d])d++;return d?ka(g[d],h[d]):g[d]===v?-1:h[d]===v?1:0},n):n},fa.matches=function(a,b){return fa(a,null,null,b)},fa.matchesSelector=function(a,b){if((a.ownerDocument||a)!==n&&m(a),b=b.replace(T,"='$1']"),c.matchesSelector&&p&&!A[b+" "]&&(!r||!r.test(b))&&(!q||!q.test(b)))try{var d=s.call(a,b);if(d||c.disconnectedMatch||a.document&&11!==a.document.nodeType)return d}catch(e){}return fa(b,n,null,[a]).length>0},fa.contains=function(a,b){return(a.ownerDocument||a)!==n&&m(a),t(a,b)},fa.attr=function(a,b){(a.ownerDocument||a)!==n&&m(a);var e=d.attrHandle[b.toLowerCase()],f=e&&D.call(d.attrHandle,b.toLowerCase())?e(a,b,!p):void 0;return void 0!==f?f:c.attributes||!p?a.getAttribute(b):(f=a.getAttributeNode(b))&&f.specified?f.value:null},fa.error=function(a){throw new Error("Syntax error, unrecognized expression: "+a)},fa.uniqueSort=function(a){var b,d=[],e=0,f=0;if(l=!c.detectDuplicates,k=!c.sortStable&&a.slice(0),a.sort(B),l){while(b=a[f++])b===a[f]&&(e=d.push(f));while(e--)a.splice(d[e],1)}return k=null,a},e=fa.getText=function(a){var b,c="",d=0,f=a.nodeType;if(f){if(1===f||9===f||11===f){if("string"==typeof a.textContent)return a.textContent;for(a=a.firstChild;a;a=a.nextSibling)c+=e(a)}else if(3===f||4===f)return a.nodeValue}else while(b=a[d++])c+=e(b);return c},d=fa.selectors={cacheLength:50,createPseudo:ha,match:W,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(a){return a[1]=a[1].replace(ba,ca),a[3]=(a[3]||a[4]||a[5]||"").replace(ba,ca),"~="===a[2]&&(a[3]=" "+a[3]+" "),a.slice(0,4)},CHILD:function(a){return a[1]=a[1].toLowerCase(),"nth"===a[1].slice(0,3)?(a[3]||fa.error(a[0]),a[4]=+(a[4]?a[5]+(a[6]||1):2*("even"===a[3]||"odd"===a[3])),a[5]=+(a[7]+a[8]||"odd"===a[3])):a[3]&&fa.error(a[0]),a},PSEUDO:function(a){var b,c=!a[6]&&a[2];return W.CHILD.test(a[0])?null:(a[3]?a[2]=a[4]||a[5]||"":c&&U.test(c)&&(b=g(c,!0))&&(b=c.indexOf(")",c.length-b)-c.length)&&(a[0]=a[0].slice(0,b),a[2]=c.slice(0,b)),a.slice(0,3))}},filter:{TAG:function(a){var b=a.replace(ba,ca).toLowerCase();return"*"===a?function(){return!0}:function(a){return a.nodeName&&a.nodeName.toLowerCase()===b}},CLASS:function(a){var b=y[a+" "];return b||(b=new RegExp("(^|"+L+")"+a+"("+L+"|$)"))&&y(a,function(a){return b.test("string"==typeof a.className&&a.className||"undefined"!=typeof a.getAttribute&&a.getAttribute("class")||"")})},ATTR:function(a,b,c){return function(d){var e=fa.attr(d,a);return null==e?"!="===b:b?(e+="","="===b?e===c:"!="===b?e!==c:"^="===b?c&&0===e.indexOf(c):"*="===b?c&&e.indexOf(c)>-1:"$="===b?c&&e.slice(-c.length)===c:"~="===b?(" "+e.replace(P," ")+" ").indexOf(c)>-1:"|="===b?e===c||e.slice(0,c.length+1)===c+"-":!1):!0}},CHILD:function(a,b,c,d,e){var f="nth"!==a.slice(0,3),g="last"!==a.slice(-4),h="of-type"===b;return 1===d&&0===e?function(a){return!!a.parentNode}:function(b,c,i){var j,k,l,m,n,o,p=f!==g?"nextSibling":"previousSibling",q=b.parentNode,r=h&&b.nodeName.toLowerCase(),s=!i&&!h,t=!1;if(q){if(f){while(p){m=b;while(m=m[p])if(h?m.nodeName.toLowerCase()===r:1===m.nodeType)return!1;o=p="only"===a&&!o&&"nextSibling"}return!0}if(o=[g?q.firstChild:q.lastChild],g&&s){m=q,l=m[u]||(m[u]={}),k=l[m.uniqueID]||(l[m.uniqueID]={}),j=k[a]||[],n=j[0]===w&&j[1],t=n&&j[2],m=n&&q.childNodes[n];while(m=++n&&m&&m[p]||(t=n=0)||o.pop())if(1===m.nodeType&&++t&&m===b){k[a]=[w,n,t];break}}else if(s&&(m=b,l=m[u]||(m[u]={}),k=l[m.uniqueID]||(l[m.uniqueID]={}),j=k[a]||[],n=j[0]===w&&j[1],t=n),t===!1)while(m=++n&&m&&m[p]||(t=n=0)||o.pop())if((h?m.nodeName.toLowerCase()===r:1===m.nodeType)&&++t&&(s&&(l=m[u]||(m[u]={}),k=l[m.uniqueID]||(l[m.uniqueID]={}),k[a]=[w,t]),m===b))break;return t-=e,t===d||t%d===0&&t/d>=0}}},PSEUDO:function(a,b){var c,e=d.pseudos[a]||d.setFilters[a.toLowerCase()]||fa.error("unsupported pseudo: "+a);return e[u]?e(b):e.length>1?(c=[a,a,"",b],d.setFilters.hasOwnProperty(a.toLowerCase())?ha(function(a,c){var d,f=e(a,b),g=f.length;while(g--)d=J(a,f[g]),a[d]=!(c[d]=f[g])}):function(a){return e(a,0,c)}):e}},pseudos:{not:ha(function(a){var b=[],c=[],d=h(a.replace(Q,"$1"));return d[u]?ha(function(a,b,c,e){var f,g=d(a,null,e,[]),h=a.length;while(h--)(f=g[h])&&(a[h]=!(b[h]=f))}):function(a,e,f){return b[0]=a,d(b,null,f,c),b[0]=null,!c.pop()}}),has:ha(function(a){return function(b){return fa(a,b).length>0}}),contains:ha(function(a){return a=a.replace(ba,ca),function(b){return(b.textContent||b.innerText||e(b)).indexOf(a)>-1}}),lang:ha(function(a){return V.test(a||"")||fa.error("unsupported lang: "+a),a=a.replace(ba,ca).toLowerCase(),function(b){var c;do if(c=p?b.lang:b.getAttribute("xml:lang")||b.getAttribute("lang"))return c=c.toLowerCase(),c===a||0===c.indexOf(a+"-");while((b=b.parentNode)&&1===b.nodeType);return!1}}),target:function(b){var c=a.location&&a.location.hash;return c&&c.slice(1)===b.id},root:function(a){return a===o},focus:function(a){return a===n.activeElement&&(!n.hasFocus||n.hasFocus())&&!!(a.type||a.href||~a.tabIndex)},enabled:function(a){return a.disabled===!1},disabled:function(a){return a.disabled===!0},checked:function(a){var b=a.nodeName.toLowerCase();return"input"===b&&!!a.checked||"option"===b&&!!a.selected},selected:function(a){return a.parentNode&&a.parentNode.selectedIndex,a.selected===!0},empty:function(a){for(a=a.firstChild;a;a=a.nextSibling)if(a.nodeType<6)return!1;return!0},parent:function(a){return!d.pseudos.empty(a)},header:function(a){return Y.test(a.nodeName)},input:function(a){return X.test(a.nodeName)},button:function(a){var b=a.nodeName.toLowerCase();return"input"===b&&"button"===a.type||"button"===b},text:function(a){var b;return"input"===a.nodeName.toLowerCase()&&"text"===a.type&&(null==(b=a.getAttribute("type"))||"text"===b.toLowerCase())},first:na(function(){return[0]}),last:na(function(a,b){return[b-1]}),eq:na(function(a,b,c){return[0>c?c+b:c]}),even:na(function(a,b){for(var c=0;b>c;c+=2)a.push(c);return a}),odd:na(function(a,b){for(var c=1;b>c;c+=2)a.push(c);return a}),lt:na(function(a,b,c){for(var d=0>c?c+b:c;--d>=0;)a.push(d);return a}),gt:na(function(a,b,c){for(var d=0>c?c+b:c;++d<b;)a.push(d);return a})}},d.pseudos.nth=d.pseudos.eq;for(b in{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})d.pseudos[b]=la(b);for(b in{submit:!0,reset:!0})d.pseudos[b]=ma(b);function pa(){}pa.prototype=d.filters=d.pseudos,d.setFilters=new pa,g=fa.tokenize=function(a,b){var c,e,f,g,h,i,j,k=z[a+" "];if(k)return b?0:k.slice(0);h=a,i=[],j=d.preFilter;while(h){(!c||(e=R.exec(h)))&&(e&&(h=h.slice(e[0].length)||h),i.push(f=[])),c=!1,(e=S.exec(h))&&(c=e.shift(),f.push({value:c,type:e[0].replace(Q," ")}),h=h.slice(c.length));for(g in d.filter)!(e=W[g].exec(h))||j[g]&&!(e=j[g](e))||(c=e.shift(),f.push({value:c,type:g,matches:e}),h=h.slice(c.length));if(!c)break}return b?h.length:h?fa.error(a):z(a,i).slice(0)};function qa(a){for(var b=0,c=a.length,d="";c>b;b++)d+=a[b].value;return d}function ra(a,b,c){var d=b.dir,e=c&&"parentNode"===d,f=x++;return b.first?function(b,c,f){while(b=b[d])if(1===b.nodeType||e)return a(b,c,f)}:function(b,c,g){var h,i,j,k=[w,f];if(g){while(b=b[d])if((1===b.nodeType||e)&&a(b,c,g))return!0}else while(b=b[d])if(1===b.nodeType||e){if(j=b[u]||(b[u]={}),i=j[b.uniqueID]||(j[b.uniqueID]={}),(h=i[d])&&h[0]===w&&h[1]===f)return k[2]=h[2];if(i[d]=k,k[2]=a(b,c,g))return!0}}}function sa(a){return a.length>1?function(b,c,d){var e=a.length;while(e--)if(!a[e](b,c,d))return!1;return!0}:a[0]}function ta(a,b,c){for(var d=0,e=b.length;e>d;d++)fa(a,b[d],c);return c}function ua(a,b,c,d,e){for(var f,g=[],h=0,i=a.length,j=null!=b;i>h;h++)(f=a[h])&&(!c||c(f,d,e))&&(g.push(f),j&&b.push(h));return g}function va(a,b,c,d,e,f){return d&&!d[u]&&(d=va(d)),e&&!e[u]&&(e=va(e,f)),ha(function(f,g,h,i){var j,k,l,m=[],n=[],o=g.length,p=f||ta(b||"*",h.nodeType?[h]:h,[]),q=!a||!f&&b?p:ua(p,m,a,h,i),r=c?e||(f?a:o||d)?[]:g:q;if(c&&c(q,r,h,i),d){j=ua(r,n),d(j,[],h,i),k=j.length;while(k--)(l=j[k])&&(r[n[k]]=!(q[n[k]]=l))}if(f){if(e||a){if(e){j=[],k=r.length;while(k--)(l=r[k])&&j.push(q[k]=l);e(null,r=[],j,i)}k=r.length;while(k--)(l=r[k])&&(j=e?J(f,l):m[k])>-1&&(f[j]=!(g[j]=l))}}else r=ua(r===g?r.splice(o,r.length):r),e?e(null,g,r,i):H.apply(g,r)})}function wa(a){for(var b,c,e,f=a.length,g=d.relative[a[0].type],h=g||d.relative[" "],i=g?1:0,k=ra(function(a){return a===b},h,!0),l=ra(function(a){return J(b,a)>-1},h,!0),m=[function(a,c,d){var e=!g&&(d||c!==j)||((b=c).nodeType?k(a,c,d):l(a,c,d));return b=null,e}];f>i;i++)if(c=d.relative[a[i].type])m=[ra(sa(m),c)];else{if(c=d.filter[a[i].type].apply(null,a[i].matches),c[u]){for(e=++i;f>e;e++)if(d.relative[a[e].type])break;return va(i>1&&sa(m),i>1&&qa(a.slice(0,i-1).concat({value:" "===a[i-2].type?"*":""})).replace(Q,"$1"),c,e>i&&wa(a.slice(i,e)),f>e&&wa(a=a.slice(e)),f>e&&qa(a))}m.push(c)}return sa(m)}function xa(a,b){var c=b.length>0,e=a.length>0,f=function(f,g,h,i,k){var l,o,q,r=0,s="0",t=f&&[],u=[],v=j,x=f||e&&d.find.TAG("*",k),y=w+=null==v?1:Math.random()||.1,z=x.length;for(k&&(j=g===n||g||k);s!==z&&null!=(l=x[s]);s++){if(e&&l){o=0,g||l.ownerDocument===n||(m(l),h=!p);while(q=a[o++])if(q(l,g||n,h)){i.push(l);break}k&&(w=y)}c&&((l=!q&&l)&&r--,f&&t.push(l))}if(r+=s,c&&s!==r){o=0;while(q=b[o++])q(t,u,g,h);if(f){if(r>0)while(s--)t[s]||u[s]||(u[s]=F.call(i));u=ua(u)}H.apply(i,u),k&&!f&&u.length>0&&r+b.length>1&&fa.uniqueSort(i)}return k&&(w=y,j=v),t};return c?ha(f):f}return h=fa.compile=function(a,b){var c,d=[],e=[],f=A[a+" "];if(!f){b||(b=g(a)),c=b.length;while(c--)f=wa(b[c]),f[u]?d.push(f):e.push(f);f=A(a,xa(e,d)),f.selector=a}return f},i=fa.select=function(a,b,e,f){var i,j,k,l,m,n="function"==typeof a&&a,o=!f&&g(a=n.selector||a);if(e=e||[],1===o.length){if(j=o[0]=o[0].slice(0),j.length>2&&"ID"===(k=j[0]).type&&c.getById&&9===b.nodeType&&p&&d.relative[j[1].type]){if(b=(d.find.ID(k.matches[0].replace(ba,ca),b)||[])[0],!b)return e;n&&(b=b.parentNode),a=a.slice(j.shift().value.length)}i=W.needsContext.test(a)?0:j.length;while(i--){if(k=j[i],d.relative[l=k.type])break;if((m=d.find[l])&&(f=m(k.matches[0].replace(ba,ca),_.test(j[0].type)&&oa(b.parentNode)||b))){if(j.splice(i,1),a=f.length&&qa(j),!a)return H.apply(e,f),e;break}}}return(n||h(a,o))(f,b,!p,e,!b||_.test(a)&&oa(b.parentNode)||b),e},c.sortStable=u.split("").sort(B).join("")===u,c.detectDuplicates=!!l,m(),c.sortDetached=ia(function(a){return 1&a.compareDocumentPosition(n.createElement("div"))}),ia(function(a){return a.innerHTML="<a href='#'></a>","#"===a.firstChild.getAttribute("href")})||ja("type|href|height|width",function(a,b,c){return c?void 0:a.getAttribute(b,"type"===b.toLowerCase()?1:2)}),c.attributes&&ia(function(a){return a.innerHTML="<input/>",a.firstChild.setAttribute("value",""),""===a.firstChild.getAttribute("value")})||ja("value",function(a,b,c){return c||"input"!==a.nodeName.toLowerCase()?void 0:a.defaultValue}),ia(function(a){return null==a.getAttribute("disabled")})||ja(K,function(a,b,c){var d;return c?void 0:a[b]===!0?b.toLowerCase():(d=a.getAttributeNode(b))&&d.specified?d.value:null}),fa}(a);n.find=t,n.expr=t.selectors,n.expr[":"]=n.expr.pseudos,n.uniqueSort=n.unique=t.uniqueSort,n.text=t.getText,n.isXMLDoc=t.isXML,n.contains=t.contains;var u=function(a,b,c){var d=[],e=void 0!==c;while((a=a[b])&&9!==a.nodeType)if(1===a.nodeType){if(e&&n(a).is(c))break;d.push(a)}return d},v=function(a,b){for(var c=[];a;a=a.nextSibling)1===a.nodeType&&a!==b&&c.push(a);return c},w=n.expr.match.needsContext,x=/^<([\w-]+)\s*\/?>(?:<\/\1>|)$/,y=/^.[^:#\[\.,]*$/;function z(a,b,c){if(n.isFunction(b))return n.grep(a,function(a,d){return!!b.call(a,d,a)!==c});if(b.nodeType)return n.grep(a,function(a){return a===b!==c});if("string"==typeof b){if(y.test(b))return n.filter(b,a,c);b=n.filter(b,a)}return n.grep(a,function(a){return h.call(b,a)>-1!==c})}n.filter=function(a,b,c){var d=b[0];return c&&(a=":not("+a+")"),1===b.length&&1===d.nodeType?n.find.matchesSelector(d,a)?[d]:[]:n.find.matches(a,n.grep(b,function(a){return 1===a.nodeType}))},n.fn.extend({find:function(a){var b,c=this.length,d=[],e=this;if("string"!=typeof a)return this.pushStack(n(a).filter(function(){for(b=0;c>b;b++)if(n.contains(e[b],this))return!0}));for(b=0;c>b;b++)n.find(a,e[b],d);return d=this.pushStack(c>1?n.unique(d):d),d.selector=this.selector?this.selector+" "+a:a,d},filter:function(a){return this.pushStack(z(this,a||[],!1))},not:function(a){return this.pushStack(z(this,a||[],!0))},is:function(a){return!!z(this,"string"==typeof a&&w.test(a)?n(a):a||[],!1).length}});var A,B=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]*))$/,C=n.fn.init=function(a,b,c){var e,f;if(!a)return this;if(c=c||A,"string"==typeof a){if(e="<"===a[0]&&">"===a[a.length-1]&&a.length>=3?[null,a,null]:B.exec(a),!e||!e[1]&&b)return!b||b.jquery?(b||c).find(a):this.constructor(b).find(a);if(e[1]){if(b=b instanceof n?b[0]:b,n.merge(this,n.parseHTML(e[1],b&&b.nodeType?b.ownerDocument||b:d,!0)),x.test(e[1])&&n.isPlainObject(b))for(e in b)n.isFunction(this[e])?this[e](b[e]):this.attr(e,b[e]);return this}return f=d.getElementById(e[2]),f&&f.parentNode&&(this.length=1,this[0]=f),this.context=d,this.selector=a,this}return a.nodeType?(this.context=this[0]=a,this.length=1,this):n.isFunction(a)?void 0!==c.ready?c.ready(a):a(n):(void 0!==a.selector&&(this.selector=a.selector,this.context=a.context),n.makeArray(a,this))};C.prototype=n.fn,A=n(d);var D=/^(?:parents|prev(?:Until|All))/,E={children:!0,contents:!0,next:!0,prev:!0};n.fn.extend({has:function(a){var b=n(a,this),c=b.length;return this.filter(function(){for(var a=0;c>a;a++)if(n.contains(this,b[a]))return!0})},closest:function(a,b){for(var c,d=0,e=this.length,f=[],g=w.test(a)||"string"!=typeof a?n(a,b||this.context):0;e>d;d++)for(c=this[d];c&&c!==b;c=c.parentNode)if(c.nodeType<11&&(g?g.index(c)>-1:1===c.nodeType&&n.find.matchesSelector(c,a))){f.push(c);break}return this.pushStack(f.length>1?n.uniqueSort(f):f)},index:function(a){return a?"string"==typeof a?h.call(n(a),this[0]):h.call(this,a.jquery?a[0]:a):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(a,b){return this.pushStack(n.uniqueSort(n.merge(this.get(),n(a,b))))},addBack:function(a){return this.add(null==a?this.prevObject:this.prevObject.filter(a))}});function F(a,b){while((a=a[b])&&1!==a.nodeType);return a}n.each({parent:function(a){var b=a.parentNode;return b&&11!==b.nodeType?b:null},parents:function(a){return u(a,"parentNode")},parentsUntil:function(a,b,c){return u(a,"parentNode",c)},next:function(a){return F(a,"nextSibling")},prev:function(a){return F(a,"previousSibling")},nextAll:function(a){return u(a,"nextSibling")},prevAll:function(a){return u(a,"previousSibling")},nextUntil:function(a,b,c){return u(a,"nextSibling",c)},prevUntil:function(a,b,c){return u(a,"previousSibling",c)},siblings:function(a){return v((a.parentNode||{}).firstChild,a)},children:function(a){return v(a.firstChild)},contents:function(a){return a.contentDocument||n.merge([],a.childNodes)}},function(a,b){n.fn[a]=function(c,d){var e=n.map(this,b,c);return"Until"!==a.slice(-5)&&(d=c),d&&"string"==typeof d&&(e=n.filter(d,e)),this.length>1&&(E[a]||n.uniqueSort(e),D.test(a)&&e.reverse()),this.pushStack(e)}});var G=/\S+/g;function H(a){var b={};return n.each(a.match(G)||[],function(a,c){b[c]=!0}),b}n.Callbacks=function(a){a="string"==typeof a?H(a):n.extend({},a);var b,c,d,e,f=[],g=[],h=-1,i=function(){for(e=a.once,d=b=!0;g.length;h=-1){c=g.shift();while(++h<f.length)f[h].apply(c[0],c[1])===!1&&a.stopOnFalse&&(h=f.length,c=!1)}a.memory||(c=!1),b=!1,e&&(f=c?[]:"")},j={add:function(){return f&&(c&&!b&&(h=f.length-1,g.push(c)),function d(b){n.each(b,function(b,c){n.isFunction(c)?a.unique&&j.has(c)||f.push(c):c&&c.length&&"string"!==n.type(c)&&d(c)})}(arguments),c&&!b&&i()),this},remove:function(){return n.each(arguments,function(a,b){var c;while((c=n.inArray(b,f,c))>-1)f.splice(c,1),h>=c&&h--}),this},has:function(a){return a?n.inArray(a,f)>-1:f.length>0},empty:function(){return f&&(f=[]),this},disable:function(){return e=g=[],f=c="",this},disabled:function(){return!f},lock:function(){return e=g=[],c||(f=c=""),this},locked:function(){return!!e},fireWith:function(a,c){return e||(c=c||[],c=[a,c.slice?c.slice():c],g.push(c),b||i()),this},fire:function(){return j.fireWith(this,arguments),this},fired:function(){return!!d}};return j},n.extend({Deferred:function(a){var b=[["resolve","done",n.Callbacks("once memory"),"resolved"],["reject","fail",n.Callbacks("once memory"),"rejected"],["notify","progress",n.Callbacks("memory")]],c="pending",d={state:function(){return c},always:function(){return e.done(arguments).fail(arguments),this},then:function(){var a=arguments;return n.Deferred(function(c){n.each(b,function(b,f){var g=n.isFunction(a[b])&&a[b];e[f[1]](function(){var a=g&&g.apply(this,arguments);a&&n.isFunction(a.promise)?a.promise().progress(c.notify).done(c.resolve).fail(c.reject):c[f[0]+"With"](this===d?c.promise():this,g?[a]:arguments)})}),a=null}).promise()},promise:function(a){return null!=a?n.extend(a,d):d}},e={};return d.pipe=d.then,n.each(b,function(a,f){var g=f[2],h=f[3];d[f[1]]=g.add,h&&g.add(function(){c=h},b[1^a][2].disable,b[2][2].lock),e[f[0]]=function(){return e[f[0]+"With"](this===e?d:this,arguments),this},e[f[0]+"With"]=g.fireWith}),d.promise(e),a&&a.call(e,e),e},when:function(a){var b=0,c=e.call(arguments),d=c.length,f=1!==d||a&&n.isFunction(a.promise)?d:0,g=1===f?a:n.Deferred(),h=function(a,b,c){return function(d){b[a]=this,c[a]=arguments.length>1?e.call(arguments):d,c===i?g.notifyWith(b,c):--f||g.resolveWith(b,c)}},i,j,k;if(d>1)for(i=new Array(d),j=new Array(d),k=new Array(d);d>b;b++)c[b]&&n.isFunction(c[b].promise)?c[b].promise().progress(h(b,j,i)).done(h(b,k,c)).fail(g.reject):--f;return f||g.resolveWith(k,c),g.promise()}});var I;n.fn.ready=function(a){return n.ready.promise().done(a),this},n.extend({isReady:!1,readyWait:1,holdReady:function(a){a?n.readyWait++:n.ready(!0)},ready:function(a){(a===!0?--n.readyWait:n.isReady)||(n.isReady=!0,a!==!0&&--n.readyWait>0||(I.resolveWith(d,[n]),n.fn.triggerHandler&&(n(d).triggerHandler("ready"),n(d).off("ready"))))}});function J(){d.removeEventListener("DOMContentLoaded",J),a.removeEventListener("load",J),n.ready()}n.ready.promise=function(b){return I||(I=n.Deferred(),"complete"===d.readyState||"loading"!==d.readyState&&!d.documentElement.doScroll?a.setTimeout(n.ready):(d.addEventListener("DOMContentLoaded",J),a.addEventListener("load",J))),I.promise(b)},n.ready.promise();var K=function(a,b,c,d,e,f,g){var h=0,i=a.length,j=null==c;if("object"===n.type(c)){e=!0;for(h in c)K(a,b,h,c[h],!0,f,g)}else if(void 0!==d&&(e=!0,n.isFunction(d)||(g=!0),j&&(g?(b.call(a,d),b=null):(j=b,b=function(a,b,c){return j.call(n(a),c)})),b))for(;i>h;h++)b(a[h],c,g?d:d.call(a[h],h,b(a[h],c)));return e?a:j?b.call(a):i?b(a[0],c):f},L=function(a){return 1===a.nodeType||9===a.nodeType||!+a.nodeType};function M(){this.expando=n.expando+M.uid++}M.uid=1,M.prototype={register:function(a,b){var c=b||{};return a.nodeType?a[this.expando]=c:Object.defineProperty(a,this.expando,{value:c,writable:!0,configurable:!0}),a[this.expando]},cache:function(a){if(!L(a))return{};var b=a[this.expando];return b||(b={},L(a)&&(a.nodeType?a[this.expando]=b:Object.defineProperty(a,this.expando,{value:b,configurable:!0}))),b},set:function(a,b,c){var d,e=this.cache(a);if("string"==typeof b)e[b]=c;else for(d in b)e[d]=b[d];return e},get:function(a,b){return void 0===b?this.cache(a):a[this.expando]&&a[this.expando][b]},access:function(a,b,c){var d;return void 0===b||b&&"string"==typeof b&&void 0===c?(d=this.get(a,b),void 0!==d?d:this.get(a,n.camelCase(b))):(this.set(a,b,c),void 0!==c?c:b)},remove:function(a,b){var c,d,e,f=a[this.expando];if(void 0!==f){if(void 0===b)this.register(a);else{n.isArray(b)?d=b.concat(b.map(n.camelCase)):(e=n.camelCase(b),b in f?d=[b,e]:(d=e,d=d in f?[d]:d.match(G)||[])),c=d.length;while(c--)delete f[d[c]]}(void 0===b||n.isEmptyObject(f))&&(a.nodeType?a[this.expando]=void 0:delete a[this.expando])}},hasData:function(a){var b=a[this.expando];return void 0!==b&&!n.isEmptyObject(b)}};var N=new M,O=new M,P=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,Q=/[A-Z]/g;function R(a,b,c){var d;if(void 0===c&&1===a.nodeType)if(d="data-"+b.replace(Q,"-$&").toLowerCase(),c=a.getAttribute(d),"string"==typeof c){try{c="true"===c?!0:"false"===c?!1:"null"===c?null:+c+""===c?+c:P.test(c)?n.parseJSON(c):c}catch(e){}O.set(a,b,c);
}else c=void 0;return c}n.extend({hasData:function(a){return O.hasData(a)||N.hasData(a)},data:function(a,b,c){return O.access(a,b,c)},removeData:function(a,b){O.remove(a,b)},_data:function(a,b,c){return N.access(a,b,c)},_removeData:function(a,b){N.remove(a,b)}}),n.fn.extend({data:function(a,b){var c,d,e,f=this[0],g=f&&f.attributes;if(void 0===a){if(this.length&&(e=O.get(f),1===f.nodeType&&!N.get(f,"hasDataAttrs"))){c=g.length;while(c--)g[c]&&(d=g[c].name,0===d.indexOf("data-")&&(d=n.camelCase(d.slice(5)),R(f,d,e[d])));N.set(f,"hasDataAttrs",!0)}return e}return"object"==typeof a?this.each(function(){O.set(this,a)}):K(this,function(b){var c,d;if(f&&void 0===b){if(c=O.get(f,a)||O.get(f,a.replace(Q,"-$&").toLowerCase()),void 0!==c)return c;if(d=n.camelCase(a),c=O.get(f,d),void 0!==c)return c;if(c=R(f,d,void 0),void 0!==c)return c}else d=n.camelCase(a),this.each(function(){var c=O.get(this,d);O.set(this,d,b),a.indexOf("-")>-1&&void 0!==c&&O.set(this,a,b)})},null,b,arguments.length>1,null,!0)},removeData:function(a){return this.each(function(){O.remove(this,a)})}}),n.extend({queue:function(a,b,c){var d;return a?(b=(b||"fx")+"queue",d=N.get(a,b),c&&(!d||n.isArray(c)?d=N.access(a,b,n.makeArray(c)):d.push(c)),d||[]):void 0},dequeue:function(a,b){b=b||"fx";var c=n.queue(a,b),d=c.length,e=c.shift(),f=n._queueHooks(a,b),g=function(){n.dequeue(a,b)};"inprogress"===e&&(e=c.shift(),d--),e&&("fx"===b&&c.unshift("inprogress"),delete f.stop,e.call(a,g,f)),!d&&f&&f.empty.fire()},_queueHooks:function(a,b){var c=b+"queueHooks";return N.get(a,c)||N.access(a,c,{empty:n.Callbacks("once memory").add(function(){N.remove(a,[b+"queue",c])})})}}),n.fn.extend({queue:function(a,b){var c=2;return"string"!=typeof a&&(b=a,a="fx",c--),arguments.length<c?n.queue(this[0],a):void 0===b?this:this.each(function(){var c=n.queue(this,a,b);n._queueHooks(this,a),"fx"===a&&"inprogress"!==c[0]&&n.dequeue(this,a)})},dequeue:function(a){return this.each(function(){n.dequeue(this,a)})},clearQueue:function(a){return this.queue(a||"fx",[])},promise:function(a,b){var c,d=1,e=n.Deferred(),f=this,g=this.length,h=function(){--d||e.resolveWith(f,[f])};"string"!=typeof a&&(b=a,a=void 0),a=a||"fx";while(g--)c=N.get(f[g],a+"queueHooks"),c&&c.empty&&(d++,c.empty.add(h));return h(),e.promise(b)}});var S=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,T=new RegExp("^(?:([+-])=|)("+S+")([a-z%]*)$","i"),U=["Top","Right","Bottom","Left"],V=function(a,b){return a=b||a,"none"===n.css(a,"display")||!n.contains(a.ownerDocument,a)};function W(a,b,c,d){var e,f=1,g=20,h=d?function(){return d.cur()}:function(){return n.css(a,b,"")},i=h(),j=c&&c[3]||(n.cssNumber[b]?"":"px"),k=(n.cssNumber[b]||"px"!==j&&+i)&&T.exec(n.css(a,b));if(k&&k[3]!==j){j=j||k[3],c=c||[],k=+i||1;do f=f||".5",k/=f,n.style(a,b,k+j);while(f!==(f=h()/i)&&1!==f&&--g)}return c&&(k=+k||+i||0,e=c[1]?k+(c[1]+1)*c[2]:+c[2],d&&(d.unit=j,d.start=k,d.end=e)),e}var X=/^(?:checkbox|radio)$/i,Y=/<([\w:-]+)/,Z=/^$|\/(?:java|ecma)script/i,$={option:[1,"<select multiple='multiple'>","</select>"],thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};$.optgroup=$.option,$.tbody=$.tfoot=$.colgroup=$.caption=$.thead,$.th=$.td;function _(a,b){var c="undefined"!=typeof a.getElementsByTagName?a.getElementsByTagName(b||"*"):"undefined"!=typeof a.querySelectorAll?a.querySelectorAll(b||"*"):[];return void 0===b||b&&n.nodeName(a,b)?n.merge([a],c):c}function aa(a,b){for(var c=0,d=a.length;d>c;c++)N.set(a[c],"globalEval",!b||N.get(b[c],"globalEval"))}var ba=/<|&#?\w+;/;function ca(a,b,c,d,e){for(var f,g,h,i,j,k,l=b.createDocumentFragment(),m=[],o=0,p=a.length;p>o;o++)if(f=a[o],f||0===f)if("object"===n.type(f))n.merge(m,f.nodeType?[f]:f);else if(ba.test(f)){g=g||l.appendChild(b.createElement("div")),h=(Y.exec(f)||["",""])[1].toLowerCase(),i=$[h]||$._default,g.innerHTML=i[1]+n.htmlPrefilter(f)+i[2],k=i[0];while(k--)g=g.lastChild;n.merge(m,g.childNodes),g=l.firstChild,g.textContent=""}else m.push(b.createTextNode(f));l.textContent="",o=0;while(f=m[o++])if(d&&n.inArray(f,d)>-1)e&&e.push(f);else if(j=n.contains(f.ownerDocument,f),g=_(l.appendChild(f),"script"),j&&aa(g),c){k=0;while(f=g[k++])Z.test(f.type||"")&&c.push(f)}return l}!function(){var a=d.createDocumentFragment(),b=a.appendChild(d.createElement("div")),c=d.createElement("input");c.setAttribute("type","radio"),c.setAttribute("checked","checked"),c.setAttribute("name","t"),b.appendChild(c),l.checkClone=b.cloneNode(!0).cloneNode(!0).lastChild.checked,b.innerHTML="<textarea>x</textarea>",l.noCloneChecked=!!b.cloneNode(!0).lastChild.defaultValue}();var da=/^key/,ea=/^(?:mouse|pointer|contextmenu|drag|drop)|click/,fa=/^([^.]*)(?:\.(.+)|)/;function ga(){return!0}function ha(){return!1}function ia(){try{return d.activeElement}catch(a){}}function ja(a,b,c,d,e,f){var g,h;if("object"==typeof b){"string"!=typeof c&&(d=d||c,c=void 0);for(h in b)ja(a,h,c,d,b[h],f);return a}if(null==d&&null==e?(e=c,d=c=void 0):null==e&&("string"==typeof c?(e=d,d=void 0):(e=d,d=c,c=void 0)),e===!1)e=ha;else if(!e)return this;return 1===f&&(g=e,e=function(a){return n().off(a),g.apply(this,arguments)},e.guid=g.guid||(g.guid=n.guid++)),a.each(function(){n.event.add(this,b,e,d,c)})}n.event={global:{},add:function(a,b,c,d,e){var f,g,h,i,j,k,l,m,o,p,q,r=N.get(a);if(r){c.handler&&(f=c,c=f.handler,e=f.selector),c.guid||(c.guid=n.guid++),(i=r.events)||(i=r.events={}),(g=r.handle)||(g=r.handle=function(b){return"undefined"!=typeof n&&n.event.triggered!==b.type?n.event.dispatch.apply(a,arguments):void 0}),b=(b||"").match(G)||[""],j=b.length;while(j--)h=fa.exec(b[j])||[],o=q=h[1],p=(h[2]||"").split(".").sort(),o&&(l=n.event.special[o]||{},o=(e?l.delegateType:l.bindType)||o,l=n.event.special[o]||{},k=n.extend({type:o,origType:q,data:d,handler:c,guid:c.guid,selector:e,needsContext:e&&n.expr.match.needsContext.test(e),namespace:p.join(".")},f),(m=i[o])||(m=i[o]=[],m.delegateCount=0,l.setup&&l.setup.call(a,d,p,g)!==!1||a.addEventListener&&a.addEventListener(o,g)),l.add&&(l.add.call(a,k),k.handler.guid||(k.handler.guid=c.guid)),e?m.splice(m.delegateCount++,0,k):m.push(k),n.event.global[o]=!0)}},remove:function(a,b,c,d,e){var f,g,h,i,j,k,l,m,o,p,q,r=N.hasData(a)&&N.get(a);if(r&&(i=r.events)){b=(b||"").match(G)||[""],j=b.length;while(j--)if(h=fa.exec(b[j])||[],o=q=h[1],p=(h[2]||"").split(".").sort(),o){l=n.event.special[o]||{},o=(d?l.delegateType:l.bindType)||o,m=i[o]||[],h=h[2]&&new RegExp("(^|\\.)"+p.join("\\.(?:.*\\.|)")+"(\\.|$)"),g=f=m.length;while(f--)k=m[f],!e&&q!==k.origType||c&&c.guid!==k.guid||h&&!h.test(k.namespace)||d&&d!==k.selector&&("**"!==d||!k.selector)||(m.splice(f,1),k.selector&&m.delegateCount--,l.remove&&l.remove.call(a,k));g&&!m.length&&(l.teardown&&l.teardown.call(a,p,r.handle)!==!1||n.removeEvent(a,o,r.handle),delete i[o])}else for(o in i)n.event.remove(a,o+b[j],c,d,!0);n.isEmptyObject(i)&&N.remove(a,"handle events")}},dispatch:function(a){a=n.event.fix(a);var b,c,d,f,g,h=[],i=e.call(arguments),j=(N.get(this,"events")||{})[a.type]||[],k=n.event.special[a.type]||{};if(i[0]=a,a.delegateTarget=this,!k.preDispatch||k.preDispatch.call(this,a)!==!1){h=n.event.handlers.call(this,a,j),b=0;while((f=h[b++])&&!a.isPropagationStopped()){a.currentTarget=f.elem,c=0;while((g=f.handlers[c++])&&!a.isImmediatePropagationStopped())(!a.rnamespace||a.rnamespace.test(g.namespace))&&(a.handleObj=g,a.data=g.data,d=((n.event.special[g.origType]||{}).handle||g.handler).apply(f.elem,i),void 0!==d&&(a.result=d)===!1&&(a.preventDefault(),a.stopPropagation()))}return k.postDispatch&&k.postDispatch.call(this,a),a.result}},handlers:function(a,b){var c,d,e,f,g=[],h=b.delegateCount,i=a.target;if(h&&i.nodeType&&("click"!==a.type||isNaN(a.button)||a.button<1))for(;i!==this;i=i.parentNode||this)if(1===i.nodeType&&(i.disabled!==!0||"click"!==a.type)){for(d=[],c=0;h>c;c++)f=b[c],e=f.selector+" ",void 0===d[e]&&(d[e]=f.needsContext?n(e,this).index(i)>-1:n.find(e,this,null,[i]).length),d[e]&&d.push(f);d.length&&g.push({elem:i,handlers:d})}return h<b.length&&g.push({elem:this,handlers:b.slice(h)}),g},props:"altKey bubbles cancelable ctrlKey currentTarget detail eventPhase metaKey relatedTarget shiftKey target timeStamp view which".split(" "),fixHooks:{},keyHooks:{props:"char charCode key keyCode".split(" "),filter:function(a,b){return null==a.which&&(a.which=null!=b.charCode?b.charCode:b.keyCode),a}},mouseHooks:{props:"button buttons clientX clientY offsetX offsetY pageX pageY screenX screenY toElement".split(" "),filter:function(a,b){var c,e,f,g=b.button;return null==a.pageX&&null!=b.clientX&&(c=a.target.ownerDocument||d,e=c.documentElement,f=c.body,a.pageX=b.clientX+(e&&e.scrollLeft||f&&f.scrollLeft||0)-(e&&e.clientLeft||f&&f.clientLeft||0),a.pageY=b.clientY+(e&&e.scrollTop||f&&f.scrollTop||0)-(e&&e.clientTop||f&&f.clientTop||0)),a.which||void 0===g||(a.which=1&g?1:2&g?3:4&g?2:0),a}},fix:function(a){if(a[n.expando])return a;var b,c,e,f=a.type,g=a,h=this.fixHooks[f];h||(this.fixHooks[f]=h=ea.test(f)?this.mouseHooks:da.test(f)?this.keyHooks:{}),e=h.props?this.props.concat(h.props):this.props,a=new n.Event(g),b=e.length;while(b--)c=e[b],a[c]=g[c];return a.target||(a.target=d),3===a.target.nodeType&&(a.target=a.target.parentNode),h.filter?h.filter(a,g):a},special:{load:{noBubble:!0},focus:{trigger:function(){return this!==ia()&&this.focus?(this.focus(),!1):void 0},delegateType:"focusin"},blur:{trigger:function(){return this===ia()&&this.blur?(this.blur(),!1):void 0},delegateType:"focusout"},click:{trigger:function(){return"checkbox"===this.type&&this.click&&n.nodeName(this,"input")?(this.click(),!1):void 0},_default:function(a){return n.nodeName(a.target,"a")}},beforeunload:{postDispatch:function(a){void 0!==a.result&&a.originalEvent&&(a.originalEvent.returnValue=a.result)}}}},n.removeEvent=function(a,b,c){a.removeEventListener&&a.removeEventListener(b,c)},n.Event=function(a,b){return this instanceof n.Event?(a&&a.type?(this.originalEvent=a,this.type=a.type,this.isDefaultPrevented=a.defaultPrevented||void 0===a.defaultPrevented&&a.returnValue===!1?ga:ha):this.type=a,b&&n.extend(this,b),this.timeStamp=a&&a.timeStamp||n.now(),void(this[n.expando]=!0)):new n.Event(a,b)},n.Event.prototype={constructor:n.Event,isDefaultPrevented:ha,isPropagationStopped:ha,isImmediatePropagationStopped:ha,preventDefault:function(){var a=this.originalEvent;this.isDefaultPrevented=ga,a&&a.preventDefault()},stopPropagation:function(){var a=this.originalEvent;this.isPropagationStopped=ga,a&&a.stopPropagation()},stopImmediatePropagation:function(){var a=this.originalEvent;this.isImmediatePropagationStopped=ga,a&&a.stopImmediatePropagation(),this.stopPropagation()}},n.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},function(a,b){n.event.special[a]={delegateType:b,bindType:b,handle:function(a){var c,d=this,e=a.relatedTarget,f=a.handleObj;return(!e||e!==d&&!n.contains(d,e))&&(a.type=f.origType,c=f.handler.apply(this,arguments),a.type=b),c}}}),n.fn.extend({on:function(a,b,c,d){return ja(this,a,b,c,d)},one:function(a,b,c,d){return ja(this,a,b,c,d,1)},off:function(a,b,c){var d,e;if(a&&a.preventDefault&&a.handleObj)return d=a.handleObj,n(a.delegateTarget).off(d.namespace?d.origType+"."+d.namespace:d.origType,d.selector,d.handler),this;if("object"==typeof a){for(e in a)this.off(e,b,a[e]);return this}return(b===!1||"function"==typeof b)&&(c=b,b=void 0),c===!1&&(c=ha),this.each(function(){n.event.remove(this,a,c,b)})}});var ka=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:-]+)[^>]*)\/>/gi,la=/<script|<style|<link/i,ma=/checked\s*(?:[^=]|=\s*.checked.)/i,na=/^true\/(.*)/,oa=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;function pa(a,b){return n.nodeName(a,"table")&&n.nodeName(11!==b.nodeType?b:b.firstChild,"tr")?a.getElementsByTagName("tbody")[0]||a:a}function qa(a){return a.type=(null!==a.getAttribute("type"))+"/"+a.type,a}function ra(a){var b=na.exec(a.type);return b?a.type=b[1]:a.removeAttribute("type"),a}function sa(a,b){var c,d,e,f,g,h,i,j;if(1===b.nodeType){if(N.hasData(a)&&(f=N.access(a),g=N.set(b,f),j=f.events)){delete g.handle,g.events={};for(e in j)for(c=0,d=j[e].length;d>c;c++)n.event.add(b,e,j[e][c])}O.hasData(a)&&(h=O.access(a),i=n.extend({},h),O.set(b,i))}}function ta(a,b){var c=b.nodeName.toLowerCase();"input"===c&&X.test(a.type)?b.checked=a.checked:("input"===c||"textarea"===c)&&(b.defaultValue=a.defaultValue)}function ua(a,b,c,d){b=f.apply([],b);var e,g,h,i,j,k,m=0,o=a.length,p=o-1,q=b[0],r=n.isFunction(q);if(r||o>1&&"string"==typeof q&&!l.checkClone&&ma.test(q))return a.each(function(e){var f=a.eq(e);r&&(b[0]=q.call(this,e,f.html())),ua(f,b,c,d)});if(o&&(e=ca(b,a[0].ownerDocument,!1,a,d),g=e.firstChild,1===e.childNodes.length&&(e=g),g||d)){for(h=n.map(_(e,"script"),qa),i=h.length;o>m;m++)j=e,m!==p&&(j=n.clone(j,!0,!0),i&&n.merge(h,_(j,"script"))),c.call(a[m],j,m);if(i)for(k=h[h.length-1].ownerDocument,n.map(h,ra),m=0;i>m;m++)j=h[m],Z.test(j.type||"")&&!N.access(j,"globalEval")&&n.contains(k,j)&&(j.src?n._evalUrl&&n._evalUrl(j.src):n.globalEval(j.textContent.replace(oa,"")))}return a}function va(a,b,c){for(var d,e=b?n.filter(b,a):a,f=0;null!=(d=e[f]);f++)c||1!==d.nodeType||n.cleanData(_(d)),d.parentNode&&(c&&n.contains(d.ownerDocument,d)&&aa(_(d,"script")),d.parentNode.removeChild(d));return a}n.extend({htmlPrefilter:function(a){return a.replace(ka,"<$1></$2>")},clone:function(a,b,c){var d,e,f,g,h=a.cloneNode(!0),i=n.contains(a.ownerDocument,a);if(!(l.noCloneChecked||1!==a.nodeType&&11!==a.nodeType||n.isXMLDoc(a)))for(g=_(h),f=_(a),d=0,e=f.length;e>d;d++)ta(f[d],g[d]);if(b)if(c)for(f=f||_(a),g=g||_(h),d=0,e=f.length;e>d;d++)sa(f[d],g[d]);else sa(a,h);return g=_(h,"script"),g.length>0&&aa(g,!i&&_(a,"script")),h},cleanData:function(a){for(var b,c,d,e=n.event.special,f=0;void 0!==(c=a[f]);f++)if(L(c)){if(b=c[N.expando]){if(b.events)for(d in b.events)e[d]?n.event.remove(c,d):n.removeEvent(c,d,b.handle);c[N.expando]=void 0}c[O.expando]&&(c[O.expando]=void 0)}}}),n.fn.extend({domManip:ua,detach:function(a){return va(this,a,!0)},remove:function(a){return va(this,a)},text:function(a){return K(this,function(a){return void 0===a?n.text(this):this.empty().each(function(){(1===this.nodeType||11===this.nodeType||9===this.nodeType)&&(this.textContent=a)})},null,a,arguments.length)},append:function(){return ua(this,arguments,function(a){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var b=pa(this,a);b.appendChild(a)}})},prepend:function(){return ua(this,arguments,function(a){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var b=pa(this,a);b.insertBefore(a,b.firstChild)}})},before:function(){return ua(this,arguments,function(a){this.parentNode&&this.parentNode.insertBefore(a,this)})},after:function(){return ua(this,arguments,function(a){this.parentNode&&this.parentNode.insertBefore(a,this.nextSibling)})},empty:function(){for(var a,b=0;null!=(a=this[b]);b++)1===a.nodeType&&(n.cleanData(_(a,!1)),a.textContent="");return this},clone:function(a,b){return a=null==a?!1:a,b=null==b?a:b,this.map(function(){return n.clone(this,a,b)})},html:function(a){return K(this,function(a){var b=this[0]||{},c=0,d=this.length;if(void 0===a&&1===b.nodeType)return b.innerHTML;if("string"==typeof a&&!la.test(a)&&!$[(Y.exec(a)||["",""])[1].toLowerCase()]){a=n.htmlPrefilter(a);try{for(;d>c;c++)b=this[c]||{},1===b.nodeType&&(n.cleanData(_(b,!1)),b.innerHTML=a);b=0}catch(e){}}b&&this.empty().append(a)},null,a,arguments.length)},replaceWith:function(){var a=[];return ua(this,arguments,function(b){var c=this.parentNode;n.inArray(this,a)<0&&(n.cleanData(_(this)),c&&c.replaceChild(b,this))},a)}}),n.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(a,b){n.fn[a]=function(a){for(var c,d=[],e=n(a),f=e.length-1,h=0;f>=h;h++)c=h===f?this:this.clone(!0),n(e[h])[b](c),g.apply(d,c.get());return this.pushStack(d)}});var wa,xa={HTML:"block",BODY:"block"};function ya(a,b){var c=n(b.createElement(a)).appendTo(b.body),d=n.css(c[0],"display");return c.detach(),d}function za(a){var b=d,c=xa[a];return c||(c=ya(a,b),"none"!==c&&c||(wa=(wa||n("<iframe frameborder='0' width='0' height='0'/>")).appendTo(b.documentElement),b=wa[0].contentDocument,b.write(),b.close(),c=ya(a,b),wa.detach()),xa[a]=c),c}var Aa=/^margin/,Ba=new RegExp("^("+S+")(?!px)[a-z%]+$","i"),Ca=function(b){var c=b.ownerDocument.defaultView;return c.opener||(c=a),c.getComputedStyle(b)},Da=function(a,b,c,d){var e,f,g={};for(f in b)g[f]=a.style[f],a.style[f]=b[f];e=c.apply(a,d||[]);for(f in b)a.style[f]=g[f];return e},Ea=d.documentElement;!function(){var b,c,e,f,g=d.createElement("div"),h=d.createElement("div");if(h.style){h.style.backgroundClip="content-box",h.cloneNode(!0).style.backgroundClip="",l.clearCloneStyle="content-box"===h.style.backgroundClip,g.style.cssText="border:0;width:8px;height:0;top:0;left:-9999px;padding:0;margin-top:1px;position:absolute",g.appendChild(h);function i(){h.style.cssText="-webkit-box-sizing:border-box;-moz-box-sizing:border-box;box-sizing:border-box;position:relative;display:block;margin:auto;border:1px;padding:1px;top:1%;width:50%",h.innerHTML="",Ea.appendChild(g);var d=a.getComputedStyle(h);b="1%"!==d.top,f="2px"===d.marginLeft,c="4px"===d.width,h.style.marginRight="50%",e="4px"===d.marginRight,Ea.removeChild(g)}n.extend(l,{pixelPosition:function(){return i(),b},boxSizingReliable:function(){return null==c&&i(),c},pixelMarginRight:function(){return null==c&&i(),e},reliableMarginLeft:function(){return null==c&&i(),f},reliableMarginRight:function(){var b,c=h.appendChild(d.createElement("div"));return c.style.cssText=h.style.cssText="-webkit-box-sizing:content-box;box-sizing:content-box;display:block;margin:0;border:0;padding:0",c.style.marginRight=c.style.width="0",h.style.width="1px",Ea.appendChild(g),b=!parseFloat(a.getComputedStyle(c).marginRight),Ea.removeChild(g),h.removeChild(c),b}})}}();function Fa(a,b,c){var d,e,f,g,h=a.style;return c=c||Ca(a),c&&(g=c.getPropertyValue(b)||c[b],""!==g||n.contains(a.ownerDocument,a)||(g=n.style(a,b)),!l.pixelMarginRight()&&Ba.test(g)&&Aa.test(b)&&(d=h.width,e=h.minWidth,f=h.maxWidth,h.minWidth=h.maxWidth=h.width=g,g=c.width,h.width=d,h.minWidth=e,h.maxWidth=f)),void 0!==g?g+"":g}function Ga(a,b){return{get:function(){return a()?void delete this.get:(this.get=b).apply(this,arguments)}}}var Ha=/^(none|table(?!-c[ea]).+)/,Ia={position:"absolute",visibility:"hidden",display:"block"},Ja={letterSpacing:"0",fontWeight:"400"},Ka=["Webkit","O","Moz","ms"],La=d.createElement("div").style;function Ma(a){if(a in La)return a;var b=a[0].toUpperCase()+a.slice(1),c=Ka.length;while(c--)if(a=Ka[c]+b,a in La)return a}function Na(a,b,c){var d=T.exec(b);return d?Math.max(0,d[2]-(c||0))+(d[3]||"px"):b}function Oa(a,b,c,d,e){for(var f=c===(d?"border":"content")?4:"width"===b?1:0,g=0;4>f;f+=2)"margin"===c&&(g+=n.css(a,c+U[f],!0,e)),d?("content"===c&&(g-=n.css(a,"padding"+U[f],!0,e)),"margin"!==c&&(g-=n.css(a,"border"+U[f]+"Width",!0,e))):(g+=n.css(a,"padding"+U[f],!0,e),"padding"!==c&&(g+=n.css(a,"border"+U[f]+"Width",!0,e)));return g}function Pa(b,c,e){var f=!0,g="width"===c?b.offsetWidth:b.offsetHeight,h=Ca(b),i="border-box"===n.css(b,"boxSizing",!1,h);if(d.msFullscreenElement&&a.top!==a&&b.getClientRects().length&&(g=Math.round(100*b.getBoundingClientRect()[c])),0>=g||null==g){if(g=Fa(b,c,h),(0>g||null==g)&&(g=b.style[c]),Ba.test(g))return g;f=i&&(l.boxSizingReliable()||g===b.style[c]),g=parseFloat(g)||0}return g+Oa(b,c,e||(i?"border":"content"),f,h)+"px"}function Qa(a,b){for(var c,d,e,f=[],g=0,h=a.length;h>g;g++)d=a[g],d.style&&(f[g]=N.get(d,"olddisplay"),c=d.style.display,b?(f[g]||"none"!==c||(d.style.display=""),""===d.style.display&&V(d)&&(f[g]=N.access(d,"olddisplay",za(d.nodeName)))):(e=V(d),"none"===c&&e||N.set(d,"olddisplay",e?c:n.css(d,"display"))));for(g=0;h>g;g++)d=a[g],d.style&&(b&&"none"!==d.style.display&&""!==d.style.display||(d.style.display=b?f[g]||"":"none"));return a}n.extend({cssHooks:{opacity:{get:function(a,b){if(b){var c=Fa(a,"opacity");return""===c?"1":c}}}},cssNumber:{animationIterationCount:!0,columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{"float":"cssFloat"},style:function(a,b,c,d){if(a&&3!==a.nodeType&&8!==a.nodeType&&a.style){var e,f,g,h=n.camelCase(b),i=a.style;return b=n.cssProps[h]||(n.cssProps[h]=Ma(h)||h),g=n.cssHooks[b]||n.cssHooks[h],void 0===c?g&&"get"in g&&void 0!==(e=g.get(a,!1,d))?e:i[b]:(f=typeof c,"string"===f&&(e=T.exec(c))&&e[1]&&(c=W(a,b,e),f="number"),null!=c&&c===c&&("number"===f&&(c+=e&&e[3]||(n.cssNumber[h]?"":"px")),l.clearCloneStyle||""!==c||0!==b.indexOf("background")||(i[b]="inherit"),g&&"set"in g&&void 0===(c=g.set(a,c,d))||(i[b]=c)),void 0)}},css:function(a,b,c,d){var e,f,g,h=n.camelCase(b);return b=n.cssProps[h]||(n.cssProps[h]=Ma(h)||h),g=n.cssHooks[b]||n.cssHooks[h],g&&"get"in g&&(e=g.get(a,!0,c)),void 0===e&&(e=Fa(a,b,d)),"normal"===e&&b in Ja&&(e=Ja[b]),""===c||c?(f=parseFloat(e),c===!0||isFinite(f)?f||0:e):e}}),n.each(["height","width"],function(a,b){n.cssHooks[b]={get:function(a,c,d){return c?Ha.test(n.css(a,"display"))&&0===a.offsetWidth?Da(a,Ia,function(){return Pa(a,b,d)}):Pa(a,b,d):void 0},set:function(a,c,d){var e,f=d&&Ca(a),g=d&&Oa(a,b,d,"border-box"===n.css(a,"boxSizing",!1,f),f);return g&&(e=T.exec(c))&&"px"!==(e[3]||"px")&&(a.style[b]=c,c=n.css(a,b)),Na(a,c,g)}}}),n.cssHooks.marginLeft=Ga(l.reliableMarginLeft,function(a,b){return b?(parseFloat(Fa(a,"marginLeft"))||a.getBoundingClientRect().left-Da(a,{marginLeft:0},function(){return a.getBoundingClientRect().left}))+"px":void 0}),n.cssHooks.marginRight=Ga(l.reliableMarginRight,function(a,b){return b?Da(a,{display:"inline-block"},Fa,[a,"marginRight"]):void 0}),n.each({margin:"",padding:"",border:"Width"},function(a,b){n.cssHooks[a+b]={expand:function(c){for(var d=0,e={},f="string"==typeof c?c.split(" "):[c];4>d;d++)e[a+U[d]+b]=f[d]||f[d-2]||f[0];return e}},Aa.test(a)||(n.cssHooks[a+b].set=Na)}),n.fn.extend({css:function(a,b){return K(this,function(a,b,c){var d,e,f={},g=0;if(n.isArray(b)){for(d=Ca(a),e=b.length;e>g;g++)f[b[g]]=n.css(a,b[g],!1,d);return f}return void 0!==c?n.style(a,b,c):n.css(a,b)},a,b,arguments.length>1)},show:function(){return Qa(this,!0)},hide:function(){return Qa(this)},toggle:function(a){return"boolean"==typeof a?a?this.show():this.hide():this.each(function(){V(this)?n(this).show():n(this).hide()})}});function Ra(a,b,c,d,e){return new Ra.prototype.init(a,b,c,d,e)}n.Tween=Ra,Ra.prototype={constructor:Ra,init:function(a,b,c,d,e,f){this.elem=a,this.prop=c,this.easing=e||n.easing._default,this.options=b,this.start=this.now=this.cur(),this.end=d,this.unit=f||(n.cssNumber[c]?"":"px")},cur:function(){var a=Ra.propHooks[this.prop];return a&&a.get?a.get(this):Ra.propHooks._default.get(this)},run:function(a){var b,c=Ra.propHooks[this.prop];return this.options.duration?this.pos=b=n.easing[this.easing](a,this.options.duration*a,0,1,this.options.duration):this.pos=b=a,this.now=(this.end-this.start)*b+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),c&&c.set?c.set(this):Ra.propHooks._default.set(this),this}},Ra.prototype.init.prototype=Ra.prototype,Ra.propHooks={_default:{get:function(a){var b;return 1!==a.elem.nodeType||null!=a.elem[a.prop]&&null==a.elem.style[a.prop]?a.elem[a.prop]:(b=n.css(a.elem,a.prop,""),b&&"auto"!==b?b:0)},set:function(a){n.fx.step[a.prop]?n.fx.step[a.prop](a):1!==a.elem.nodeType||null==a.elem.style[n.cssProps[a.prop]]&&!n.cssHooks[a.prop]?a.elem[a.prop]=a.now:n.style(a.elem,a.prop,a.now+a.unit)}}},Ra.propHooks.scrollTop=Ra.propHooks.scrollLeft={set:function(a){a.elem.nodeType&&a.elem.parentNode&&(a.elem[a.prop]=a.now)}},n.easing={linear:function(a){return a},swing:function(a){return.5-Math.cos(a*Math.PI)/2},_default:"swing"},n.fx=Ra.prototype.init,n.fx.step={};var Sa,Ta,Ua=/^(?:toggle|show|hide)$/,Va=/queueHooks$/;function Wa(){return a.setTimeout(function(){Sa=void 0}),Sa=n.now()}function Xa(a,b){var c,d=0,e={height:a};for(b=b?1:0;4>d;d+=2-b)c=U[d],e["margin"+c]=e["padding"+c]=a;return b&&(e.opacity=e.width=a),e}function Ya(a,b,c){for(var d,e=(_a.tweeners[b]||[]).concat(_a.tweeners["*"]),f=0,g=e.length;g>f;f++)if(d=e[f].call(c,b,a))return d}function Za(a,b,c){var d,e,f,g,h,i,j,k,l=this,m={},o=a.style,p=a.nodeType&&V(a),q=N.get(a,"fxshow");c.queue||(h=n._queueHooks(a,"fx"),null==h.unqueued&&(h.unqueued=0,i=h.empty.fire,h.empty.fire=function(){h.unqueued||i()}),h.unqueued++,l.always(function(){l.always(function(){h.unqueued--,n.queue(a,"fx").length||h.empty.fire()})})),1===a.nodeType&&("height"in b||"width"in b)&&(c.overflow=[o.overflow,o.overflowX,o.overflowY],j=n.css(a,"display"),k="none"===j?N.get(a,"olddisplay")||za(a.nodeName):j,"inline"===k&&"none"===n.css(a,"float")&&(o.display="inline-block")),c.overflow&&(o.overflow="hidden",l.always(function(){o.overflow=c.overflow[0],o.overflowX=c.overflow[1],o.overflowY=c.overflow[2]}));for(d in b)if(e=b[d],Ua.exec(e)){if(delete b[d],f=f||"toggle"===e,e===(p?"hide":"show")){if("show"!==e||!q||void 0===q[d])continue;p=!0}m[d]=q&&q[d]||n.style(a,d)}else j=void 0;if(n.isEmptyObject(m))"inline"===("none"===j?za(a.nodeName):j)&&(o.display=j);else{q?"hidden"in q&&(p=q.hidden):q=N.access(a,"fxshow",{}),f&&(q.hidden=!p),p?n(a).show():l.done(function(){n(a).hide()}),l.done(function(){var b;N.remove(a,"fxshow");for(b in m)n.style(a,b,m[b])});for(d in m)g=Ya(p?q[d]:0,d,l),d in q||(q[d]=g.start,p&&(g.end=g.start,g.start="width"===d||"height"===d?1:0))}}function $a(a,b){var c,d,e,f,g;for(c in a)if(d=n.camelCase(c),e=b[d],f=a[c],n.isArray(f)&&(e=f[1],f=a[c]=f[0]),c!==d&&(a[d]=f,delete a[c]),g=n.cssHooks[d],g&&"expand"in g){f=g.expand(f),delete a[d];for(c in f)c in a||(a[c]=f[c],b[c]=e)}else b[d]=e}function _a(a,b,c){var d,e,f=0,g=_a.prefilters.length,h=n.Deferred().always(function(){delete i.elem}),i=function(){if(e)return!1;for(var b=Sa||Wa(),c=Math.max(0,j.startTime+j.duration-b),d=c/j.duration||0,f=1-d,g=0,i=j.tweens.length;i>g;g++)j.tweens[g].run(f);return h.notifyWith(a,[j,f,c]),1>f&&i?c:(h.resolveWith(a,[j]),!1)},j=h.promise({elem:a,props:n.extend({},b),opts:n.extend(!0,{specialEasing:{},easing:n.easing._default},c),originalProperties:b,originalOptions:c,startTime:Sa||Wa(),duration:c.duration,tweens:[],createTween:function(b,c){var d=n.Tween(a,j.opts,b,c,j.opts.specialEasing[b]||j.opts.easing);return j.tweens.push(d),d},stop:function(b){var c=0,d=b?j.tweens.length:0;if(e)return this;for(e=!0;d>c;c++)j.tweens[c].run(1);return b?(h.notifyWith(a,[j,1,0]),h.resolveWith(a,[j,b])):h.rejectWith(a,[j,b]),this}}),k=j.props;for($a(k,j.opts.specialEasing);g>f;f++)if(d=_a.prefilters[f].call(j,a,k,j.opts))return n.isFunction(d.stop)&&(n._queueHooks(j.elem,j.opts.queue).stop=n.proxy(d.stop,d)),d;return n.map(k,Ya,j),n.isFunction(j.opts.start)&&j.opts.start.call(a,j),n.fx.timer(n.extend(i,{elem:a,anim:j,queue:j.opts.queue})),j.progress(j.opts.progress).done(j.opts.done,j.opts.complete).fail(j.opts.fail).always(j.opts.always)}n.Animation=n.extend(_a,{tweeners:{"*":[function(a,b){var c=this.createTween(a,b);return W(c.elem,a,T.exec(b),c),c}]},tweener:function(a,b){n.isFunction(a)?(b=a,a=["*"]):a=a.match(G);for(var c,d=0,e=a.length;e>d;d++)c=a[d],_a.tweeners[c]=_a.tweeners[c]||[],_a.tweeners[c].unshift(b)},prefilters:[Za],prefilter:function(a,b){b?_a.prefilters.unshift(a):_a.prefilters.push(a)}}),n.speed=function(a,b,c){var d=a&&"object"==typeof a?n.extend({},a):{complete:c||!c&&b||n.isFunction(a)&&a,duration:a,easing:c&&b||b&&!n.isFunction(b)&&b};return d.duration=n.fx.off?0:"number"==typeof d.duration?d.duration:d.duration in n.fx.speeds?n.fx.speeds[d.duration]:n.fx.speeds._default,(null==d.queue||d.queue===!0)&&(d.queue="fx"),d.old=d.complete,d.complete=function(){n.isFunction(d.old)&&d.old.call(this),d.queue&&n.dequeue(this,d.queue)},d},n.fn.extend({fadeTo:function(a,b,c,d){return this.filter(V).css("opacity",0).show().end().animate({opacity:b},a,c,d)},animate:function(a,b,c,d){var e=n.isEmptyObject(a),f=n.speed(b,c,d),g=function(){var b=_a(this,n.extend({},a),f);(e||N.get(this,"finish"))&&b.stop(!0)};return g.finish=g,e||f.queue===!1?this.each(g):this.queue(f.queue,g)},stop:function(a,b,c){var d=function(a){var b=a.stop;delete a.stop,b(c)};return"string"!=typeof a&&(c=b,b=a,a=void 0),b&&a!==!1&&this.queue(a||"fx",[]),this.each(function(){var b=!0,e=null!=a&&a+"queueHooks",f=n.timers,g=N.get(this);if(e)g[e]&&g[e].stop&&d(g[e]);else for(e in g)g[e]&&g[e].stop&&Va.test(e)&&d(g[e]);for(e=f.length;e--;)f[e].elem!==this||null!=a&&f[e].queue!==a||(f[e].anim.stop(c),b=!1,f.splice(e,1));(b||!c)&&n.dequeue(this,a)})},finish:function(a){return a!==!1&&(a=a||"fx"),this.each(function(){var b,c=N.get(this),d=c[a+"queue"],e=c[a+"queueHooks"],f=n.timers,g=d?d.length:0;for(c.finish=!0,n.queue(this,a,[]),e&&e.stop&&e.stop.call(this,!0),b=f.length;b--;)f[b].elem===this&&f[b].queue===a&&(f[b].anim.stop(!0),f.splice(b,1));for(b=0;g>b;b++)d[b]&&d[b].finish&&d[b].finish.call(this);delete c.finish})}}),n.each(["toggle","show","hide"],function(a,b){var c=n.fn[b];n.fn[b]=function(a,d,e){return null==a||"boolean"==typeof a?c.apply(this,arguments):this.animate(Xa(b,!0),a,d,e)}}),n.each({slideDown:Xa("show"),slideUp:Xa("hide"),slideToggle:Xa("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},function(a,b){n.fn[a]=function(a,c,d){return this.animate(b,a,c,d)}}),n.timers=[],n.fx.tick=function(){var a,b=0,c=n.timers;for(Sa=n.now();b<c.length;b++)a=c[b],a()||c[b]!==a||c.splice(b--,1);c.length||n.fx.stop(),Sa=void 0},n.fx.timer=function(a){n.timers.push(a),a()?n.fx.start():n.timers.pop()},n.fx.interval=13,n.fx.start=function(){Ta||(Ta=a.setInterval(n.fx.tick,n.fx.interval))},n.fx.stop=function(){a.clearInterval(Ta),Ta=null},n.fx.speeds={slow:600,fast:200,_default:400},n.fn.delay=function(b,c){return b=n.fx?n.fx.speeds[b]||b:b,c=c||"fx",this.queue(c,function(c,d){var e=a.setTimeout(c,b);d.stop=function(){a.clearTimeout(e)}})},function(){var a=d.createElement("input"),b=d.createElement("select"),c=b.appendChild(d.createElement("option"));a.type="checkbox",l.checkOn=""!==a.value,l.optSelected=c.selected,b.disabled=!0,l.optDisabled=!c.disabled,a=d.createElement("input"),a.value="t",a.type="radio",l.radioValue="t"===a.value}();var ab,bb=n.expr.attrHandle;n.fn.extend({attr:function(a,b){return K(this,n.attr,a,b,arguments.length>1)},removeAttr:function(a){return this.each(function(){n.removeAttr(this,a)})}}),n.extend({attr:function(a,b,c){var d,e,f=a.nodeType;if(3!==f&&8!==f&&2!==f)return"undefined"==typeof a.getAttribute?n.prop(a,b,c):(1===f&&n.isXMLDoc(a)||(b=b.toLowerCase(),e=n.attrHooks[b]||(n.expr.match.bool.test(b)?ab:void 0)),void 0!==c?null===c?void n.removeAttr(a,b):e&&"set"in e&&void 0!==(d=e.set(a,c,b))?d:(a.setAttribute(b,c+""),c):e&&"get"in e&&null!==(d=e.get(a,b))?d:(d=n.find.attr(a,b),null==d?void 0:d))},attrHooks:{type:{set:function(a,b){if(!l.radioValue&&"radio"===b&&n.nodeName(a,"input")){var c=a.value;return a.setAttribute("type",b),c&&(a.value=c),b}}}},removeAttr:function(a,b){var c,d,e=0,f=b&&b.match(G);if(f&&1===a.nodeType)while(c=f[e++])d=n.propFix[c]||c,n.expr.match.bool.test(c)&&(a[d]=!1),a.removeAttribute(c)}}),ab={set:function(a,b,c){return b===!1?n.removeAttr(a,c):a.setAttribute(c,c),c}},n.each(n.expr.match.bool.source.match(/\w+/g),function(a,b){var c=bb[b]||n.find.attr;bb[b]=function(a,b,d){var e,f;return d||(f=bb[b],bb[b]=e,e=null!=c(a,b,d)?b.toLowerCase():null,bb[b]=f),e}});var cb=/^(?:input|select|textarea|button)$/i,db=/^(?:a|area)$/i;n.fn.extend({prop:function(a,b){return K(this,n.prop,a,b,arguments.length>1)},removeProp:function(a){return this.each(function(){delete this[n.propFix[a]||a]})}}),n.extend({prop:function(a,b,c){var d,e,f=a.nodeType;if(3!==f&&8!==f&&2!==f)return 1===f&&n.isXMLDoc(a)||(b=n.propFix[b]||b,e=n.propHooks[b]),void 0!==c?e&&"set"in e&&void 0!==(d=e.set(a,c,b))?d:a[b]=c:e&&"get"in e&&null!==(d=e.get(a,b))?d:a[b];
},propHooks:{tabIndex:{get:function(a){var b=n.find.attr(a,"tabindex");return b?parseInt(b,10):cb.test(a.nodeName)||db.test(a.nodeName)&&a.href?0:-1}}},propFix:{"for":"htmlFor","class":"className"}}),l.optSelected||(n.propHooks.selected={get:function(a){var b=a.parentNode;return b&&b.parentNode&&b.parentNode.selectedIndex,null}}),n.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],function(){n.propFix[this.toLowerCase()]=this});var eb=/[\t\r\n\f]/g;function fb(a){return a.getAttribute&&a.getAttribute("class")||""}n.fn.extend({addClass:function(a){var b,c,d,e,f,g,h,i=0;if(n.isFunction(a))return this.each(function(b){n(this).addClass(a.call(this,b,fb(this)))});if("string"==typeof a&&a){b=a.match(G)||[];while(c=this[i++])if(e=fb(c),d=1===c.nodeType&&(" "+e+" ").replace(eb," ")){g=0;while(f=b[g++])d.indexOf(" "+f+" ")<0&&(d+=f+" ");h=n.trim(d),e!==h&&c.setAttribute("class",h)}}return this},removeClass:function(a){var b,c,d,e,f,g,h,i=0;if(n.isFunction(a))return this.each(function(b){n(this).removeClass(a.call(this,b,fb(this)))});if(!arguments.length)return this.attr("class","");if("string"==typeof a&&a){b=a.match(G)||[];while(c=this[i++])if(e=fb(c),d=1===c.nodeType&&(" "+e+" ").replace(eb," ")){g=0;while(f=b[g++])while(d.indexOf(" "+f+" ")>-1)d=d.replace(" "+f+" "," ");h=n.trim(d),e!==h&&c.setAttribute("class",h)}}return this},toggleClass:function(a,b){var c=typeof a;return"boolean"==typeof b&&"string"===c?b?this.addClass(a):this.removeClass(a):n.isFunction(a)?this.each(function(c){n(this).toggleClass(a.call(this,c,fb(this),b),b)}):this.each(function(){var b,d,e,f;if("string"===c){d=0,e=n(this),f=a.match(G)||[];while(b=f[d++])e.hasClass(b)?e.removeClass(b):e.addClass(b)}else(void 0===a||"boolean"===c)&&(b=fb(this),b&&N.set(this,"__className__",b),this.setAttribute&&this.setAttribute("class",b||a===!1?"":N.get(this,"__className__")||""))})},hasClass:function(a){var b,c,d=0;b=" "+a+" ";while(c=this[d++])if(1===c.nodeType&&(" "+fb(c)+" ").replace(eb," ").indexOf(b)>-1)return!0;return!1}});var gb=/\r/g;n.fn.extend({val:function(a){var b,c,d,e=this[0];{if(arguments.length)return d=n.isFunction(a),this.each(function(c){var e;1===this.nodeType&&(e=d?a.call(this,c,n(this).val()):a,null==e?e="":"number"==typeof e?e+="":n.isArray(e)&&(e=n.map(e,function(a){return null==a?"":a+""})),b=n.valHooks[this.type]||n.valHooks[this.nodeName.toLowerCase()],b&&"set"in b&&void 0!==b.set(this,e,"value")||(this.value=e))});if(e)return b=n.valHooks[e.type]||n.valHooks[e.nodeName.toLowerCase()],b&&"get"in b&&void 0!==(c=b.get(e,"value"))?c:(c=e.value,"string"==typeof c?c.replace(gb,""):null==c?"":c)}}}),n.extend({valHooks:{option:{get:function(a){return n.trim(a.value)}},select:{get:function(a){for(var b,c,d=a.options,e=a.selectedIndex,f="select-one"===a.type||0>e,g=f?null:[],h=f?e+1:d.length,i=0>e?h:f?e:0;h>i;i++)if(c=d[i],(c.selected||i===e)&&(l.optDisabled?!c.disabled:null===c.getAttribute("disabled"))&&(!c.parentNode.disabled||!n.nodeName(c.parentNode,"optgroup"))){if(b=n(c).val(),f)return b;g.push(b)}return g},set:function(a,b){var c,d,e=a.options,f=n.makeArray(b),g=e.length;while(g--)d=e[g],(d.selected=n.inArray(n.valHooks.option.get(d),f)>-1)&&(c=!0);return c||(a.selectedIndex=-1),f}}}}),n.each(["radio","checkbox"],function(){n.valHooks[this]={set:function(a,b){return n.isArray(b)?a.checked=n.inArray(n(a).val(),b)>-1:void 0}},l.checkOn||(n.valHooks[this].get=function(a){return null===a.getAttribute("value")?"on":a.value})});var hb=/^(?:focusinfocus|focusoutblur)$/;n.extend(n.event,{trigger:function(b,c,e,f){var g,h,i,j,l,m,o,p=[e||d],q=k.call(b,"type")?b.type:b,r=k.call(b,"namespace")?b.namespace.split("."):[];if(h=i=e=e||d,3!==e.nodeType&&8!==e.nodeType&&!hb.test(q+n.event.triggered)&&(q.indexOf(".")>-1&&(r=q.split("."),q=r.shift(),r.sort()),l=q.indexOf(":")<0&&"on"+q,b=b[n.expando]?b:new n.Event(q,"object"==typeof b&&b),b.isTrigger=f?2:3,b.namespace=r.join("."),b.rnamespace=b.namespace?new RegExp("(^|\\.)"+r.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,b.result=void 0,b.target||(b.target=e),c=null==c?[b]:n.makeArray(c,[b]),o=n.event.special[q]||{},f||!o.trigger||o.trigger.apply(e,c)!==!1)){if(!f&&!o.noBubble&&!n.isWindow(e)){for(j=o.delegateType||q,hb.test(j+q)||(h=h.parentNode);h;h=h.parentNode)p.push(h),i=h;i===(e.ownerDocument||d)&&p.push(i.defaultView||i.parentWindow||a)}g=0;while((h=p[g++])&&!b.isPropagationStopped())b.type=g>1?j:o.bindType||q,m=(N.get(h,"events")||{})[b.type]&&N.get(h,"handle"),m&&m.apply(h,c),m=l&&h[l],m&&m.apply&&L(h)&&(b.result=m.apply(h,c),b.result===!1&&b.preventDefault());return b.type=q,f||b.isDefaultPrevented()||o._default&&o._default.apply(p.pop(),c)!==!1||!L(e)||l&&n.isFunction(e[q])&&!n.isWindow(e)&&(i=e[l],i&&(e[l]=null),n.event.triggered=q,e[q](),n.event.triggered=void 0,i&&(e[l]=i)),b.result}},simulate:function(a,b,c){var d=n.extend(new n.Event,c,{type:a,isSimulated:!0});n.event.trigger(d,null,b),d.isDefaultPrevented()&&c.preventDefault()}}),n.fn.extend({trigger:function(a,b){return this.each(function(){n.event.trigger(a,b,this)})},triggerHandler:function(a,b){var c=this[0];return c?n.event.trigger(a,b,c,!0):void 0}}),n.each("blur focus focusin focusout load resize scroll unload click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup error contextmenu".split(" "),function(a,b){n.fn[b]=function(a,c){return arguments.length>0?this.on(b,null,a,c):this.trigger(b)}}),n.fn.extend({hover:function(a,b){return this.mouseenter(a).mouseleave(b||a)}}),l.focusin="onfocusin"in a,l.focusin||n.each({focus:"focusin",blur:"focusout"},function(a,b){var c=function(a){n.event.simulate(b,a.target,n.event.fix(a))};n.event.special[b]={setup:function(){var d=this.ownerDocument||this,e=N.access(d,b);e||d.addEventListener(a,c,!0),N.access(d,b,(e||0)+1)},teardown:function(){var d=this.ownerDocument||this,e=N.access(d,b)-1;e?N.access(d,b,e):(d.removeEventListener(a,c,!0),N.remove(d,b))}}});var ib=a.location,jb=n.now(),kb=/\?/;n.parseJSON=function(a){return JSON.parse(a+"")},n.parseXML=function(b){var c;if(!b||"string"!=typeof b)return null;try{c=(new a.DOMParser).parseFromString(b,"text/xml")}catch(d){c=void 0}return(!c||c.getElementsByTagName("parsererror").length)&&n.error("Invalid XML: "+b),c};var lb=/#.*$/,mb=/([?&])_=[^&]*/,nb=/^(.*?):[ \t]*([^\r\n]*)$/gm,ob=/^(?:about|app|app-storage|.+-extension|file|res|widget):$/,pb=/^(?:GET|HEAD)$/,qb=/^\/\//,rb={},sb={},tb="*/".concat("*"),ub=d.createElement("a");ub.href=ib.href;function vb(a){return function(b,c){"string"!=typeof b&&(c=b,b="*");var d,e=0,f=b.toLowerCase().match(G)||[];if(n.isFunction(c))while(d=f[e++])"+"===d[0]?(d=d.slice(1)||"*",(a[d]=a[d]||[]).unshift(c)):(a[d]=a[d]||[]).push(c)}}function wb(a,b,c,d){var e={},f=a===sb;function g(h){var i;return e[h]=!0,n.each(a[h]||[],function(a,h){var j=h(b,c,d);return"string"!=typeof j||f||e[j]?f?!(i=j):void 0:(b.dataTypes.unshift(j),g(j),!1)}),i}return g(b.dataTypes[0])||!e["*"]&&g("*")}function xb(a,b){var c,d,e=n.ajaxSettings.flatOptions||{};for(c in b)void 0!==b[c]&&((e[c]?a:d||(d={}))[c]=b[c]);return d&&n.extend(!0,a,d),a}function yb(a,b,c){var d,e,f,g,h=a.contents,i=a.dataTypes;while("*"===i[0])i.shift(),void 0===d&&(d=a.mimeType||b.getResponseHeader("Content-Type"));if(d)for(e in h)if(h[e]&&h[e].test(d)){i.unshift(e);break}if(i[0]in c)f=i[0];else{for(e in c){if(!i[0]||a.converters[e+" "+i[0]]){f=e;break}g||(g=e)}f=f||g}return f?(f!==i[0]&&i.unshift(f),c[f]):void 0}function zb(a,b,c,d){var e,f,g,h,i,j={},k=a.dataTypes.slice();if(k[1])for(g in a.converters)j[g.toLowerCase()]=a.converters[g];f=k.shift();while(f)if(a.responseFields[f]&&(c[a.responseFields[f]]=b),!i&&d&&a.dataFilter&&(b=a.dataFilter(b,a.dataType)),i=f,f=k.shift())if("*"===f)f=i;else if("*"!==i&&i!==f){if(g=j[i+" "+f]||j["* "+f],!g)for(e in j)if(h=e.split(" "),h[1]===f&&(g=j[i+" "+h[0]]||j["* "+h[0]])){g===!0?g=j[e]:j[e]!==!0&&(f=h[0],k.unshift(h[1]));break}if(g!==!0)if(g&&a["throws"])b=g(b);else try{b=g(b)}catch(l){return{state:"parsererror",error:g?l:"No conversion from "+i+" to "+f}}}return{state:"success",data:b}}n.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:ib.href,type:"GET",isLocal:ob.test(ib.protocol),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":tb,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/\bxml\b/,html:/\bhtml/,json:/\bjson\b/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":n.parseJSON,"text xml":n.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(a,b){return b?xb(xb(a,n.ajaxSettings),b):xb(n.ajaxSettings,a)},ajaxPrefilter:vb(rb),ajaxTransport:vb(sb),ajax:function(b,c){"object"==typeof b&&(c=b,b=void 0),c=c||{};var e,f,g,h,i,j,k,l,m=n.ajaxSetup({},c),o=m.context||m,p=m.context&&(o.nodeType||o.jquery)?n(o):n.event,q=n.Deferred(),r=n.Callbacks("once memory"),s=m.statusCode||{},t={},u={},v=0,w="canceled",x={readyState:0,getResponseHeader:function(a){var b;if(2===v){if(!h){h={};while(b=nb.exec(g))h[b[1].toLowerCase()]=b[2]}b=h[a.toLowerCase()]}return null==b?null:b},getAllResponseHeaders:function(){return 2===v?g:null},setRequestHeader:function(a,b){var c=a.toLowerCase();return v||(a=u[c]=u[c]||a,t[a]=b),this},overrideMimeType:function(a){return v||(m.mimeType=a),this},statusCode:function(a){var b;if(a)if(2>v)for(b in a)s[b]=[s[b],a[b]];else x.always(a[x.status]);return this},abort:function(a){var b=a||w;return e&&e.abort(b),z(0,b),this}};if(q.promise(x).complete=r.add,x.success=x.done,x.error=x.fail,m.url=((b||m.url||ib.href)+"").replace(lb,"").replace(qb,ib.protocol+"//"),m.type=c.method||c.type||m.method||m.type,m.dataTypes=n.trim(m.dataType||"*").toLowerCase().match(G)||[""],null==m.crossDomain){j=d.createElement("a");try{j.href=m.url,j.href=j.href,m.crossDomain=ub.protocol+"//"+ub.host!=j.protocol+"//"+j.host}catch(y){m.crossDomain=!0}}if(m.data&&m.processData&&"string"!=typeof m.data&&(m.data=n.param(m.data,m.traditional)),wb(rb,m,c,x),2===v)return x;k=n.event&&m.global,k&&0===n.active++&&n.event.trigger("ajaxStart"),m.type=m.type.toUpperCase(),m.hasContent=!pb.test(m.type),f=m.url,m.hasContent||(m.data&&(f=m.url+=(kb.test(f)?"&":"?")+m.data,delete m.data),m.cache===!1&&(m.url=mb.test(f)?f.replace(mb,"$1_="+jb++):f+(kb.test(f)?"&":"?")+"_="+jb++)),m.ifModified&&(n.lastModified[f]&&x.setRequestHeader("If-Modified-Since",n.lastModified[f]),n.etag[f]&&x.setRequestHeader("If-None-Match",n.etag[f])),(m.data&&m.hasContent&&m.contentType!==!1||c.contentType)&&x.setRequestHeader("Content-Type",m.contentType),x.setRequestHeader("Accept",m.dataTypes[0]&&m.accepts[m.dataTypes[0]]?m.accepts[m.dataTypes[0]]+("*"!==m.dataTypes[0]?", "+tb+"; q=0.01":""):m.accepts["*"]);for(l in m.headers)x.setRequestHeader(l,m.headers[l]);if(m.beforeSend&&(m.beforeSend.call(o,x,m)===!1||2===v))return x.abort();w="abort";for(l in{success:1,error:1,complete:1})x[l](m[l]);if(e=wb(sb,m,c,x)){if(x.readyState=1,k&&p.trigger("ajaxSend",[x,m]),2===v)return x;m.async&&m.timeout>0&&(i=a.setTimeout(function(){x.abort("timeout")},m.timeout));try{v=1,e.send(t,z)}catch(y){if(!(2>v))throw y;z(-1,y)}}else z(-1,"No Transport");function z(b,c,d,h){var j,l,t,u,w,y=c;2!==v&&(v=2,i&&a.clearTimeout(i),e=void 0,g=h||"",x.readyState=b>0?4:0,j=b>=200&&300>b||304===b,d&&(u=yb(m,x,d)),u=zb(m,u,x,j),j?(m.ifModified&&(w=x.getResponseHeader("Last-Modified"),w&&(n.lastModified[f]=w),w=x.getResponseHeader("etag"),w&&(n.etag[f]=w)),204===b||"HEAD"===m.type?y="nocontent":304===b?y="notmodified":(y=u.state,l=u.data,t=u.error,j=!t)):(t=y,(b||!y)&&(y="error",0>b&&(b=0))),x.status=b,x.statusText=(c||y)+"",j?q.resolveWith(o,[l,y,x]):q.rejectWith(o,[x,y,t]),x.statusCode(s),s=void 0,k&&p.trigger(j?"ajaxSuccess":"ajaxError",[x,m,j?l:t]),r.fireWith(o,[x,y]),k&&(p.trigger("ajaxComplete",[x,m]),--n.active||n.event.trigger("ajaxStop")))}return x},getJSON:function(a,b,c){return n.get(a,b,c,"json")},getScript:function(a,b){return n.get(a,void 0,b,"script")}}),n.each(["get","post"],function(a,b){n[b]=function(a,c,d,e){return n.isFunction(c)&&(e=e||d,d=c,c=void 0),n.ajax(n.extend({url:a,type:b,dataType:e,data:c,success:d},n.isPlainObject(a)&&a))}}),n._evalUrl=function(a){return n.ajax({url:a,type:"GET",dataType:"script",async:!1,global:!1,"throws":!0})},n.fn.extend({wrapAll:function(a){var b;return n.isFunction(a)?this.each(function(b){n(this).wrapAll(a.call(this,b))}):(this[0]&&(b=n(a,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&b.insertBefore(this[0]),b.map(function(){var a=this;while(a.firstElementChild)a=a.firstElementChild;return a}).append(this)),this)},wrapInner:function(a){return n.isFunction(a)?this.each(function(b){n(this).wrapInner(a.call(this,b))}):this.each(function(){var b=n(this),c=b.contents();c.length?c.wrapAll(a):b.append(a)})},wrap:function(a){var b=n.isFunction(a);return this.each(function(c){n(this).wrapAll(b?a.call(this,c):a)})},unwrap:function(){return this.parent().each(function(){n.nodeName(this,"body")||n(this).replaceWith(this.childNodes)}).end()}}),n.expr.filters.hidden=function(a){return!n.expr.filters.visible(a)},n.expr.filters.visible=function(a){return a.offsetWidth>0||a.offsetHeight>0||a.getClientRects().length>0};var Ab=/%20/g,Bb=/\[\]$/,Cb=/\r?\n/g,Db=/^(?:submit|button|image|reset|file)$/i,Eb=/^(?:input|select|textarea|keygen)/i;function Fb(a,b,c,d){var e;if(n.isArray(b))n.each(b,function(b,e){c||Bb.test(a)?d(a,e):Fb(a+"["+("object"==typeof e&&null!=e?b:"")+"]",e,c,d)});else if(c||"object"!==n.type(b))d(a,b);else for(e in b)Fb(a+"["+e+"]",b[e],c,d)}n.param=function(a,b){var c,d=[],e=function(a,b){b=n.isFunction(b)?b():null==b?"":b,d[d.length]=encodeURIComponent(a)+"="+encodeURIComponent(b)};if(void 0===b&&(b=n.ajaxSettings&&n.ajaxSettings.traditional),n.isArray(a)||a.jquery&&!n.isPlainObject(a))n.each(a,function(){e(this.name,this.value)});else for(c in a)Fb(c,a[c],b,e);return d.join("&").replace(Ab,"+")},n.fn.extend({serialize:function(){return n.param(this.serializeArray())},serializeArray:function(){return this.map(function(){var a=n.prop(this,"elements");return a?n.makeArray(a):this}).filter(function(){var a=this.type;return this.name&&!n(this).is(":disabled")&&Eb.test(this.nodeName)&&!Db.test(a)&&(this.checked||!X.test(a))}).map(function(a,b){var c=n(this).val();return null==c?null:n.isArray(c)?n.map(c,function(a){return{name:b.name,value:a.replace(Cb,"\r\n")}}):{name:b.name,value:c.replace(Cb,"\r\n")}}).get()}}),n.ajaxSettings.xhr=function(){try{return new a.XMLHttpRequest}catch(b){}};var Gb={0:200,1223:204},Hb=n.ajaxSettings.xhr();l.cors=!!Hb&&"withCredentials"in Hb,l.ajax=Hb=!!Hb,n.ajaxTransport(function(b){var c,d;return l.cors||Hb&&!b.crossDomain?{send:function(e,f){var g,h=b.xhr();if(h.open(b.type,b.url,b.async,b.username,b.password),b.xhrFields)for(g in b.xhrFields)h[g]=b.xhrFields[g];b.mimeType&&h.overrideMimeType&&h.overrideMimeType(b.mimeType),b.crossDomain||e["X-Requested-With"]||(e["X-Requested-With"]="XMLHttpRequest");for(g in e)h.setRequestHeader(g,e[g]);c=function(a){return function(){c&&(c=d=h.onload=h.onerror=h.onabort=h.onreadystatechange=null,"abort"===a?h.abort():"error"===a?"number"!=typeof h.status?f(0,"error"):f(h.status,h.statusText):f(Gb[h.status]||h.status,h.statusText,"text"!==(h.responseType||"text")||"string"!=typeof h.responseText?{binary:h.response}:{text:h.responseText},h.getAllResponseHeaders()))}},h.onload=c(),d=h.onerror=c("error"),void 0!==h.onabort?h.onabort=d:h.onreadystatechange=function(){4===h.readyState&&a.setTimeout(function(){c&&d()})},c=c("abort");try{h.send(b.hasContent&&b.data||null)}catch(i){if(c)throw i}},abort:function(){c&&c()}}:void 0}),n.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/\b(?:java|ecma)script\b/},converters:{"text script":function(a){return n.globalEval(a),a}}}),n.ajaxPrefilter("script",function(a){void 0===a.cache&&(a.cache=!1),a.crossDomain&&(a.type="GET")}),n.ajaxTransport("script",function(a){if(a.crossDomain){var b,c;return{send:function(e,f){b=n("<script>").prop({charset:a.scriptCharset,src:a.url}).on("load error",c=function(a){b.remove(),c=null,a&&f("error"===a.type?404:200,a.type)}),d.head.appendChild(b[0])},abort:function(){c&&c()}}}});var Ib=[],Jb=/(=)\?(?=&|$)|\?\?/;n.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var a=Ib.pop()||n.expando+"_"+jb++;return this[a]=!0,a}}),n.ajaxPrefilter("json jsonp",function(b,c,d){var e,f,g,h=b.jsonp!==!1&&(Jb.test(b.url)?"url":"string"==typeof b.data&&0===(b.contentType||"").indexOf("application/x-www-form-urlencoded")&&Jb.test(b.data)&&"data");return h||"jsonp"===b.dataTypes[0]?(e=b.jsonpCallback=n.isFunction(b.jsonpCallback)?b.jsonpCallback():b.jsonpCallback,h?b[h]=b[h].replace(Jb,"$1"+e):b.jsonp!==!1&&(b.url+=(kb.test(b.url)?"&":"?")+b.jsonp+"="+e),b.converters["script json"]=function(){return g||n.error(e+" was not called"),g[0]},b.dataTypes[0]="json",f=a[e],a[e]=function(){g=arguments},d.always(function(){void 0===f?n(a).removeProp(e):a[e]=f,b[e]&&(b.jsonpCallback=c.jsonpCallback,Ib.push(e)),g&&n.isFunction(f)&&f(g[0]),g=f=void 0}),"script"):void 0}),l.createHTMLDocument=function(){var a=d.implementation.createHTMLDocument("").body;return a.innerHTML="<form></form><form></form>",2===a.childNodes.length}(),n.parseHTML=function(a,b,c){if(!a||"string"!=typeof a)return null;"boolean"==typeof b&&(c=b,b=!1),b=b||(l.createHTMLDocument?d.implementation.createHTMLDocument(""):d);var e=x.exec(a),f=!c&&[];return e?[b.createElement(e[1])]:(e=ca([a],b,f),f&&f.length&&n(f).remove(),n.merge([],e.childNodes))};var Kb=n.fn.load;n.fn.load=function(a,b,c){if("string"!=typeof a&&Kb)return Kb.apply(this,arguments);var d,e,f,g=this,h=a.indexOf(" ");return h>-1&&(d=n.trim(a.slice(h)),a=a.slice(0,h)),n.isFunction(b)?(c=b,b=void 0):b&&"object"==typeof b&&(e="POST"),g.length>0&&n.ajax({url:a,type:e||"GET",dataType:"html",data:b}).done(function(a){f=arguments,g.html(d?n("<div>").append(n.parseHTML(a)).find(d):a)}).always(c&&function(a,b){g.each(function(){c.apply(g,f||[a.responseText,b,a])})}),this},n.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],function(a,b){n.fn[b]=function(a){return this.on(b,a)}}),n.expr.filters.animated=function(a){return n.grep(n.timers,function(b){return a===b.elem}).length};function Lb(a){return n.isWindow(a)?a:9===a.nodeType&&a.defaultView}n.offset={setOffset:function(a,b,c){var d,e,f,g,h,i,j,k=n.css(a,"position"),l=n(a),m={};"static"===k&&(a.style.position="relative"),h=l.offset(),f=n.css(a,"top"),i=n.css(a,"left"),j=("absolute"===k||"fixed"===k)&&(f+i).indexOf("auto")>-1,j?(d=l.position(),g=d.top,e=d.left):(g=parseFloat(f)||0,e=parseFloat(i)||0),n.isFunction(b)&&(b=b.call(a,c,n.extend({},h))),null!=b.top&&(m.top=b.top-h.top+g),null!=b.left&&(m.left=b.left-h.left+e),"using"in b?b.using.call(a,m):l.css(m)}},n.fn.extend({offset:function(a){if(arguments.length)return void 0===a?this:this.each(function(b){n.offset.setOffset(this,a,b)});var b,c,d=this[0],e={top:0,left:0},f=d&&d.ownerDocument;if(f)return b=f.documentElement,n.contains(b,d)?(e=d.getBoundingClientRect(),c=Lb(f),{top:e.top+c.pageYOffset-b.clientTop,left:e.left+c.pageXOffset-b.clientLeft}):e},position:function(){if(this[0]){var a,b,c=this[0],d={top:0,left:0};return"fixed"===n.css(c,"position")?b=c.getBoundingClientRect():(a=this.offsetParent(),b=this.offset(),n.nodeName(a[0],"html")||(d=a.offset()),d.top+=n.css(a[0],"borderTopWidth",!0)-a.scrollTop(),d.left+=n.css(a[0],"borderLeftWidth",!0)-a.scrollLeft()),{top:b.top-d.top-n.css(c,"marginTop",!0),left:b.left-d.left-n.css(c,"marginLeft",!0)}}},offsetParent:function(){return this.map(function(){var a=this.offsetParent;while(a&&"static"===n.css(a,"position"))a=a.offsetParent;return a||Ea})}}),n.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},function(a,b){var c="pageYOffset"===b;n.fn[a]=function(d){return K(this,function(a,d,e){var f=Lb(a);return void 0===e?f?f[b]:a[d]:void(f?f.scrollTo(c?f.pageXOffset:e,c?e:f.pageYOffset):a[d]=e)},a,d,arguments.length)}}),n.each(["top","left"],function(a,b){n.cssHooks[b]=Ga(l.pixelPosition,function(a,c){return c?(c=Fa(a,b),Ba.test(c)?n(a).position()[b]+"px":c):void 0})}),n.each({Height:"height",Width:"width"},function(a,b){n.each({padding:"inner"+a,content:b,"":"outer"+a},function(c,d){n.fn[d]=function(d,e){var f=arguments.length&&(c||"boolean"!=typeof d),g=c||(d===!0||e===!0?"margin":"border");return K(this,function(b,c,d){var e;return n.isWindow(b)?b.document.documentElement["client"+a]:9===b.nodeType?(e=b.documentElement,Math.max(b.body["scroll"+a],e["scroll"+a],b.body["offset"+a],e["offset"+a],e["client"+a])):void 0===d?n.css(b,c,g):n.style(b,c,d,g)},b,f?d:void 0,f,null)}})}),n.fn.extend({bind:function(a,b,c){return this.on(a,null,b,c)},unbind:function(a,b){return this.off(a,null,b)},delegate:function(a,b,c,d){return this.on(b,a,c,d)},undelegate:function(a,b,c){return 1===arguments.length?this.off(a,"**"):this.off(b,a||"**",c)},size:function(){return this.length}}),n.fn.andSelf=n.fn.addBack,"function"==typeof define&&define.amd&&define("jquery",[],function(){return n});var Mb=a.jQuery,Nb=a.$;return n.noConflict=function(b){return a.$===n&&(a.$=Nb),b&&a.jQuery===n&&(a.jQuery=Mb),n},b||(a.jQuery=a.$=n),n});

/*!
 * jQuery UI 1.8.18
 *
 * Copyright 2011, AUTHORS.txt (http://jqueryui.com/about)
 * Dual licensed under the MIT or GPL Version 2 licenses.
 * http://jquery.org/license
 *
 * http://docs.jquery.com/UI
 */
(function (a, b) {
    function d(b) {
        return !a(b).parents().andSelf().filter(function () {
            return a.curCSS(this, "visibility") === "hidden" || a.expr.filters.hidden(this)
        }).length
    }

    function c(b, c) {
        var e = b.nodeName.toLowerCase();
        if ("area" === e) {
            var f = b.parentNode, g = f.name, h;
            if (!b.href || !g || f.nodeName.toLowerCase() !== "map") {
                return !1
            }
            h = a("img[usemap=#" + g + "]")[0];
            return !!h && d(h)
        }
        return (/input|select|textarea|button|object/.test(e) ? !b.disabled : "a" == e ? b.href || c : c) && d(b)
    }

    a.ui = a.ui || {};
    a.ui.version || (a.extend(a.ui, {
        version: "1.8.18",
        keyCode: {
            ALT: 18,
            BACKSPACE: 8,
            CAPS_LOCK: 20,
            COMMA: 188,
            COMMAND: 91,
            COMMAND_LEFT: 91,
            COMMAND_RIGHT: 93,
            CONTROL: 17,
            DELETE: 46,
            DOWN: 40,
            END: 35,
            ENTER: 13,
            ESCAPE: 27,
            HOME: 36,
            INSERT: 45,
            LEFT: 37,
            MENU: 93,
            NUMPAD_ADD: 107,
            NUMPAD_DECIMAL: 110,
            NUMPAD_DIVIDE: 111,
            NUMPAD_ENTER: 108,
            NUMPAD_MULTIPLY: 106,
            NUMPAD_SUBTRACT: 109,
            PAGE_DOWN: 34,
            PAGE_UP: 33,
            PERIOD: 190,
            RIGHT: 39,
            SHIFT: 16,
            SPACE: 32,
            TAB: 9,
            UP: 38,
            WINDOWS: 91
        }
    }), a.fn.extend({
        propAttr: a.fn.prop || a.fn.attr, _focus: a.fn.focus, focus: function (b, c) {
            return typeof b == "number" ? this.each(function () {
                var d = this;
                setTimeout(function () {
                    a(d).focus(), c && c.call(d)
                }, b)
            }) : this._focus.apply(this, arguments)
        }, scrollParent: function () {
            var b;
            /msie/.test(navigator.userAgent.toLowerCase()) && /(static|relative)/.test(this.css("position")) || /absolute/.test(this.css("position")) ? b = this.parents().filter(function () {
                return /(relative|absolute|fixed)/.test(a.curCSS(this, "position", 1)) && /(auto|scroll)/.test(a.curCSS(this, "overflow", 1) + a.curCSS(this, "overflow-y", 1) + a.curCSS(this, "overflow-x", 1))
            }).eq(0) : b = this.parents().filter(function () {
                return /(auto|scroll)/.test(a.curCSS(this, "overflow", 1) + a.curCSS(this, "overflow-y", 1) + a.curCSS(this, "overflow-x", 1))
            }).eq(0);
            return /fixed/.test(this.css("position")) || !b.length ? a(document) : b
        }, zIndex: function (c) {
            if (c !== b) {
                return this.css("zIndex", c)
            }
            if (this.length) {
                var d = a(this[0]), e, f;
                while (d.length && d[0] !== document) {
                    e = d.css("position");
                    if (e === "absolute" || e === "relative" || e === "fixed") {
                        f = parseInt(d.css("zIndex"), 10);
                        if (!isNaN(f) && f !== 0) {
                            return f
                        }
                    }
                    d = d.parent()
                }
            }
            return 0
        }, disableSelection: function () {
            return this.bind((a.support.selectstart ? "selectstart" : "mousedown") + ".ui-disableSelection", function (a) {
                a.preventDefault()
            })
        }, enableSelection: function () {
            return this.unbind(".ui-disableSelection")
        }
    }), a.each(["Width", "Height"], function (c, d) {
        function h(b, c, d, f) {
            a.each(e, function () {
                c -= parseFloat(a.curCSS(b, "padding" + this, !0)) || 0, d && (c -= parseFloat(a.curCSS(b, "border" + this + "Width", !0)) || 0), f && (c -= parseFloat(a.curCSS(b, "margin" + this, !0)) || 0)
            });
            return c
        }

        var e = d === "Width" ? ["Left", "Right"] : ["Top", "Bottom"], f = d.toLowerCase(), g = {
            innerWidth: a.fn.innerWidth,
            innerHeight: a.fn.innerHeight,
            outerWidth: a.fn.outerWidth,
            outerHeight: a.fn.outerHeight
        };
        a.fn["inner" + d] = function (c) {
            if (c === b) {
                return g["inner" + d].call(this)
            }
            return this.each(function () {
                a(this).css(f, h(this, c) + "px")
            })
        }, a.fn["outer" + d] = function (b, c) {
            if (typeof b != "number") {
                return g["outer" + d].call(this, b)
            }
            return this.each(function () {
                a(this).css(f, h(this, b, !0, c) + "px")
            })
        }
    }), a.extend(a.expr[":"], {
        data: function (b, c, d) {
            return !!a.data(b, d[3])
        }, focusable: function (b) {
            return c(b, !isNaN(a.attr(b, "tabindex")))
        }, tabbable: function (b) {
            var d = a.attr(b, "tabindex"), e = isNaN(d);
            return (e || d >= 0) && c(b, !e)
        }
    }), a(function () {
        var b = document.body, c = b.appendChild(c = document.createElement("div"));
        c.offsetHeight, a.extend(c.style, {
            minHeight: "100px",
            height: "auto",
            padding: 0,
            borderWidth: 0
        }), a.support.minHeight = c.offsetHeight === 100, a.support.selectstart = "onselectstart" in c, b.removeChild(c).style.display = "none"
    }), a.extend(a.ui, {
        plugin: {
            add: function (b, c, d) {
                var e = a.ui[b].prototype;
                for (var f in d) {
                    e.plugins[f] = e.plugins[f] || [], e.plugins[f].push([c, d[f]])
                }
            }, call: function (a, b, c) {
                var d = a.plugins[b];
                if (!!d && !!a.element[0].parentNode) {
                    for (var e = 0; e < d.length; e++) {
                        a.options[d[e][0]] && d[e][1].apply(a.element, c)
                    }
                }
            }
        }, contains: function (a, b) {
            return document.compareDocumentPosition ? a.compareDocumentPosition(b) & 16 : a !== b && a.contains(b)
        }, hasScroll: function (b, c) {
            if (a(b).css("overflow") === "hidden") {
                return !1
            }
            var d = c && c === "left" ? "scrollLeft" : "scrollTop", e = !1;
            if (b[d] > 0) {
                return !0
            }
            b[d] = 1, e = b[d] > 0, b[d] = 0;
            return e
        }, isOverAxis: function (a, b, c) {
            return a > b && a < b + c
        }, isOver: function (b, c, d, e, f, g) {
            return a.ui.isOverAxis(b, d, f) && a.ui.isOverAxis(c, e, g)
        }
    }))
})(jQuery);
/*!
 * jQuery UI Widget 1.8.18
 *
 * Copyright 2011, AUTHORS.txt (http://jqueryui.com/about)
 * Dual licensed under the MIT or GPL Version 2 licenses.
 * http://jquery.org/license
 *
 * http://docs.jquery.com/UI/Widget
 */
(function (a, b) {
    if (a.cleanData) {
        var c = a.cleanData;
        a.cleanData = function (b) {
            for (var d = 0, e; (e = b[d]) != null; d++) {
                try {
                    a(e).triggerHandler("remove")
                } catch (f) {
                }
            }
            c(b)
        }
    } else {
        var d = a.fn.remove;
        a.fn.remove = function (b, c) {
            return this.each(function () {
                c || (!b || a.filter(b, [this]).length) && a("*", this).add([this]).each(function () {
                    try {
                        a(this).triggerHandler("remove")
                    } catch (b) {
                    }
                });
                return d.call(a(this), b, c)
            })
        }
    }
    a.widget = function (b, c, d) {
        var e = b.split(".")[0], f;
        b = b.split(".")[1], f = e + "-" + b, d || (d = c, c = a.Widget), a.expr[":"][f] = function (c) {
            return !!a.data(c, b)
        }, a[e] = a[e] || {}, a[e][b] = function (a, b) {
            arguments.length && this._createWidget(a, b)
        };
        var g = new c;
        g.options = a.extend(!0, {}, g.options), a[e][b].prototype = a.extend(!0, g, {
            namespace: e,
            widgetName: b,
            widgetEventPrefix: a[e][b].prototype.widgetEventPrefix || b,
            widgetBaseClass: f
        }, d), a.widget.bridge(b, a[e][b])
    }, a.widget.bridge = function (c, d) {
        a.fn[c] = function (e) {
            var f = typeof e == "string", g = Array.prototype.slice.call(arguments, 1), h = this;
            e = !f && g.length ? a.extend.apply(null, [!0, e].concat(g)) : e;
            if (f && e.charAt(0) === "_") {
                return h
            }
            f ? this.each(function () {
                var d = a.data(this, c), f = d && a.isFunction(d[e]) ? d[e].apply(d, g) : d;
                if (f !== d && f !== b) {
                    h = f;
                    return !1
                }
            }) : this.each(function () {
                var b = a.data(this, c);
                b ? b.option(e || {})._init() : a.data(this, c, new d(e, this))
            });
            return h
        }
    }, a.Widget = function (a, b) {
        arguments.length && this._createWidget(a, b)
    }, a.Widget.prototype = {
        widgetName: "widget",
        widgetEventPrefix: "",
        options: {disabled: !1},
        _createWidget: function (b, c) {
            a.data(c, this.widgetName, this), this.element = a(c), this.options = a.extend(!0, {}, this.options, this._getCreateOptions(), b);
            var d = this;
            this.element.bind("remove." + this.widgetName, function () {
                d.destroy()
            }), this._create(), this._trigger("create"), this._init()
        },
        _getCreateOptions: function () {
            return a.metadata && a.metadata.get(this.element[0])[this.widgetName]
        },
        _create: function () {
        },
        _init: function () {
        },
        destroy: function () {
            this.element.unbind("." + this.widgetName).removeData(this.widgetName), this.widget().unbind("." + this.widgetName).removeAttr("aria-disabled").removeClass(this.widgetBaseClass + "-disabled " + "ui-state-disabled")
        },
        widget: function () {
            return this.element
        },
        option: function (c, d) {
            var e = c;
            if (arguments.length === 0) {
                return a.extend({}, this.options)
            }
            if (typeof c == "string") {
                if (d === b) {
                    return this.options[c]
                }
                e = {}, e[c] = d
            }
            this._setOptions(e);
            return this
        },
        _setOptions: function (b) {
            var c = this;
            a.each(b, function (a, b) {
                c._setOption(a, b)
            });
            return this
        },
        _setOption: function (a, b) {
            this.options[a] = b, a === "disabled" && this.widget()[b ? "addClass" : "removeClass"](this.widgetBaseClass + "-disabled" + " " + "ui-state-disabled").attr("aria-disabled", b);
            return this
        },
        enable: function () {
            return this._setOption("disabled", !1)
        },
        disable: function () {
            return this._setOption("disabled", !0)
        },
        _trigger: function (b, c, d) {
            var e, f, g = this.options[b];
            d = d || {}, c = a.Event(c), c.type = (b === this.widgetEventPrefix ? b : this.widgetEventPrefix + b).toLowerCase(), c.target = this.element[0], f = c.originalEvent;
            if (f) {
                for (e in f) {
                    e in c || (c[e] = f[e])
                }
            }
            this.element.trigger(c, d);
            return !(a.isFunction(g) && g.call(this.element[0], c, d) === !1 || c.isDefaultPrevented())
        }
    }
})(jQuery);
/*!
 * jQuery UI Mouse 1.8.18
 *
 * Copyright 2011, AUTHORS.txt (http://jqueryui.com/about)
 * Dual licensed under the MIT or GPL Version 2 licenses.
 * http://jquery.org/license
 *
 * http://docs.jquery.com/UI/Mouse
 *
 * Depends:
 *	jquery.ui.widget.js
 */
(function (a, b) {
    var c = !1;
    a(document).mouseup(function (a) {
        c = !1
    }), a.widget("ui.mouse", {
        options: {cancel: ":input,option", distance: 1, delay: 0}, _mouseInit: function () {
            var b = this;
            this.element.bind("mousedown." + this.widgetName, function (a) {
                return b._mouseDown(a)
            }).bind("click." + this.widgetName, function (c) {
                if (!0 === a.data(c.target, b.widgetName + ".preventClickEvent")) {
                    a.removeData(c.target, b.widgetName + ".preventClickEvent"), c.stopImmediatePropagation();
                    return !1
                }
            }), this.started = !1
        }, _mouseDestroy: function () {
            this.element.unbind("." + this.widgetName)
        }, _mouseDown: function (b) {
            if (!c) {
                this._mouseStarted && this._mouseUp(b), this._mouseDownEvent = b;
                var d = this, e = b.which == 1, f = typeof this.options.cancel == "string" && b.target.nodeName ? a(b.target).closest(this.options.cancel).length : !1;
                if (!e || f || !this._mouseCapture(b)) {
                    return !0
                }
                this.mouseDelayMet = !this.options.delay, this.mouseDelayMet || (this._mouseDelayTimer = setTimeout(function () {
                    d.mouseDelayMet = !0
                }, this.options.delay));
                if (this._mouseDistanceMet(b) && this._mouseDelayMet(b)) {
                    this._mouseStarted = this._mouseStart(b) !== !1;
                    if (!this._mouseStarted) {
                        b.preventDefault();
                        return !0
                    }
                }
                !0 === a.data(b.target, this.widgetName + ".preventClickEvent") && a.removeData(b.target, this.widgetName + ".preventClickEvent"), this._mouseMoveDelegate = function (a) {
                    return d._mouseMove(a)
                }, this._mouseUpDelegate = function (a) {
                    return d._mouseUp(a)
                }, a(document).bind("mousemove." + this.widgetName, this._mouseMoveDelegate).bind("mouseup." + this.widgetName, this._mouseUpDelegate), b.preventDefault(), c = !0;
                return !0
            }
        }, _mouseMove: function (b) {
            if (/msie/.test(navigator.userAgent.toLowerCase()) && !(document.documentMode >= 9) && !b.button) {
                return this._mouseUp(b)
            }
            if (this._mouseStarted) {
                this._mouseDrag(b);
                return b.preventDefault()
            }
            this._mouseDistanceMet(b) && this._mouseDelayMet(b) && (this._mouseStarted = this._mouseStart(this._mouseDownEvent, b) !== !1, this._mouseStarted ? this._mouseDrag(b) : this._mouseUp(b));
            return !this._mouseStarted
        }, _mouseUp: function (b) {
            a(document).unbind("mousemove." + this.widgetName, this._mouseMoveDelegate).unbind("mouseup." + this.widgetName, this._mouseUpDelegate), this._mouseStarted && (this._mouseStarted = !1, b.target == this._mouseDownEvent.target && a.data(b.target, this.widgetName + ".preventClickEvent", !0), this._mouseStop(b));
            return !1
        }, _mouseDistanceMet: function (a) {
            return Math.max(Math.abs(this._mouseDownEvent.pageX - a.pageX), Math.abs(this._mouseDownEvent.pageY - a.pageY)) >= this.options.distance
        }, _mouseDelayMet: function (a) {
            return this.mouseDelayMet
        }, _mouseStart: function (a) {
        }, _mouseDrag: function (a) {
        }, _mouseStop: function (a) {
        }, _mouseCapture: function (a) {
            return !0
        }
    })
})(jQuery);
(function (a, b) {
    a.ui = a.ui || {};
    var c = /left|center|right/, d = /top|center|bottom/, e = "center", f = {}, g = a.fn.position, h = a.fn.offset;
    a.fn.position = function (b) {
        if (!b || !b.of) {
            return g.apply(this, arguments)
        }
        b = a.extend({}, b);
        var h = a(b.of), i = h[0], j = (b.collision || "flip").split(" "), k = b.offset ? b.offset.split(" ") : [0, 0], l, m, n;
        i.nodeType === 9 ? (l = h.width(), m = h.height(), n = {
            top: 0,
            left: 0
        }) : i.setTimeout ? (l = h.width(), m = h.height(), n = {
            top: h.scrollTop(),
            left: h.scrollLeft()
        }) : i.preventDefault ? (b.at = "left top", l = m = 0, n = {
            top: b.of.pageY,
            left: b.of.pageX
        }) : (l = h.outerWidth(false), m = h.outerHeight(false), n = h.offset()), a.each(["my", "at"], function () {
            var a = (b[this] || "").split(" ");
            a.length === 1 && (a = c.test(a[0]) ? a.concat([e]) : d.test(a[0]) ? [e].concat(a) : [e, e]), a[0] = c.test(a[0]) ? a[0] : e, a[1] = d.test(a[1]) ? a[1] : e, b[this] = a
        }), j.length === 1 && (j[1] = j[0]), k[0] = parseInt(k[0], 10) || 0, k.length === 1 && (k[1] = k[0]), k[1] = parseInt(k[1], 10) || 0, b.at[0] === "right" ? n.left += l : b.at[0] === e && (n.left += l / 2), b.at[1] === "bottom" ? n.top += m : b.at[1] === e && (n.top += m / 2), n.left += k[0], n.top += k[1];
        return this.each(function () {
            var c = a(this), d = c.outerWidth(false), g = c.outerHeight(false), h = parseInt(a.curCSS(this, "marginLeft", !0)) || 0, i = parseInt(a.curCSS(this, "marginTop", !0)) || 0, o = d + h + (parseInt(a.curCSS(this, "marginRight", !0)) || 0), p = g + i + (parseInt(a.curCSS(this, "marginBottom", !0)) || 0), q = a.extend({}, n), r;
            b.my[0] === "right" ? q.left -= d : b.my[0] === e && (q.left -= d / 2), b.my[1] === "bottom" ? q.top -= g : b.my[1] === e && (q.top -= g / 2), f.fractions || (q.left = Math.round(q.left), q.top = Math.round(q.top)), r = {
                left: q.left - h,
                top: q.top - i
            }, a.each(["left", "top"], function (c, e) {
                a.ui.position[j[c]] && a.ui.position[j[c]][e](q, {
                    targetWidth: l,
                    targetHeight: m,
                    elemWidth: d,
                    elemHeight: g,
                    collisionPosition: r,
                    collisionWidth: o,
                    collisionHeight: p,
                    offset: k,
                    my: b.my,
                    at: b.at
                })
            }), a.fn.bgiframe && c.bgiframe(), c.offset(a.extend(q, {using: b.using}))
        })
    }, a.ui.position = {
        fit: {
            left: function (b, c) {
                var d = a(window), e = c.collisionPosition.left + c.collisionWidth - d.width() - d.scrollLeft();
                b.left = e > 0 ? b.left - e : Math.max(b.left - c.collisionPosition.left, b.left)
            }, top: function (b, c) {
                var d = a(window), e = c.collisionPosition.top + c.collisionHeight - d.height() - d.scrollTop();
                b.top = e > 0 ? b.top - e : Math.max(b.top - c.collisionPosition.top, b.top)
            }
        }, flip: {
            left: function (b, c) {
                if (c.at[0] !== e) {
                    var d = a(window), f = c.collisionPosition.left + c.collisionWidth - d.width() - d.scrollLeft(), g = c.my[0] === "left" ? -c.elemWidth : c.my[0] === "right" ? c.elemWidth : 0, h = c.at[0] === "left" ? c.targetWidth : -c.targetWidth, i = -2 * c.offset[0];
                    b.left += c.collisionPosition.left < 0 ? g + h + i : f > 0 ? g + h + i : 0
                }
            }, top: function (b, c) {
                if (c.at[1] !== e) {
                    var d = a(window), f = c.collisionPosition.top + c.collisionHeight - d.height() - d.scrollTop(), g = c.my[1] === "top" ? -c.elemHeight : c.my[1] === "bottom" ? c.elemHeight : 0, h = c.at[1] === "top" ? c.targetHeight : -c.targetHeight, i = -2 * c.offset[1];
                    b.top += c.collisionPosition.top < 0 ? g + h + i : f > 0 ? g + h + i : 0
                }
            }
        }
    }, a.offset.setOffset || (a.offset.setOffset = function (b, c) {
        /static/.test(a.curCSS(b, "position")) && (b.style.position = "relative");
        var d = a(b), e = d.offset(), f = parseInt(a.curCSS(b, "top", !0), 10) || 0, g = parseInt(a.curCSS(b, "left", !0), 10) || 0, h = {
            top: c.top - e.top + f,
            left: c.left - e.left + g
        };
        "using" in c ? c.using.call(b, h) : d.css(h)
    }, a.fn.offset = function (b) {
        var c = this[0];
        if (!c || !c.ownerDocument) {
            return null
        }
        if (b) {
            return this.each(function () {
                a.offset.setOffset(this, b)
            })
        }
        return h.call(this)
    }), function () {
        var b = document.getElementsByTagName("body")[0], c = document.createElement("div"), d, e, g, h, i;
        d = document.createElement(b ? "div" : "body"), g = {
            visibility: "hidden",
            width: 0,
            height: 0,
            border: 0,
            margin: 0,
            background: "none"
        }, b && a.extend(g, {position: "absolute", left: "-1000px", top: "-1000px"});
        for (var j in g) {
            d.style[j] = g[j]
        }
        d.appendChild(c), e = b || document.documentElement, e.insertBefore(d, e.firstChild), c.style.cssText = "position: absolute; left: 10.7432222px; top: 10.432325px; height: 30px; width: 201px;", h = a(c).offset(function (a, b) {
            return b
        }).offset(), d.innerHTML = "", e.removeChild(d), i = h.top + h.left + (b ? 2000 : 0), f.fractions = i > 21 && i < 22
    }()
})(jQuery);
(function ($, undefined) {
    function isArray(a) {
        return a && ($.browser.safari && typeof a == "object" && a.length || a.constructor && a.constructor.toString().match(/\Array\(\)/))
    }

    function extendRemove(a, b) {
        $.extend(a, b);
        for (var c in b) {
            if (b[c] == null || b[c] == undefined) {
                a[c] = b[c]
            }
        }
        return a
    }

    function bindHover(a) {
        var b = "button, .ui-datepicker-prev, .ui-datepicker-next, .ui-datepicker-calendar td a";
        return a.bind("mouseout", function (a) {
            var c = $(a.target).closest(b);
            !c.length || c.removeClass("ui-state-hover ui-datepicker-prev-hover ui-datepicker-next-hover")
        }).bind("mouseover", function (c) {
            var d = $(c.target).closest(b);
            !$.datepicker._isDisabledDatepicker(instActive.inline ? a.parent()[0] : instActive.input[0]) && !!d.length && (d.parents(".ui-datepicker-calendar").find("a").removeClass("ui-state-hover"), d.addClass("ui-state-hover"), d.hasClass("ui-datepicker-prev") && d.addClass("ui-datepicker-prev-hover"), d.hasClass("ui-datepicker-next") && d.addClass("ui-datepicker-next-hover"))
        })
    }

    function Datepicker() {
        this.debug = !1, this._curInst = null, this._keyEvent = !1, this._disabledInputs = [], this._datepickerShowing = !1, this._inDialog = !1, this._mainDivId = "ui-datepicker-div", this._inlineClass = "ui-datepicker-inline", this._appendClass = "ui-datepicker-append", this._triggerClass = "ui-datepicker-trigger", this._dialogClass = "ui-datepicker-dialog", this._disableClass = "ui-datepicker-disabled", this._unselectableClass = "ui-datepicker-unselectable", this._currentClass = "ui-datepicker-current-day", this._dayOverClass = "ui-datepicker-days-cell-over", this.regional = [], this.regional[""] = {
            closeText: "Done",
            prevText: "Prev",
            nextText: "Next",
            currentText: "Today",
            monthNames: ["1月", "2月", "3月", "4月", "5月", "6月", "7月", "8月", "9月", "10月", "11月", "12月"],
            monthNamesShort: ["1月", "2月", "3月", "4月", "5月", "6月", "7月", "8月", "9月", "10月", "11月", "12月"],
            dayNames: ["星期日", "星期一", "星期二", "星期三", "星期四", "星期五", "星期六"],
            dayNamesShort: ["日", "一", "二", "三", "四", "五", "六"],
            dayNamesMin: ["日", "一", "二", "三", "四", "五", "六"],
            weekHeader: "周",
            dateFormat: "yy-mm-dd",
            firstDay: 1,
            isRTL: !1,
            showMonthAfterYear: !1,
            yearSuffix: ""
        }, this._defaults = {
            showOn: "focus",
            showAnim: "fadeIn",
            showOptions: {},
            defaultDate: null,
            appendText: "",
            buttonText: "...",
            buttonImage: "",
            buttonImageOnly: !1,
            hideIfNoPrevNext: !1,
            navigationAsDateFormat: !1,
            gotoCurrent: !1,
            changeMonth: 1,
            changeYear: 1,
            yearRange: "c-10:c+10",
            showOtherMonths: !1,
            selectOtherMonths: !1,
            showWeek: !1,
            calculateWeek: this.iso8601Week,
            shortYearCutoff: "+10",
            minDate: null,
            maxDate: null,
            duration: "fast",
            beforeShowDay: null,
            beforeShow: null,
            onSelect: null,
            onChangeMonthYear: null,
            onClose: null,
            numberOfMonths: 1,
            showCurrentAtPos: 0,
            stepMonths: 1,
            stepBigMonths: 12,
            altField: "",
            altFormat: "",
            constrainInput: !0,
            showButtonPanel: !1,
            autoSize: !1,
            disabled: !1
        }, $.extend(this._defaults, this.regional[""]), this.dpDiv = bindHover($('<div id="' + this._mainDivId + '" class="ui-datepicker ui-widget ui-widget-content ui-helper-clearfix ui-corner-all"></div>'))
    }

    $.extend($.ui, {datepicker: {version: "1.8.18"}});
    var PROP_NAME = "datepicker", dpuuid = (new Date).getTime(), instActive;
    $.extend(Datepicker.prototype, {
        markerClassName: "hasDatepicker",
        maxRows: 4,
        log: function () {
            this.debug && console.log.apply("", arguments)
        },
        _widgetDatepicker: function () {
            return this.dpDiv
        },
        setDefaults: function (a) {
            extendRemove(this._defaults, a || {});
            return this
        },
        _attachDatepicker: function (target, settings) {
            var inlineSettings = null;
            for (var attrName in this._defaults) {
                var attrValue = target.getAttribute("date:" + attrName);
                if (attrValue) {
                    inlineSettings = inlineSettings || {};
                    try {
                        inlineSettings[attrName] = eval(attrValue)
                    } catch (err) {
                        inlineSettings[attrName] = attrValue
                    }
                }
            }
            var nodeName = target.nodeName.toLowerCase(), inline = nodeName == "div" || nodeName == "span";
            target.id || (this.uuid += 1, target.id = "dp" + this.uuid);
            var inst = this._newInst($(target), inline);
            inst.settings = $.extend({}, settings || {}, inlineSettings || {}), nodeName == "input" ? this._connectDatepicker(target, inst) : inline && this._inlineDatepicker(target, inst)
        },
        _newInst: function (a, b) {
            var c = a[0].id.replace(/([^A-Za-z0-9_-])/g, "\\\\$1");
            return {
                id: c,
                input: a,
                selectedDay: 0,
                selectedMonth: 0,
                selectedYear: 0,
                drawMonth: 0,
                drawYear: 0,
                inline: b,
                dpDiv: b ? bindHover($('<div class="' + this._inlineClass + ' ui-datepicker ui-widget ui-widget-content ui-helper-clearfix ui-corner-all"></div>')) : this.dpDiv
            }
        },
        _connectDatepicker: function (a, b) {
            var c = $(a);
            b.append = $([]), b.trigger = $([]);
            c.hasClass(this.markerClassName) || (this._attachments(c, b), c.addClass(this.markerClassName).keydown(this._doKeyDown).keypress(this._doKeyPress).keyup(this._doKeyUp).bind("setData.datepicker", function (a, c, d) {
                b.settings[c] = d
            }).bind("getData.datepicker", function (a, c) {
                return this._get(b, c)
            }), this._autoSize(b), $.data(a, PROP_NAME, b), b.settings.disabled && this._disableDatepicker(a))
        },
        _attachments: function (a, b) {
            var c = this._get(b, "appendText"), d = this._get(b, "isRTL");
            b.append && b.append.remove(), c && (b.append = $('<span class="' + this._appendClass + '">' + c + "</span>"), a[d ? "before" : "after"](b.append)), a.unbind("focus", this._showDatepicker), b.trigger && b.trigger.remove();
            var e = this._get(b, "showOn");
            (e == "focus" || e == "both") && a.focus(this._showDatepicker);
            if (e == "button" || e == "both") {
                var f = this._get(b, "buttonText"), g = this._get(b, "buttonImage");
                b.trigger = $(this._get(b, "buttonImageOnly") ? $("<img/>").addClass(this._triggerClass).attr({
                    src: g,
                    alt: f,
                    title: f
                }) : $('<button type="button"></button>').addClass(this._triggerClass).html(g == "" ? f : $("<img/>").attr({
                    src: g,
                    alt: f,
                    title: f
                }))), a[d ? "before" : "after"](b.trigger), b.trigger.click(function () {
                    $.datepicker._datepickerShowing && $.datepicker._lastInput == a[0] ? $.datepicker._hideDatepicker() : $.datepicker._datepickerShowing && $.datepicker._lastInput != a[0] ? ($.datepicker._hideDatepicker(), $.datepicker._showDatepicker(a[0])) : $.datepicker._showDatepicker(a[0]);
                    return !1
                })
            }
        },
        _autoSize: function (a) {
            if (this._get(a, "autoSize") && !a.inline) {
                var b = new Date(2009, 11, 20), c = this._get(a, "dateFormat");
                if (c.match(/[DM]/)) {
                    var d = function (a) {
                        var b = 0, c = 0;
                        for (var d = 0; d < a.length; d++) {
                            a[d].length > b && (b = a[d].length, c = d)
                        }
                        return c
                    };
                    b.setMonth(d(this._get(a, c.match(/MM/) ? "monthNames" : "monthNamesShort"))), b.setDate(d(this._get(a, c.match(/DD/) ? "dayNames" : "dayNamesShort")) + 20 - b.getDay())
                }
                a.input.attr("size", this._formatDate(a, b).length)
            }
        },
        _inlineDatepicker: function (a, b) {
            var c = $(a);
            c.hasClass(this.markerClassName) || (c.addClass(this.markerClassName).append(b.dpDiv).bind("setData.datepicker", function (a, c, d) {
                b.settings[c] = d
            }).bind("getData.datepicker", function (a, c) {
                return this._get(b, c)
            }), $.data(a, PROP_NAME, b), this._setDate(b, this._getDefaultDate(b), !0), this._updateDatepicker(b), this._updateAlternate(b), b.settings.disabled && this._disableDatepicker(a), b.dpDiv.css("display", "block"))
        },
        _dialogDatepicker: function (a, b, c, d, e) {
            var f = this._dialogInst;
            if (!f) {
                this.uuid += 1;
                var g = "dp" + this.uuid;
                this._dialogInput = $('<input type="text" id="' + g + '" style="position: absolute; top: -100px; width: 0px; z-index: -10;"/>'), this._dialogInput.keydown(this._doKeyDown), $("body").append(this._dialogInput), f = this._dialogInst = this._newInst(this._dialogInput, !1), f.settings = {}, $.data(this._dialogInput[0], PROP_NAME, f)
            }
            extendRemove(f.settings, d || {}), b = b && b.constructor == Date ? this._formatDate(f, b) : b, this._dialogInput.val(b), this._pos = e ? e.length ? e : [e.pageX, e.pageY] : null;
            if (!this._pos) {
                var h = document.documentElement.clientWidth, i = document.documentElement.clientHeight, j = document.documentElement.scrollLeft || document.body.scrollLeft, k = document.documentElement.scrollTop || document.body.scrollTop;
                this._pos = [h / 2 - 100 + j, i / 2 - 150 + k]
            }
            this._dialogInput.css("left", this._pos[0] + 20 + "px").css("top", this._pos[1] + "px"), f.settings.onSelect = c, this._inDialog = !0, this.dpDiv.addClass(this._dialogClass), this._showDatepicker(this._dialogInput[0]), $.blockUI && $.blockUI(this.dpDiv), $.data(this._dialogInput[0], PROP_NAME, f);
            return this
        },
        _destroyDatepicker: function (a) {
            var b = $(a), c = $.data(a, PROP_NAME);
            if (!!b.hasClass(this.markerClassName)) {
                var d = a.nodeName.toLowerCase();
                $.removeData(a, PROP_NAME), d == "input" ? (c.append.remove(), c.trigger.remove(), b.removeClass(this.markerClassName).unbind("focus", this._showDatepicker).unbind("keydown", this._doKeyDown).unbind("keypress", this._doKeyPress).unbind("keyup", this._doKeyUp)) : (d == "div" || d == "span") && b.removeClass(this.markerClassName).empty()
            }
        },
        _enableDatepicker: function (a) {
            var b = $(a), c = $.data(a, PROP_NAME);
            if (!!b.hasClass(this.markerClassName)) {
                var d = a.nodeName.toLowerCase();
                if (d == "input") {
                    a.disabled = !1, c.trigger.filter("button").each(function () {
                        this.disabled = !1
                    }).end().filter("img").css({opacity: "1.0", cursor: ""})
                } else {
                    if (d == "div" || d == "span") {
                        var e = b.children("." + this._inlineClass);
                        e.children().removeClass("ui-state-disabled"), e.find("select.ui-datepicker-month, select.ui-datepicker-year").removeAttr("disabled")
                    }
                }
                this._disabledInputs = $.map(this._disabledInputs, function (b) {
                    return b == a ? null : b
                })
            }
        },
        _disableDatepicker: function (a) {
            var b = $(a), c = $.data(a, PROP_NAME);
            if (!!b.hasClass(this.markerClassName)) {
                var d = a.nodeName.toLowerCase();
                if (d == "input") {
                    a.disabled = !0, c.trigger.filter("button").each(function () {
                        this.disabled = !0
                    }).end().filter("img").css({opacity: "0.5", cursor: "default"})
                } else {
                    if (d == "div" || d == "span") {
                        var e = b.children("." + this._inlineClass);
                        e.children().addClass("ui-state-disabled"), e.find("select.ui-datepicker-month, select.ui-datepicker-year").attr("disabled", "disabled")
                    }
                }
                this._disabledInputs = $.map(this._disabledInputs, function (b) {
                    return b == a ? null : b
                }), this._disabledInputs[this._disabledInputs.length] = a
            }
        },
        _isDisabledDatepicker: function (a) {
            if (!a) {
                return !1
            }
            for (var b = 0; b < this._disabledInputs.length; b++) {
                if (this._disabledInputs[b] == a) {
                    return !0
                }
            }
            return !1
        },
        _getInst: function (a) {
            try {
                return $.data(a, PROP_NAME)
            } catch (b) {
                throw"Missing instance data for this datepicker"
            }
        },
        _optionDatepicker: function (a, b, c) {
            var d = this._getInst(a);
            if (arguments.length == 2 && typeof b == "string") {
                return b == "defaults" ? $.extend({}, $.datepicker._defaults) : d ? b == "all" ? $.extend({}, d.settings) : this._get(d, b) : null
            }
            var e = b || {};
            typeof b == "string" && (e = {}, e[b] = c);
            if (d) {
                this._curInst == d && this._hideDatepicker();
                var f = this._getDateDatepicker(a, !0), g = this._getMinMaxDate(d, "min"), h = this._getMinMaxDate(d, "max");
                extendRemove(d.settings, e), g !== null && e.dateFormat !== undefined && e.minDate === undefined && (d.settings.minDate = this._formatDate(d, g)), h !== null && e.dateFormat !== undefined && e.maxDate === undefined && (d.settings.maxDate = this._formatDate(d, h)), this._attachments($(a), d), this._autoSize(d), this._setDate(d, f), this._updateAlternate(d), this._updateDatepicker(d)
            }
        },
        _changeDatepicker: function (a, b, c) {
            this._optionDatepicker(a, b, c)
        },
        _refreshDatepicker: function (a) {
            var b = this._getInst(a);
            b && this._updateDatepicker(b)
        },
        _setDateDatepicker: function (a, b) {
            var c = this._getInst(a);
            c && (this._setDate(c, b), this._updateDatepicker(c), this._updateAlternate(c))
        },
        _getDateDatepicker: function (a, b) {
            var c = this._getInst(a);
            c && !c.inline && this._setDateFromField(c, b);
            return c ? this._getDate(c) : null
        },
        _doKeyDown: function (a) {
            var b = $.datepicker._getInst(a.target), c = !0, d = b.dpDiv.is(".ui-datepicker-rtl");
            b._keyEvent = !0;
            if ($.datepicker._datepickerShowing) {
                switch (a.keyCode) {
                    case 9:
                        $.datepicker._hideDatepicker(), c = !1;
                        break;
                    case 13:
                        var e = $("td." + $.datepicker._dayOverClass + ":not(." + $.datepicker._currentClass + ")", b.dpDiv);
                        e[0] && $.datepicker._selectDay(a.target, b.selectedMonth, b.selectedYear, e[0]);
                        var f = $.datepicker._get(b, "onSelect");
                        if (f) {
                            var g = $.datepicker._formatDate(b);
                            f.apply(b.input ? b.input[0] : null, [g, b])
                        } else {
                            $.datepicker._hideDatepicker()
                        }
                        return !1;
                    case 27:
                        $.datepicker._hideDatepicker();
                        break;
                    case 33:
                        $.datepicker._adjustDate(a.target, a.ctrlKey ? -$.datepicker._get(b, "stepBigMonths") : -$.datepicker._get(b, "stepMonths"), "M");
                        break;
                    case 34:
                        $.datepicker._adjustDate(a.target, a.ctrlKey ? +$.datepicker._get(b, "stepBigMonths") : +$.datepicker._get(b, "stepMonths"), "M");
                        break;
                    case 35:
                        (a.ctrlKey || a.metaKey) && $.datepicker._clearDate(a.target), c = a.ctrlKey || a.metaKey;
                        break;
                    case 36:
                        (a.ctrlKey || a.metaKey) && $.datepicker._gotoToday(a.target), c = a.ctrlKey || a.metaKey;
                        break;
                    case 37:
                        (a.ctrlKey || a.metaKey) && $.datepicker._adjustDate(a.target, d ? 1 : -1, "D"), c = a.ctrlKey || a.metaKey, a.originalEvent.altKey && $.datepicker._adjustDate(a.target, a.ctrlKey ? -$.datepicker._get(b, "stepBigMonths") : -$.datepicker._get(b, "stepMonths"), "M");
                        break;
                    case 38:
                        (a.ctrlKey || a.metaKey) && $.datepicker._adjustDate(a.target, -7, "D"), c = a.ctrlKey || a.metaKey;
                        break;
                    case 39:
                        (a.ctrlKey || a.metaKey) && $.datepicker._adjustDate(a.target, d ? -1 : 1, "D"), c = a.ctrlKey || a.metaKey, a.originalEvent.altKey && $.datepicker._adjustDate(a.target, a.ctrlKey ? +$.datepicker._get(b, "stepBigMonths") : +$.datepicker._get(b, "stepMonths"), "M");
                        break;
                    case 40:
                        (a.ctrlKey || a.metaKey) && $.datepicker._adjustDate(a.target, 7, "D"), c = a.ctrlKey || a.metaKey;
                        break;
                    default:
                        c = !1
                }
            } else {
                a.keyCode == 36 && a.ctrlKey ? $.datepicker._showDatepicker(this) : c = !1
            }
            c && (a.preventDefault(), a.stopPropagation())
        },
        _doKeyPress: function (a) {
            var b = $.datepicker._getInst(a.target);
            if ($.datepicker._get(b, "constrainInput")) {
                var c = $.datepicker._possibleChars($.datepicker._get(b, "dateFormat")), d = String.fromCharCode(a.charCode == undefined ? a.keyCode : a.charCode);
                return a.ctrlKey || a.metaKey || d < " " || !c || c.indexOf(d) > -1
            }
        },
        _doKeyUp: function (a) {
            var b = $.datepicker._getInst(a.target);
            if (b.input.val() != b.lastVal) {
                try {
                    var c = $.datepicker.parseDate($.datepicker._get(b, "dateFormat"), b.input ? b.input.val() : null, $.datepicker._getFormatConfig(b));
                    c && ($.datepicker._setDateFromField(b), $.datepicker._updateAlternate(b), $.datepicker._updateDatepicker(b))
                } catch (a) {
                    $.datepicker.log(a)
                }
            }
            return !0
        },
        _showDatepicker: function (a) {
            a = a.target || a, a.nodeName.toLowerCase() != "input" && (a = $("input", a.parentNode)[0]);
            if (!$.datepicker._isDisabledDatepicker(a) && $.datepicker._lastInput != a) {
                var b = $.datepicker._getInst(a);
                $.datepicker._curInst && $.datepicker._curInst != b && ($.datepicker._curInst.dpDiv.stop(!0, !0), b && $.datepicker._datepickerShowing && $.datepicker._hideDatepicker($.datepicker._curInst.input[0]));
                var c = $.datepicker._get(b, "beforeShow"), d = c ? c.apply(a, [a, b]) : {};
                if (d === !1) {
                    return
                }
                extendRemove(b.settings, d), b.lastVal = null, $.datepicker._lastInput = a, $.datepicker._setDateFromField(b), $.datepicker._inDialog && (a.value = ""), $.datepicker._pos || ($.datepicker._pos = $.datepicker._findPos(a), $.datepicker._pos[1] += a.offsetHeight);
                var e = !1;
                $(a).parents().each(function () {
                    e |= $(this).css("position") == "fixed";
                    return !e
                }), e && /opera/.test(navigator.userAgent.toLowerCase()) && ($.datepicker._pos[0] -= document.documentElement.scrollLeft, $.datepicker._pos[1] -= document.documentElement.scrollTop);
                var f = {left: $.datepicker._pos[0], top: $.datepicker._pos[1]};
                $.datepicker._pos = null, b.dpDiv.empty(), b.dpDiv.css({
                    position: "absolute",
                    display: "block",
                    top: "-1000px"
                }), $.datepicker._updateDatepicker(b), f = $.datepicker._checkOffset(b, f, e), b.dpDiv.css({
                    position: $.datepicker._inDialog && $.blockUI ? "static" : e ? "fixed" : "absolute",
                    display: "none",
                    left: f.left + "px",
                    top: f.top + "px"
                });
                if (!b.inline) {
                    var g = $.datepicker._get(b, "showAnim"), h = $.datepicker._get(b, "duration"), i = function () {
                        var a = b.dpDiv.find("iframe.ui-datepicker-cover");
                        if (!!a.length) {
                            var c = $.datepicker._getBorders(b.dpDiv);
                            a.css({
                                left: -c[0],
                                top: -c[1],
                                width: b.dpDiv.outerWidth(false),
                                height: b.dpDiv.outerHeight(false)
                            })
                        }
                    };
                    b.dpDiv.zIndex($(a).zIndex() + 1), $.datepicker._datepickerShowing = !0, $.effects && $.effects[g] ? b.dpDiv.show(g, $.datepicker._get(b, "showOptions"), h, i) : b.dpDiv[g || "show"](g ? h : null, i), (!g || !h) && i(), b.input.is(":visible") && !b.input.is(":disabled") && b.input.focus(), $.datepicker._curInst = b
                }
            }
        },
        _updateDatepicker: function (a) {
            var b = this;
            b.maxRows = 4;
            var c = $.datepicker._getBorders(a.dpDiv);
            instActive = a, a.dpDiv.empty().append(this._generateHTML(a));
            var d = a.dpDiv.find("iframe.ui-datepicker-cover");
            !d.length || d.css({
                left: -c[0],
                top: -c[1],
                width: a.dpDiv.outerWidth(false),
                height: a.dpDiv.outerHeight(false)
            }), a.dpDiv.find("." + this._dayOverClass + " a").mouseover();
            var e = this._getNumberOfMonths(a), f = e[1], g = 17;
            a.dpDiv.removeClass("ui-datepicker-multi-2 ui-datepicker-multi-3 ui-datepicker-multi-4").width(""), f > 1 && a.dpDiv.addClass("ui-datepicker-multi-" + f).css("width", g * f + "em"), a.dpDiv[(e[0] != 1 || e[1] != 1 ? "add" : "remove") + "Class"]("ui-datepicker-multi"), a.dpDiv[(this._get(a, "isRTL") ? "add" : "remove") + "Class"]("ui-datepicker-rtl"), a == $.datepicker._curInst && $.datepicker._datepickerShowing && a.input && a.input.is(":visible") && !a.input.is(":disabled") && a.input[0] != document.activeElement && a.input.focus();
            if (a.yearshtml) {
                var h = a.yearshtml;
                setTimeout(function () {
                    h === a.yearshtml && a.yearshtml && a.dpDiv.find("select.ui-datepicker-year:first").replaceWith(a.yearshtml), h = a.yearshtml = null
                }, 0)
            }
        },
        _getBorders: function (a) {
            var b = function (a) {
                return {thin: 1, medium: 2, thick: 3}[a] || a
            };
            return [parseFloat(b(a.css("border-left-width"))), parseFloat(b(a.css("border-top-width")))]
        },
        _checkOffset: function (a, b, c) {
            var d = a.dpDiv.outerWidth(false), e = a.dpDiv.outerHeight(false), f = a.input ? a.input.outerWidth(false) : 0, g = a.input ? a.input.outerHeight(false) : 0, h = document.documentElement.clientWidth + $(document).scrollLeft(), i = document.documentElement.clientHeight + $(document).scrollTop();
            b.left -= this._get(a, "isRTL") ? d - f : 0, b.left -= c && b.left == a.input.offset().left ? $(document).scrollLeft() : 0, b.top -= c && b.top == a.input.offset().top + g ? $(document).scrollTop() : 0, b.left -= Math.min(b.left, b.left + d > h && h > d ? Math.abs(b.left + d - h) : 0), b.top -= Math.min(b.top, b.top + e > i && i > e ? Math.abs(e + g) : 0);
            return b
        },
        _findPos: function (a) {
            var b = this._getInst(a), c = this._get(b, "isRTL");
            while (a && (a.type == "hidden" || a.nodeType != 1 || $.expr.filters.hidden(a))) {
                a = a[c ? "previousSibling" : "nextSibling"]
            }
            var d = $(a).offset();
            return [d.left, d.top]
        },
        _hideDatepicker: function (a) {
            var b = this._curInst;
            if (!(!b || a && b != $.data(a, PROP_NAME)) && this._datepickerShowing) {
                var c = this._get(b, "showAnim"), d = this._get(b, "duration"), e = this, f = function () {
                    $.datepicker._tidyDialog(b), e._curInst = null
                };
                $.effects && $.effects[c] ? b.dpDiv.hide(c, $.datepicker._get(b, "showOptions"), d, f) : b.dpDiv[c == "slideDown" ? "slideUp" : c == "fadeIn" ? "fadeOut" : "hide"](c ? d : null, f), c || f(), this._datepickerShowing = !1;
                var g = this._get(b, "onClose");
                g && g.apply(b.input ? b.input[0] : null, [b.input ? b.input.val() : "", b]), this._lastInput = null, this._inDialog && (this._dialogInput.css({
                    position: "absolute",
                    left: "0",
                    top: "-100px"
                }), $.blockUI && ($.unblockUI(), $("body").append(this.dpDiv))), this._inDialog = !1
            }
        },
        _tidyDialog: function (a) {
            a.dpDiv.removeClass(this._dialogClass).unbind(".ui-datepicker-calendar")
        },
        _checkExternalClick: function (a) {
            if (!!$.datepicker._curInst) {
                var b = $(a.target), c = $.datepicker._getInst(b[0]);
                (b[0].id != $.datepicker._mainDivId && b.parents("#" + $.datepicker._mainDivId).length == 0 && !b.hasClass($.datepicker.markerClassName) && !b.closest("." + $.datepicker._triggerClass).length && $.datepicker._datepickerShowing && (!$.datepicker._inDialog || !$.blockUI) || b.hasClass($.datepicker.markerClassName) && $.datepicker._curInst != c) && $.datepicker._hideDatepicker()
            }
        },
        _adjustDate: function (a, b, c) {
            var d = $(a), e = this._getInst(d[0]);
            this._isDisabledDatepicker(d[0]) || (this._adjustInstDate(e, b + (c == "M" ? this._get(e, "showCurrentAtPos") : 0), c), this._updateDatepicker(e))
        },
        _gotoToday: function (a) {
            var b = $(a), c = this._getInst(b[0]);
            if (this._get(c, "gotoCurrent") && c.currentDay) {
                c.selectedDay = c.currentDay, c.drawMonth = c.selectedMonth = c.currentMonth, c.drawYear = c.selectedYear = c.currentYear
            } else {
                var d = new Date;
                c.selectedDay = d.getDate(), c.drawMonth = c.selectedMonth = d.getMonth(), c.drawYear = c.selectedYear = d.getFullYear()
            }
            this._notifyChange(c), this._adjustDate(b)
        },
        _selectMonthYear: function (a, b, c) {
            var d = $(a), e = this._getInst(d[0]);
            e["selected" + (c == "M" ? "Month" : "Year")] = e["draw" + (c == "M" ? "Month" : "Year")] = parseInt(b.options[b.selectedIndex].value, 10), this._notifyChange(e), this._adjustDate(d)
        },
        _selectDay: function (a, b, c, d) {
            var e = $(a);
            if (!$(d).hasClass(this._unselectableClass) && !this._isDisabledDatepicker(e[0])) {
                var f = this._getInst(e[0]);
                f.selectedDay = f.currentDay = $("a", d).html(), f.selectedMonth = f.currentMonth = b, f.selectedYear = f.currentYear = c, this._selectDate(a, this._formatDate(f, f.currentDay, f.currentMonth, f.currentYear))
            }
        },
        _clearDate: function (a) {
            var b = $(a), c = this._getInst(b[0]);
            this._selectDate(b, "")
        },
        _selectDate: function (a, b) {
            var c = $(a), d = this._getInst(c[0]);
            b = b != null ? b : this._formatDate(d), d.input && d.input.val(b), this._updateAlternate(d);
            var e = this._get(d, "onSelect");
            e ? e.apply(d.input ? d.input[0] : null, [b, d]) : d.input && d.input.trigger("change"), d.inline ? this._updateDatepicker(d) : (this._hideDatepicker(), this._lastInput = d.input[0], typeof d.input[0] != "object" && d.input.focus(), this._lastInput = null)
        },
        _updateAlternate: function (a) {
            var b = this._get(a, "altField");
            if (b) {
                var c = this._get(a, "altFormat") || this._get(a, "dateFormat"), d = this._getDate(a), e = this.formatDate(c, d, this._getFormatConfig(a));
                $(b).each(function () {
                    $(this).val(e)
                })
            }
        },
        noWeekends: function (a) {
            var b = a.getDay();
            return [b > 0 && b < 6, ""]
        },
        iso8601Week: function (a) {
            var b = new Date(a.getTime());
            b.setDate(b.getDate() + 4 - (b.getDay() || 7));
            var c = b.getTime();
            b.setMonth(0), b.setDate(1);
            return Math.floor(Math.round((c - b) / 86400000) / 7) + 1
        },
        parseDate: function (a, b, c) {
            if (a == null || b == null) {
                throw"Invalid arguments"
            }
            b = typeof b == "object" ? b.toString() : b + "";
            if (b == "") {
                return null
            }
            var d = (c ? c.shortYearCutoff : null) || this._defaults.shortYearCutoff;
            d = typeof d != "string" ? d : (new Date).getFullYear() % 100 + parseInt(d, 10);
            var e = (c ? c.dayNamesShort : null) || this._defaults.dayNamesShort, f = (c ? c.dayNames : null) || this._defaults.dayNames, g = (c ? c.monthNamesShort : null) || this._defaults.monthNamesShort, h = (c ? c.monthNames : null) || this._defaults.monthNames, i = -1, j = -1, k = -1, l = -1, m = !1, n = function (b) {
                var c = s + 1 < a.length && a.charAt(s + 1) == b;
                c && s++;
                return c
            }, o = function (a) {
                var c = n(a), d = a == "@" ? 14 : a == "!" ? 20 : a == "y" && c ? 4 : a == "o" ? 3 : 2, e = new RegExp("^\\d{1," + d + "}"), f = b.substring(r).match(e);
                if (!f) {
                    throw"Missing number at position " + r
                }
                r += f[0].length;
                return parseInt(f[0], 10)
            }, p = function (a, c, d) {
                var e = $.map(n(a) ? d : c, function (a, b) {
                    return [[b, a]]
                }).sort(function (a, b) {
                    return -(a[1].length - b[1].length)
                }), f = -1;
                $.each(e, function (a, c) {
                    var d = c[1];
                    if (b.substr(r, d.length).toLowerCase() == d.toLowerCase()) {
                        f = c[0], r += d.length;
                        return !1
                    }
                });
                if (f != -1) {
                    return f + 1
                }
                throw"Unknown name at position " + r
            }, q = function () {
                if (b.charAt(r) != a.charAt(s)) {
                    throw"Unexpected literal at position " + r
                }
                r++
            }, r = 0;
            for (var s = 0; s < a.length; s++) {
                if (m) {
                    a.charAt(s) == "'" && !n("'") ? m = !1 : q()
                } else {
                    switch (a.charAt(s)) {
                        case"d":
                            k = o("d");
                            break;
                        case"D":
                            p("D", e, f);
                            break;
                        case"o":
                            l = o("o");
                            break;
                        case"m":
                            j = o("m");
                            break;
                        case"M":
                            j = p("M", g, h);
                            break;
                        case"y":
                            i = o("y");
                            break;
                        case"@":
                            var t = new Date(o("@"));
                            i = t.getFullYear(), j = t.getMonth() + 1, k = t.getDate();
                            break;
                        case"!":
                            var t = new Date((o("!") - this._ticksTo1970) / 10000);
                            i = t.getFullYear(), j = t.getMonth() + 1, k = t.getDate();
                            break;
                        case"'":
                            n("'") ? q() : m = !0;
                            break;
                        default:
                            q()
                    }
                }
            }
            if (r < b.length) {
                throw"Extra/unparsed characters found in date: " + b.substring(r)
            }
            i == -1 ? i = (new Date).getFullYear() : i < 100 && (i += (new Date).getFullYear() - (new Date).getFullYear() % 100 + (i <= d ? 0 : -100));
            if (l > -1) {
                j = 1, k = l;
                for (; ;) {
                    var u = this._getDaysInMonth(i, j - 1);
                    if (k <= u) {
                        break
                    }
                    j++, k -= u
                }
            }
            var t = this._daylightSavingAdjust(new Date(i, j - 1, k));
            if (t.getFullYear() != i || t.getMonth() + 1 != j || t.getDate() != k) {
                throw"Invalid date"
            }
            return t
        },
        ATOM: "yy-mm-dd",
        COOKIE: "D, dd M yy",
        ISO_8601: "yy-mm-dd",
        RFC_822: "D, d M y",
        RFC_850: "DD, dd-M-y",
        RFC_1036: "D, d M y",
        RFC_1123: "D, d M yy",
        RFC_2822: "D, d M yy",
        RSS: "D, d M y",
        TICKS: "!",
        TIMESTAMP: "@",
        W3C: "yy-mm-dd",
        _ticksTo1970: (718685 + Math.floor(492.5) - Math.floor(19.7) + Math.floor(4.925)) * 24 * 60 * 60 * 10000000,
        formatDate: function (a, b, c) {
            if (!b) {
                return ""
            }
            var d = (c ? c.dayNamesShort : null) || this._defaults.dayNamesShort, e = (c ? c.dayNames : null) || this._defaults.dayNames, f = (c ? c.monthNamesShort : null) || this._defaults.monthNamesShort, g = (c ? c.monthNames : null) || this._defaults.monthNames, h = function (b) {
                var c = m + 1 < a.length && a.charAt(m + 1) == b;
                c && m++;
                return c
            }, i = function (a, b, c) {
                var d = "" + b;
                if (h(a)) {
                    while (d.length < c) {
                        d = "0" + d
                    }
                }
                return d
            }, j = function (a, b, c, d) {
                return h(a) ? d[b] : c[b]
            }, k = "", l = !1;
            if (b) {
                for (var m = 0; m < a.length; m++) {
                    if (l) {
                        a.charAt(m) == "'" && !h("'") ? l = !1 : k += a.charAt(m)
                    } else {
                        switch (a.charAt(m)) {
                            case"d":
                                k += i("d", b.getDate(), 2);
                                break;
                            case"D":
                                k += j("D", b.getDay(), d, e);
                                break;
                            case"o":
                                k += i("o", Math.round(((new Date(b.getFullYear(), b.getMonth(), b.getDate())).getTime() - (new Date(b.getFullYear(), 0, 0)).getTime()) / 86400000), 3);
                                break;
                            case"m":
                                k += i("m", b.getMonth() + 1, 2);
                                break;
                            case"M":
                                k += j("M", b.getMonth(), f, g);
                                break;
                            case"y":
                                k += h("y") ? b.getFullYear() : (b.getYear() % 100 < 10 ? "0" : "") + b.getYear() % 100;
                                break;
                            case"@":
                                k += b.getTime();
                                break;
                            case"!":
                                k += b.getTime() * 10000 + this._ticksTo1970;
                                break;
                            case"'":
                                h("'") ? k += "'" : l = !0;
                                break;
                            default:
                                k += a.charAt(m)
                        }
                    }
                }
            }
            return k
        },
        _possibleChars: function (a) {
            var b = "", c = !1, d = function (b) {
                var c = e + 1 < a.length && a.charAt(e + 1) == b;
                c && e++;
                return c
            };
            for (var e = 0; e < a.length; e++) {
                if (c) {
                    a.charAt(e) == "'" && !d("'") ? c = !1 : b += a.charAt(e)
                } else {
                    switch (a.charAt(e)) {
                        case"d":
                        case"m":
                        case"y":
                        case"@":
                            b += "0123456789";
                            break;
                        case"D":
                        case"M":
                            return null;
                        case"'":
                            d("'") ? b += "'" : c = !0;
                            break;
                        default:
                            b += a.charAt(e)
                    }
                }
            }
            return b
        },
        _get: function (a, b) {
            return a.settings[b] !== undefined ? a.settings[b] : this._defaults[b]
        },
        _setDateFromField: function (a, b) {
            if (a.input.val() != a.lastVal) {
                var c = this._get(a, "dateFormat"), d = a.lastVal = a.input ? a.input.val() : null, e, f;
                e = f = this._getDefaultDate(a);
                var g = this._getFormatConfig(a);
                try {
                    e = this.parseDate(c, d, g) || f
                } catch (h) {
                    this.log(h), d = b ? "" : d
                }
                a.selectedDay = e.getDate(), a.drawMonth = a.selectedMonth = e.getMonth(), a.drawYear = a.selectedYear = e.getFullYear(), a.currentDay = d ? e.getDate() : 0, a.currentMonth = d ? e.getMonth() : 0, a.currentYear = d ? e.getFullYear() : 0, this._adjustInstDate(a)
            }
        },
        _getDefaultDate: function (a) {
            return this._restrictMinMax(a, this._determineDate(a, this._get(a, "defaultDate"), new Date))
        },
        _determineDate: function (a, b, c) {
            var d = function (a) {
                var b = new Date;
                b.setDate(b.getDate() + a);
                return b
            }, e = function (b) {
                try {
                    return $.datepicker.parseDate($.datepicker._get(a, "dateFormat"), b, $.datepicker._getFormatConfig(a))
                } catch (c) {
                }
                var d = (b.toLowerCase().match(/^c/) ? $.datepicker._getDate(a) : null) || new Date, e = d.getFullYear(), f = d.getMonth(), g = d.getDate(), h = /([+-]?[0-9]+)\s*(d|D|w|W|m|M|y|Y)?/g, i = h.exec(b);
                while (i) {
                    switch (i[2] || "d") {
                        case"d":
                        case"D":
                            g += parseInt(i[1], 10);
                            break;
                        case"w":
                        case"W":
                            g += parseInt(i[1], 10) * 7;
                            break;
                        case"m":
                        case"M":
                            f += parseInt(i[1], 10), g = Math.min(g, $.datepicker._getDaysInMonth(e, f));
                            break;
                        case"y":
                        case"Y":
                            e += parseInt(i[1], 10), g = Math.min(g, $.datepicker._getDaysInMonth(e, f))
                    }
                    i = h.exec(b)
                }
                return new Date(e, f, g)
            }, f = b == null || b === "" ? c : typeof b == "string" ? e(b) : typeof b == "number" ? isNaN(b) ? c : d(b) : new Date(b.getTime());
            f = f && f.toString() == "Invalid Date" ? c : f, f && (f.setHours(0), f.setMinutes(0), f.setSeconds(0), f.setMilliseconds(0));
            return this._daylightSavingAdjust(f)
        },
        _daylightSavingAdjust: function (a) {
            if (!a) {
                return null
            }
            a.setHours(a.getHours() > 12 ? a.getHours() + 2 : 0);
            return a
        },
        _setDate: function (a, b, c) {
            var d = !b, e = a.selectedMonth, f = a.selectedYear, g = this._restrictMinMax(a, this._determineDate(a, b, new Date));
            a.selectedDay = a.currentDay = g.getDate(), a.drawMonth = a.selectedMonth = a.currentMonth = g.getMonth(), a.drawYear = a.selectedYear = a.currentYear = g.getFullYear(), (e != a.selectedMonth || f != a.selectedYear) && !c && this._notifyChange(a), this._adjustInstDate(a), a.input && a.input.val(d ? "" : this._formatDate(a))
        },
        _getDate: function (a) {
            var b = !a.currentYear || a.input && a.input.val() == "" ? null : this._daylightSavingAdjust(new Date(a.currentYear, a.currentMonth, a.currentDay));
            return b
        },
        _generateHTML: function (a) {
            var b = new Date;
            b = this._daylightSavingAdjust(new Date(b.getFullYear(), b.getMonth(), b.getDate()));
            var c = this._get(a, "isRTL"), d = this._get(a, "showButtonPanel"), e = this._get(a, "hideIfNoPrevNext"), f = this._get(a, "navigationAsDateFormat"), g = this._getNumberOfMonths(a), h = this._get(a, "showCurrentAtPos"), i = this._get(a, "stepMonths"), j = g[0] != 1 || g[1] != 1, k = this._daylightSavingAdjust(a.currentDay ? new Date(a.currentYear, a.currentMonth, a.currentDay) : new Date(9999, 9, 9)), l = this._getMinMaxDate(a, "min"), m = this._getMinMaxDate(a, "max"), n = a.drawMonth - h, o = a.drawYear;
            n < 0 && (n += 12, o--);
            if (m) {
                var p = this._daylightSavingAdjust(new Date(m.getFullYear(), m.getMonth() - g[0] * g[1] + 1, m.getDate()));
                p = l && p < l ? l : p;
                while (this._daylightSavingAdjust(new Date(o, n, 1)) > p) {
                    n--, n < 0 && (n = 11, o--)
                }
            }
            a.drawMonth = n, a.drawYear = o;
            var q = this._get(a, "prevText");
            q = f ? this.formatDate(q, this._daylightSavingAdjust(new Date(o, n - i, 1)), this._getFormatConfig(a)) : q;
            var r = this._canAdjustMonth(a, -1, o, n) ? '<a class="ui-datepicker-prev ui-corner-all" onclick="DP_jQuery_' + dpuuid + ".datepicker._adjustDate('#" + a.id + "', -" + i + ", 'M');\"" + ' title="' + q + '"><span class="ui-icon ui-icon-circle-triangle-' + (c ? "e" : "w") + '">' + q + "</span></a>" : e ? "" : '<a class="ui-datepicker-prev ui-corner-all ui-state-disabled" title="' + q + '"><span class="ui-icon ui-icon-circle-triangle-' + (c ? "e" : "w") + '">' + q + "</span></a>", s = this._get(a, "nextText");
            s = f ? this.formatDate(s, this._daylightSavingAdjust(new Date(o, n + i, 1)), this._getFormatConfig(a)) : s;
            var t = this._canAdjustMonth(a, 1, o, n) ? '<a class="ui-datepicker-next ui-corner-all" onclick="DP_jQuery_' + dpuuid + ".datepicker._adjustDate('#" + a.id + "', +" + i + ", 'M');\"" + ' title="' + s + '"><span class="ui-icon ui-icon-circle-triangle-' + (c ? "w" : "e") + '">' + s + "</span></a>" : e ? "" : '<a class="ui-datepicker-next ui-corner-all ui-state-disabled" title="' + s + '"><span class="ui-icon ui-icon-circle-triangle-' + (c ? "w" : "e") + '">' + s + "</span></a>", u = this._get(a, "currentText"), v = this._get(a, "gotoCurrent") && a.currentDay ? k : b;
            u = f ? this.formatDate(u, v, this._getFormatConfig(a)) : u;
            var w = a.inline ? "" : '<button type="button" class="ui-datepicker-close ui-state-default ui-priority-primary ui-corner-all" onclick="DP_jQuery_' + dpuuid + '.datepicker._hideDatepicker();">' + this._get(a, "closeText") + "</button>", x = d ? '<div class="ui-datepicker-buttonpane ui-widget-content">' + (c ? w : "") + (this._isInRange(a, v) ? '<button type="button" class="ui-datepicker-current ui-state-default ui-priority-secondary ui-corner-all" onclick="DP_jQuery_' + dpuuid + ".datepicker._gotoToday('#" + a.id + "');\"" + ">" + u + "</button>" : "") + (c ? "" : w) + "</div>" : "", y = parseInt(this._get(a, "firstDay"), 10);
            y = isNaN(y) ? 0 : y;
            var z = this._get(a, "showWeek"), A = this._get(a, "dayNames"), B = this._get(a, "dayNamesShort"), C = this._get(a, "dayNamesMin"), D = this._get(a, "monthNames"), E = this._get(a, "monthNamesShort"), F = this._get(a, "beforeShowDay"), G = this._get(a, "showOtherMonths"), H = this._get(a, "selectOtherMonths"), I = this._get(a, "calculateWeek") || this.iso8601Week, J = this._getDefaultDate(a), K = "";
            for (var L = 0; L < g[0]; L++) {
                var M = "";
                this.maxRows = 4;
                for (var N = 0; N < g[1]; N++) {
                    var O = this._daylightSavingAdjust(new Date(o, n, a.selectedDay)), P = " ui-corner-all", Q = "";
                    if (j) {
                        Q += '<div class="ui-datepicker-group';
                        if (g[1] > 1) {
                            switch (N) {
                                case 0:
                                    Q += " ui-datepicker-group-first", P = " ui-corner-" + (c ? "right" : "left");
                                    break;
                                case g[1] - 1:
                                    Q += " ui-datepicker-group-last", P = " ui-corner-" + (c ? "left" : "right");
                                    break;
                                default:
                                    Q += " ui-datepicker-group-middle", P = ""
                            }
                        }
                        Q += '">'
                    }
                    Q += '<div class="ui-datepicker-header ui-widget-header ui-helper-clearfix' + P + '">' + (/all|left/.test(P) && L == 0 ? c ? t : r : "") + (/all|right/.test(P) && L == 0 ? c ? r : t : "") + this._generateMonthYearHeader(a, n, o, l, m, L > 0 || N > 0, D, E) + '</div><table class="ui-datepicker-calendar"><thead>' + "<tr>";
                    var R = z ? '<th class="ui-datepicker-week-col">' + this._get(a, "weekHeader") + "</th>" : "";
                    for (var S = 0; S < 7; S++) {
                        var T = (S + y) % 7;
                        R += "<th" + ((S + y + 6) % 7 >= 5 ? ' class="ui-datepicker-week-end"' : "") + ">" + '<span title="' + A[T] + '">' + C[T] + "</span></th>"
                    }
                    Q += R + "</tr></thead><tbody>";
                    var U = this._getDaysInMonth(o, n);
                    o == a.selectedYear && n == a.selectedMonth && (a.selectedDay = Math.min(a.selectedDay, U));
                    var V = (this._getFirstDayOfMonth(o, n) - y + 7) % 7, W = Math.ceil((V + U) / 7), X = j ? this.maxRows > W ? this.maxRows : W : W;
                    this.maxRows = X;
                    var Y = this._daylightSavingAdjust(new Date(o, n, 1 - V));
                    for (var Z = 0; Z < X; Z++) {
                        Q += "<tr>";
                        var _ = z ? '<td class="ui-datepicker-week-col">' + this._get(a, "calculateWeek")(Y) + "</td>" : "";
                        for (var S = 0; S < 7; S++) {
                            var ba = F ? F.apply(a.input ? a.input[0] : null, [Y]) : [!0, ""], bb = Y.getMonth() != n, bc = bb && !H || !ba[0] || l && Y < l || m && Y > m;
                            _ += '<td class="' + ((S + y + 6) % 7 >= 5 ? " ui-datepicker-week-end" : "") + (bb ? " ui-datepicker-other-month" : "") + (Y.getTime() == O.getTime() && n == a.selectedMonth && a._keyEvent || J.getTime() == Y.getTime() && J.getTime() == O.getTime() ? " " + this._dayOverClass : "") + (bc ? " " + this._unselectableClass + " ui-state-disabled" : "") + (bb && !G ? "" : " " + ba[1] + (Y.getTime() == k.getTime() ? " " + this._currentClass : "") + (Y.getTime() == b.getTime() ? " ui-datepicker-today" : "")) + '"' + ((!bb || G) && ba[2] ? ' title="' + ba[2] + '"' : "") + (bc ? "" : ' onclick="DP_jQuery_' + dpuuid + ".datepicker._selectDay('#" + a.id + "'," + Y.getMonth() + "," + Y.getFullYear() + ', this);return false;"') + ">" + (bb && !G ? "&#xa0;" : bc ? '<span class="ui-state-default">' + Y.getDate() + "</span>" : '<a class="ui-state-default' + (Y.getTime() == b.getTime() ? " ui-state-highlight" : "") + (Y.getTime() == k.getTime() ? " ui-state-active" : "") + (bb ? " ui-priority-secondary" : "") + '" href="#">' + Y.getDate() + "</a>") + "</td>", Y.setDate(Y.getDate() + 1), Y = this._daylightSavingAdjust(Y)
                        }
                        Q += _ + "</tr>"
                    }
                    n++, n > 11 && (n = 0, o++), Q += "</tbody></table>" + (j ? "</div>" + (g[0] > 0 && N == g[1] - 1 ? '<div class="ui-datepicker-row-break"></div>' : "") : ""), M += Q
                }
                K += M
            }
            K += x + (/msie/.test(navigator.userAgent.toLowerCase()) && parseInt($.browser.version, 10) < 7 && !a.inline ? '<iframe src="javascript:false;" class="ui-datepicker-cover" frameborder="0"></iframe>' : ""), a._keyEvent = !1;
            return K
        },
        _generateMonthYearHeader: function (a, b, c, d, e, f, g, h) {
            var i = this._get(a, "changeMonth"), j = this._get(a, "changeYear"), k = this._get(a, "showMonthAfterYear"), l = '<div class="ui-datepicker-title">', m = "";
            if (f || !i) {
                m += '<span class="ui-datepicker-month">' + g[b] + "</span>"
            } else {
                var n = d && d.getFullYear() == c, o = e && e.getFullYear() == c;
                m += '<select class="ui-datepicker-month" onchange="DP_jQuery_' + dpuuid + ".datepicker._selectMonthYear('#" + a.id + "', this, 'M');\" " + ">";
                for (var p = 0; p < 12; p++) {
                    (!n || p >= d.getMonth()) && (!o || p <= e.getMonth()) && (m += '<option value="' + p + '"' + (p == b ? ' selected="selected"' : "") + ">" + h[p] + "</option>")
                }
                m += "</select>"
            }
            k || (l += m + (f || !i || !j ? "&#xa0;" : ""));
            if (!a.yearshtml) {
                a.yearshtml = "";
                if (f || !j) {
                    l += '<span class="ui-datepicker-year">' + c + "</span>"
                } else {
                    var q = this._get(a, "yearRange").split(":"), r = (new Date).getFullYear(), s = function (a) {
                        var b = a.match(/c[+-].*/) ? c + parseInt(a.substring(1), 10) : a.match(/[+-].*/) ? r + parseInt(a, 10) : parseInt(a, 10);
                        return isNaN(b) ? r : b
                    }, t = s(q[0]), u = Math.max(t, s(q[1] || ""));
                    t = d ? Math.max(t, d.getFullYear()) : t, u = e ? Math.min(u, e.getFullYear()) : u, a.yearshtml += '<select class="ui-datepicker-year" onchange="DP_jQuery_' + dpuuid + ".datepicker._selectMonthYear('#" + a.id + "', this, 'Y');\" " + ">";
                    for (; t <= u; t++) {
                        a.yearshtml += '<option value="' + t + '"' + (t == c ? ' selected="selected"' : "") + ">" + t + "</option>"
                    }
                    a.yearshtml += "</select>", l += a.yearshtml, a.yearshtml = null
                }
            }
            l += this._get(a, "yearSuffix"), k && (l += (f || !i || !j ? "&#xa0;" : "") + m), l += "</div>";
            return l
        },
        _adjustInstDate: function (a, b, c) {
            var d = a.drawYear + (c == "Y" ? b : 0), e = a.drawMonth + (c == "M" ? b : 0), f = Math.min(a.selectedDay, this._getDaysInMonth(d, e)) + (c == "D" ? b : 0), g = this._restrictMinMax(a, this._daylightSavingAdjust(new Date(d, e, f)));
            a.selectedDay = g.getDate(), a.drawMonth = a.selectedMonth = g.getMonth(), a.drawYear = a.selectedYear = g.getFullYear(), (c == "M" || c == "Y") && this._notifyChange(a)
        },
        _restrictMinMax: function (a, b) {
            var c = this._getMinMaxDate(a, "min"), d = this._getMinMaxDate(a, "max"), e = c && b < c ? c : b;
            e = d && e > d ? d : e;
            return e
        },
        _notifyChange: function (a) {
            var b = this._get(a, "onChangeMonthYear");
            b && b.apply(a.input ? a.input[0] : null, [a.selectedYear, a.selectedMonth + 1, a])
        },
        _getNumberOfMonths: function (a) {
            var b = this._get(a, "numberOfMonths");
            return b == null ? [1, 1] : typeof b == "number" ? [1, b] : b
        },
        _getMinMaxDate: function (a, b) {
            return this._determineDate(a, this._get(a, b + "Date"), null)
        },
        _getDaysInMonth: function (a, b) {
            return 32 - this._daylightSavingAdjust(new Date(a, b, 32)).getDate()
        },
        _getFirstDayOfMonth: function (a, b) {
            return (new Date(a, b, 1)).getDay()
        },
        _canAdjustMonth: function (a, b, c, d) {
            var e = this._getNumberOfMonths(a), f = this._daylightSavingAdjust(new Date(c, d + (b < 0 ? b : e[0] * e[1]), 1));
            b < 0 && f.setDate(this._getDaysInMonth(f.getFullYear(), f.getMonth()));
            return this._isInRange(a, f)
        },
        _isInRange: function (a, b) {
            var c = this._getMinMaxDate(a, "min"), d = this._getMinMaxDate(a, "max");
            return (!c || b.getTime() >= c.getTime()) && (!d || b.getTime() <= d.getTime())
        },
        _getFormatConfig: function (a) {
            var b = this._get(a, "shortYearCutoff");
            b = typeof b != "string" ? b : (new Date).getFullYear() % 100 + parseInt(b, 10);
            return {
                shortYearCutoff: b,
                dayNamesShort: this._get(a, "dayNamesShort"),
                dayNames: this._get(a, "dayNames"),
                monthNamesShort: this._get(a, "monthNamesShort"),
                monthNames: this._get(a, "monthNames")
            }
        },
        _formatDate: function (a, b, c, d) {
            b || (a.currentDay = a.selectedDay, a.currentMonth = a.selectedMonth, a.currentYear = a.selectedYear);
            var e = b ? typeof b == "object" ? b : this._daylightSavingAdjust(new Date(d, c, b)) : this._daylightSavingAdjust(new Date(a.currentYear, a.currentMonth, a.currentDay));
            return this.formatDate(this._get(a, "dateFormat"), e, this._getFormatConfig(a))
        }
    }), $.fn.datepicker = function (a) {
        if (!this.length) {
            return this
        }
        $.datepicker.initialized || ($(document).mousedown($.datepicker._checkExternalClick).find("body").append($.datepicker.dpDiv), $.datepicker.initialized = !0);
        var b = Array.prototype.slice.call(arguments, 1);
        if (typeof a == "string" && (a == "isDisabled" || a == "getDate" || a == "widget")) {
            return $.datepicker["_" + a + "Datepicker"].apply($.datepicker, [this[0]].concat(b))
        }
        if (a == "option" && arguments.length == 2 && typeof arguments[1] == "string") {
            return $.datepicker["_" + a + "Datepicker"].apply($.datepicker, [this[0]].concat(b))
        }
        return this.each(function () {
            typeof a == "string" ? $.datepicker["_" + a + "Datepicker"].apply($.datepicker, [this].concat(b)) : $.datepicker._attachDatepicker(this, a)
        })
    }, $.datepicker = new Datepicker, $.datepicker.initialized = !1, $.datepicker.uuid = (new Date).getTime(), $.datepicker.version = "1.8.18", window["DP_jQuery_" + dpuuid] = $
})(jQuery);
(function(a,b){function d(b){return !a(b).parents().andSelf().filter(function(){return a.curCSS(this,"visibility")==="hidden"||a.expr.filters.hidden(this)}).length}function c(b,c){var e=b.nodeName.toLowerCase();if("area"===e){var f=b.parentNode,g=f.name,h;if(!b.href||!g||f.nodeName.toLowerCase()!=="map"){return !1}h=a("img[usemap=#"+g+"]")[0];return !!h&&d(h)}return(/input|select|textarea|button|object/.test(e)?!b.disabled:"a"==e?b.href||c:c)&&d(b)}a.ui=a.ui||{};a.ui.version||(a.extend(a.ui,{version:"1.8.18",keyCode:{ALT:18,BACKSPACE:8,CAPS_LOCK:20,COMMA:188,COMMAND:91,COMMAND_LEFT:91,COMMAND_RIGHT:93,CONTROL:17,DELETE:46,DOWN:40,END:35,ENTER:13,ESCAPE:27,HOME:36,INSERT:45,LEFT:37,MENU:93,NUMPAD_ADD:107,NUMPAD_DECIMAL:110,NUMPAD_DIVIDE:111,NUMPAD_ENTER:108,NUMPAD_MULTIPLY:106,NUMPAD_SUBTRACT:109,PAGE_DOWN:34,PAGE_UP:33,PERIOD:190,RIGHT:39,SHIFT:16,SPACE:32,TAB:9,UP:38,WINDOWS:91}}),a.fn.extend({propAttr:a.fn.prop||a.fn.attr,_focus:a.fn.focus,focus:function(b,c){return typeof b=="number"?this.each(function(){var d=this;setTimeout(function(){a(d).focus(),c&&c.call(d)},b)}):this._focus.apply(this,arguments)},scrollParent:function(){var b;/msie/.test(navigator.userAgent.toLowerCase())&&/(static|relative)/.test(this.css("position"))||/absolute/.test(this.css("position"))?b=this.parents().filter(function(){return/(relative|absolute|fixed)/.test(a.curCSS(this,"position",1))&&/(auto|scroll)/.test(a.curCSS(this,"overflow",1)+a.curCSS(this,"overflow-y",1)+a.curCSS(this,"overflow-x",1))}).eq(0):b=this.parents().filter(function(){return/(auto|scroll)/.test(a.curCSS(this,"overflow",1)+a.curCSS(this,"overflow-y",1)+a.curCSS(this,"overflow-x",1))}).eq(0);return/fixed/.test(this.css("position"))||!b.length?a(document):b},zIndex:function(c){if(c!==b){return this.css("zIndex",c)}if(this.length){var d=a(this[0]),e,f;while(d.length&&d[0]!==document){e=d.css("position");if(e==="absolute"||e==="relative"||e==="fixed"){f=parseInt(d.css("zIndex"),10);if(!isNaN(f)&&f!==0){return f}}d=d.parent()}}return 0},disableSelection:function(){return this.bind((a.support.selectstart?"selectstart":"mousedown")+".ui-disableSelection",function(a){a.preventDefault()})},enableSelection:function(){return this.unbind(".ui-disableSelection")}}),a.each(["Width","Height"],function(c,d){function h(b,c,d,f){a.each(e,function(){c-=parseFloat(a.curCSS(b,"padding"+this,!0))||0,d&&(c-=parseFloat(a.curCSS(b,"border"+this+"Width",!0))||0),f&&(c-=parseFloat(a.curCSS(b,"margin"+this,!0))||0)});return c}var e=d==="Width"?["Left","Right"]:["Top","Bottom"],f=d.toLowerCase(),g={innerWidth:a.fn.innerWidth,innerHeight:a.fn.innerHeight,outerWidth:a.fn.outerWidth,outerHeight:a.fn.outerHeight};a.fn["inner"+d]=function(c){if(c===b){return g["inner"+d].call(this)}return this.each(function(){a(this).css(f,h(this,c)+"px")})},a.fn["outer"+d]=function(b,c){if(typeof b!="number"){return g["outer"+d].call(this,b)}return this.each(function(){a(this).css(f,h(this,b,!0,c)+"px")})}}),a.extend(a.expr[":"],{data:function(b,c,d){return !!a.data(b,d[3])},focusable:function(b){return c(b,!isNaN(a.attr(b,"tabindex")))},tabbable:function(b){var d=a.attr(b,"tabindex"),e=isNaN(d);return(e||d>=0)&&c(b,!e)}}),a(function(){var b=document.body,c=b.appendChild(c=document.createElement("div"));c.offsetHeight,a.extend(c.style,{minHeight:"100px",height:"auto",padding:0,borderWidth:0}),a.support.minHeight=c.offsetHeight===100,a.support.selectstart="onselectstart" in c,b.removeChild(c).style.display="none"}),a.extend(a.ui,{plugin:{add:function(b,c,d){var e=a.ui[b].prototype;for(var f in d){e.plugins[f]=e.plugins[f]||[],e.plugins[f].push([c,d[f]])}},call:function(a,b,c){var d=a.plugins[b];if(!!d&&!!a.element[0].parentNode){for(var e=0;e<d.length;e++){a.options[d[e][0]]&&d[e][1].apply(a.element,c)}}}},contains:function(a,b){return document.compareDocumentPosition?a.compareDocumentPosition(b)&16:a!==b&&a.contains(b)},hasScroll:function(b,c){if(a(b).css("overflow")==="hidden"){return !1}var d=c&&c==="left"?"scrollLeft":"scrollTop",e=!1;if(b[d]>0){return !0}b[d]=1,e=b[d]>0,b[d]=0;return e},isOverAxis:function(a,b,c){return a>b&&a<b+c},isOver:function(b,c,d,e,f,g){return a.ui.isOverAxis(b,d,f)&&a.ui.isOverAxis(c,e,g)}}))})(jQuery);(function(a,b){if(a.cleanData){var c=a.cleanData;a.cleanData=function(b){for(var d=0,e;(e=b[d])!=null;d++){try{a(e).triggerHandler("remove")}catch(f){}}c(b)}}else{var d=a.fn.remove;a.fn.remove=function(b,c){return this.each(function(){c||(!b||a.filter(b,[this]).length)&&a("*",this).add([this]).each(function(){try{a(this).triggerHandler("remove")}catch(b){}});return d.call(a(this),b,c)})}}a.widget=function(b,c,d){var e=b.split(".")[0],f;b=b.split(".")[1],f=e+"-"+b,d||(d=c,c=a.Widget),a.expr[":"][f]=function(c){return !!a.data(c,b)},a[e]=a[e]||{},a[e][b]=function(a,b){arguments.length&&this._createWidget(a,b)};var g=new c;g.options=a.extend(!0,{},g.options),a[e][b].prototype=a.extend(!0,g,{namespace:e,widgetName:b,widgetEventPrefix:a[e][b].prototype.widgetEventPrefix||b,widgetBaseClass:f},d),a.widget.bridge(b,a[e][b])
},a.widget.bridge=function(c,d){a.fn[c]=function(e){var f=typeof e=="string",g=Array.prototype.slice.call(arguments,1),h=this;e=!f&&g.length?a.extend.apply(null,[!0,e].concat(g)):e;if(f&&e.charAt(0)==="_"){return h}f?this.each(function(){var d=a.data(this,c),f=d&&a.isFunction(d[e])?d[e].apply(d,g):d;if(f!==d&&f!==b){h=f;return !1}}):this.each(function(){var b=a.data(this,c);b?b.option(e||{})._init():a.data(this,c,new d(e,this))});return h}},a.Widget=function(a,b){arguments.length&&this._createWidget(a,b)},a.Widget.prototype={widgetName:"widget",widgetEventPrefix:"",options:{disabled:!1},_createWidget:function(b,c){a.data(c,this.widgetName,this),this.element=a(c),this.options=a.extend(!0,{},this.options,this._getCreateOptions(),b);var d=this;this.element.bind("remove."+this.widgetName,function(){d.destroy()}),this._create(),this._trigger("create"),this._init()},_getCreateOptions:function(){return a.metadata&&a.metadata.get(this.element[0])[this.widgetName]},_create:function(){},_init:function(){},destroy:function(){this.element.unbind("."+this.widgetName).removeData(this.widgetName),this.widget().unbind("."+this.widgetName).removeAttr("aria-disabled").removeClass(this.widgetBaseClass+"-disabled "+"ui-state-disabled")},widget:function(){return this.element},option:function(c,d){var e=c;if(arguments.length===0){return a.extend({},this.options)}if(typeof c=="string"){if(d===b){return this.options[c]}e={},e[c]=d}this._setOptions(e);return this},_setOptions:function(b){var c=this;a.each(b,function(a,b){c._setOption(a,b)});return this},_setOption:function(a,b){this.options[a]=b,a==="disabled"&&this.widget()[b?"addClass":"removeClass"](this.widgetBaseClass+"-disabled"+" "+"ui-state-disabled").attr("aria-disabled",b);return this},enable:function(){return this._setOption("disabled",!1)},disable:function(){return this._setOption("disabled",!0)},_trigger:function(b,c,d){var e,f,g=this.options[b];d=d||{},c=a.Event(c),c.type=(b===this.widgetEventPrefix?b:this.widgetEventPrefix+b).toLowerCase(),c.target=this.element[0],f=c.originalEvent;if(f){for(e in f){e in c||(c[e]=f[e])}}this.element.trigger(c,d);return !(a.isFunction(g)&&g.call(this.element[0],c,d)===!1||c.isDefaultPrevented())}}})(jQuery);(function(a,b){var c=!1;a(document).mouseup(function(a){c=!1}),a.widget("ui.mouse",{options:{cancel:":input,option",distance:1,delay:0},_mouseInit:function(){var b=this;this.element.bind("mousedown."+this.widgetName,function(a){return b._mouseDown(a)}).bind("click."+this.widgetName,function(c){if(!0===a.data(c.target,b.widgetName+".preventClickEvent")){a.removeData(c.target,b.widgetName+".preventClickEvent"),c.stopImmediatePropagation();return !1}}),this.started=!1},_mouseDestroy:function(){this.element.unbind("."+this.widgetName)},_mouseDown:function(b){if(!c){this._mouseStarted&&this._mouseUp(b),this._mouseDownEvent=b;var d=this,e=b.which==1,f=typeof this.options.cancel=="string"&&b.target.nodeName?a(b.target).closest(this.options.cancel).length:!1;if(!e||f||!this._mouseCapture(b)){return !0}this.mouseDelayMet=!this.options.delay,this.mouseDelayMet||(this._mouseDelayTimer=setTimeout(function(){d.mouseDelayMet=!0},this.options.delay));if(this._mouseDistanceMet(b)&&this._mouseDelayMet(b)){this._mouseStarted=this._mouseStart(b)!==!1;if(!this._mouseStarted){b.preventDefault();return !0}}!0===a.data(b.target,this.widgetName+".preventClickEvent")&&a.removeData(b.target,this.widgetName+".preventClickEvent"),this._mouseMoveDelegate=function(a){return d._mouseMove(a)},this._mouseUpDelegate=function(a){return d._mouseUp(a)},a(document).bind("mousemove."+this.widgetName,this._mouseMoveDelegate).bind("mouseup."+this.widgetName,this._mouseUpDelegate),b.preventDefault(),c=!0;return !0}},_mouseMove:function(b){if(/msie/.test(navigator.userAgent.toLowerCase())&&!(document.documentMode>=9)&&!b.button){return this._mouseUp(b)}if(this._mouseStarted){this._mouseDrag(b);return b.preventDefault()}this._mouseDistanceMet(b)&&this._mouseDelayMet(b)&&(this._mouseStarted=this._mouseStart(this._mouseDownEvent,b)!==!1,this._mouseStarted?this._mouseDrag(b):this._mouseUp(b));return !this._mouseStarted},_mouseUp:function(b){a(document).unbind("mousemove."+this.widgetName,this._mouseMoveDelegate).unbind("mouseup."+this.widgetName,this._mouseUpDelegate),this._mouseStarted&&(this._mouseStarted=!1,b.target==this._mouseDownEvent.target&&a.data(b.target,this.widgetName+".preventClickEvent",!0),this._mouseStop(b));return !1},_mouseDistanceMet:function(a){return Math.max(Math.abs(this._mouseDownEvent.pageX-a.pageX),Math.abs(this._mouseDownEvent.pageY-a.pageY))>=this.options.distance},_mouseDelayMet:function(a){return this.mouseDelayMet},_mouseStart:function(a){},_mouseDrag:function(a){},_mouseStop:function(a){},_mouseCapture:function(a){return !0}})})(jQuery);(function(a,b){var c=5;a.widget("ui.slider",a.ui.mouse,{widgetEventPrefix:"slide",options:{animate:!1,distance:0,max:100,min:0,orientation:"horizontal",range:!1,step:1,value:0,values:null},_create:function(){var b=this,d=this.options,e=this.element.find(".ui-slider-handle").addClass("ui-state-default ui-corner-all"),f="<a class='ui-slider-handle ui-state-default ui-corner-all' href='#'></a>",g=d.values&&d.values.length||1,h=[];
    this._keySliding=!1,this._mouseSliding=!1,this._animateOff=!0,this._handleIndex=null,this._detectOrientation(),this._mouseInit(),this.element.addClass("ui-slider ui-slider-"+this.orientation+" ui-widget"+" ui-widget-content"+" ui-corner-all"+(d.disabled?" ui-slider-disabled ui-disabled":"")),this.range=a([]),d.range&&(d.range===!0&&(d.values||(d.values=[this._valueMin(),this._valueMin()]),d.values.length&&d.values.length!==2&&(d.values=[d.values[0],d.values[0]])),this.range=a("<div></div>").appendTo(this.element).addClass("ui-slider-range ui-widget-header"+(d.range==="min"||d.range==="max"?" ui-slider-range-"+d.range:"")));for(var i=e.length;i<g;i+=1){h.push(f)}this.handles=e.add(a(h.join("")).appendTo(b.element)),this.handle=this.handles.eq(0),this.handles.add(this.range).filter("a").click(function(a){a.preventDefault()}).hover(function(){d.disabled||a(this).addClass("ui-state-hover")},function(){a(this).removeClass("ui-state-hover")}).focus(function(){d.disabled?a(this).blur():(a(".ui-slider .ui-state-focus").removeClass("ui-state-focus"),a(this).addClass("ui-state-focus"))}).blur(function(){a(this).removeClass("ui-state-focus")}),this.handles.each(function(b){a(this).data("index.ui-slider-handle",b)}),this.handles.keydown(function(d){var e=a(this).data("index.ui-slider-handle"),f,g,h,i;if(!b.options.disabled){switch(d.keyCode){case a.ui.keyCode.HOME:case a.ui.keyCode.END:case a.ui.keyCode.PAGE_UP:case a.ui.keyCode.PAGE_DOWN:case a.ui.keyCode.UP:case a.ui.keyCode.RIGHT:case a.ui.keyCode.DOWN:case a.ui.keyCode.LEFT:d.preventDefault();if(!b._keySliding){b._keySliding=!0,a(this).addClass("ui-state-active"),f=b._start(d,e);if(f===!1){return}}}i=b.options.step,b.options.values&&b.options.values.length?g=h=b.values(e):g=h=b.value();switch(d.keyCode){case a.ui.keyCode.HOME:h=b._valueMin();break;case a.ui.keyCode.END:h=b._valueMax();break;case a.ui.keyCode.PAGE_UP:h=b._trimAlignValue(g+(b._valueMax()-b._valueMin())/c);break;case a.ui.keyCode.PAGE_DOWN:h=b._trimAlignValue(g-(b._valueMax()-b._valueMin())/c);break;case a.ui.keyCode.UP:case a.ui.keyCode.RIGHT:if(g===b._valueMax()){return}h=b._trimAlignValue(g+i);break;case a.ui.keyCode.DOWN:case a.ui.keyCode.LEFT:if(g===b._valueMin()){return}h=b._trimAlignValue(g-i)}b._slide(d,e,h)}}).keyup(function(c){var d=a(this).data("index.ui-slider-handle");b._keySliding&&(b._keySliding=!1,b._stop(c,d),b._change(c,d),a(this).removeClass("ui-state-active"))}),this._refreshValue(),this._animateOff=!1},destroy:function(){this.handles.remove(),this.range.remove(),this.element.removeClass("ui-slider ui-slider-horizontal ui-slider-vertical ui-slider-disabled ui-widget ui-widget-content ui-corner-all").removeData("slider").unbind(".slider"),this._mouseDestroy();return this},_mouseCapture:function(b){var c=this.options,d,e,f,g,h,i,j,k,l;if(c.disabled){return !1}this.elementSize={width:this.element.outerWidth(false),height:this.element.outerHeight(false)},this.elementOffset=this.element.offset(),d={x:b.pageX,y:b.pageY},e=this._normValueFromMouse(d),f=this._valueMax()-this._valueMin()+1,h=this,this.handles.each(function(b){var c=Math.abs(e-h.values(b));f>c&&(f=c,g=a(this),i=b)}),c.range===!0&&this.values(1)===c.min&&(i+=1,g=a(this.handles[i])),j=this._start(b,i);if(j===!1){return !1}this._mouseSliding=!0,h._handleIndex=i,g.addClass("ui-state-active").focus(),k=g.offset(),l=!a(b.target).parents().andSelf().is(".ui-slider-handle"),this._clickOffset=l?{left:0,top:0}:{left:b.pageX-k.left-g.width()/2,top:b.pageY-k.top-g.height()/2-(parseInt(g.css("borderTopWidth"),10)||0)-(parseInt(g.css("borderBottomWidth"),10)||0)+(parseInt(g.css("marginTop"),10)||0)},this.handles.hasClass("ui-state-hover")||this._slide(b,i,e),this._animateOff=!0;return !0},_mouseStart:function(a){return !0},_mouseDrag:function(a){var b={x:a.pageX,y:a.pageY},c=this._normValueFromMouse(b);this._slide(a,this._handleIndex,c);return !1},_mouseStop:function(a){this.handles.removeClass("ui-state-active"),this._mouseSliding=!1,this._stop(a,this._handleIndex),this._change(a,this._handleIndex),this._handleIndex=null,this._clickOffset=null,this._animateOff=!1;return !1},_detectOrientation:function(){this.orientation=this.options.orientation==="vertical"?"vertical":"horizontal"},_normValueFromMouse:function(a){var b,c,d,e,f;this.orientation==="horizontal"?(b=this.elementSize.width,c=a.x-this.elementOffset.left-(this._clickOffset?this._clickOffset.left:0)):(b=this.elementSize.height,c=a.y-this.elementOffset.top-(this._clickOffset?this._clickOffset.top:0)),d=c/b,d>1&&(d=1),d<0&&(d=0),this.orientation==="vertical"&&(d=1-d),e=this._valueMax()-this._valueMin(),f=this._valueMin()+d*e;return this._trimAlignValue(f)},_start:function(a,b){var c={handle:this.handles[b],value:this.value()};this.options.values&&this.options.values.length&&(c.value=this.values(b),c.values=this.values());return this._trigger("start",a,c)},_slide:function(a,b,c){var d,e,f;this.options.values&&this.options.values.length?(d=this.values(b?0:1),this.options.values.length===2&&this.options.range===!0&&(b===0&&c>d||b===1&&c<d)&&(c=d),c!==this.values(b)&&(e=this.values(),e[b]=c,f=this._trigger("slide",a,{handle:this.handles[b],value:c,values:e}),d=this.values(b?0:1),f!==!1&&this.values(b,c,!0))):c!==this.value()&&(f=this._trigger("slide",a,{handle:this.handles[b],value:c}),f!==!1&&this.value(c))
},_stop:function(a,b){var c={handle:this.handles[b],value:this.value()};this.options.values&&this.options.values.length&&(c.value=this.values(b),c.values=this.values()),this._trigger("stop",a,c)},_change:function(a,b){if(!this._keySliding&&!this._mouseSliding){var c={handle:this.handles[b],value:this.value()};this.options.values&&this.options.values.length&&(c.value=this.values(b),c.values=this.values()),this._trigger("change",a,c)}},value:function(a){if(arguments.length){this.options.value=this._trimAlignValue(a),this._refreshValue(),this._change(null,0)}else{return this._value()}},values:function(b,c){var d,e,f;if(arguments.length>1){this.options.values[b]=this._trimAlignValue(c),this._refreshValue(),this._change(null,b)}else{if(!arguments.length){return this._values()}if(!a.isArray(arguments[0])){return this.options.values&&this.options.values.length?this._values(b):this.value()}d=this.options.values,e=arguments[0];for(f=0;f<d.length;f+=1){d[f]=this._trimAlignValue(e[f]),this._change(null,f)}this._refreshValue()}},_setOption:function(b,c){var d,e=0;a.isArray(this.options.values)&&(e=this.options.values.length),a.Widget.prototype._setOption.apply(this,arguments);switch(b){case"disabled":c?(this.handles.filter(".ui-state-focus").blur(),this.handles.removeClass("ui-state-hover"),this.handles.propAttr("disabled",!0),this.element.addClass("ui-disabled")):(this.handles.propAttr("disabled",!1),this.element.removeClass("ui-disabled"));break;case"orientation":this._detectOrientation(),this.element.removeClass("ui-slider-horizontal ui-slider-vertical").addClass("ui-slider-"+this.orientation),this._refreshValue();break;case"value":this._animateOff=!0,this._refreshValue(),this._change(null,0),this._animateOff=!1;break;case"values":this._animateOff=!0,this._refreshValue();for(d=0;d<e;d+=1){this._change(null,d)}this._animateOff=!1}},_value:function(){var a=this.options.value;a=this._trimAlignValue(a);return a},_values:function(a){var b,c,d;if(arguments.length){b=this.options.values[a],b=this._trimAlignValue(b);return b}c=this.options.values.slice();for(d=0;d<c.length;d+=1){c[d]=this._trimAlignValue(c[d])}return c},_trimAlignValue:function(a){if(a<=this._valueMin()){return this._valueMin()}if(a>=this._valueMax()){return this._valueMax()}var b=this.options.step>0?this.options.step:1,c=(a-this._valueMin())%b,d=a-c;Math.abs(c)*2>=b&&(d+=c>0?b:-b);return parseFloat(d.toFixed(5))},_valueMin:function(){return this.options.min},_valueMax:function(){return this.options.max},_refreshValue:function(){var b=this.options.range,c=this.options,d=this,e=this._animateOff?!1:c.animate,f,g={},h,i,j,k;this.options.values&&this.options.values.length?this.handles.each(function(b,i){f=(d.values(b)-d._valueMin())/(d._valueMax()-d._valueMin())*100,g[d.orientation==="horizontal"?"left":"bottom"]=f+"%",a(this).stop(1,1)[e?"animate":"css"](g,c.animate),d.options.range===!0&&(d.orientation==="horizontal"?(b===0&&d.range.stop(1,1)[e?"animate":"css"]({left:f+"%"},c.animate),b===1&&d.range[e?"animate":"css"]({width:f-h+"%"},{queue:!1,duration:c.animate})):(b===0&&d.range.stop(1,1)[e?"animate":"css"]({bottom:f+"%"},c.animate),b===1&&d.range[e?"animate":"css"]({height:f-h+"%"},{queue:!1,duration:c.animate}))),h=f}):(i=this.value(),j=this._valueMin(),k=this._valueMax(),f=k!==j?(i-j)/(k-j)*100:0,g[d.orientation==="horizontal"?"left":"bottom"]=f+"%",this.handle.stop(1,1)[e?"animate":"css"](g,c.animate),b==="min"&&this.orientation==="horizontal"&&this.range.stop(1,1)[e?"animate":"css"]({width:f+"%"},c.animate),b==="max"&&this.orientation==="horizontal"&&this.range[e?"animate":"css"]({width:100-f+"%"},{queue:!1,duration:c.animate}),b==="min"&&this.orientation==="vertical"&&this.range.stop(1,1)[e?"animate":"css"]({height:f+"%"},c.animate),b==="max"&&this.orientation==="vertical"&&this.range[e?"animate":"css"]({height:100-f+"%"},{queue:!1,duration:c.animate}))}}),a.extend(a.ui.slider,{version:"1.8.18"})})(jQuery);
/*!
 * Select2 4.0.2 
 * https://select2.github.io
 *
 * Released under the MIT license
 * https://github.com/select2/select2/blob/master/LICENSE.md
 */
(function (factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['jquery'], factory);
  } else if (typeof exports === 'object') {
    // Node/CommonJS
    factory(require('jquery'));
  } else {
    // Browser globals
    factory(jQuery);
  }
}(function (jQuery) {
  // This is needed so we can catch the AMD loader configuration and use it
  // The inner file should be wrapped (by `banner.start.js`) in a function that
  // returns the AMD loader references.
  var S2 =
(function () {
  // Restore the Select2 AMD loader so it can be used
  // Needed mostly in the language files, where the loader is not inserted
  if (jQuery && jQuery.fn && jQuery.fn.select2 && jQuery.fn.select2.amd) {
    var S2 = jQuery.fn.select2.amd;
  }
var S2;(function () { if (!S2 || !S2.requirejs) {
if (!S2) { S2 = {}; } else { require = S2; }
/**
 * @license almond 0.3.1 Copyright (c) 2011-2014, The Dojo Foundation All Rights Reserved.
 * Available via the MIT or new BSD license.
 * see: http://github.com/jrburke/almond for details
 */
//Going sloppy to avoid 'use strict' string cost, but strict practices should
//be followed.
/*jslint sloppy: true */
/*global setTimeout: false */

var requirejs, require, define;
(function (undef) {
    var main, req, makeMap, handlers,
        defined = {},
        waiting = {},
        config = {},
        defining = {},
        hasOwn = Object.prototype.hasOwnProperty,
        aps = [].slice,
        jsSuffixRegExp = /\.js$/;

    function hasProp(obj, prop) {
        return hasOwn.call(obj, prop);
    }

    /**
     * Given a relative module name, like ./something, normalize it to
     * a real name that can be mapped to a path.
     * @param {String} name the relative name
     * @param {String} baseName a real name that the name arg is relative
     * to.
     * @returns {String} normalized name
     */
    function normalize(name, baseName) {
        var nameParts, nameSegment, mapValue, foundMap, lastIndex,
            foundI, foundStarMap, starI, i, j, part,
            baseParts = baseName && baseName.split("/"),
            map = config.map,
            starMap = (map && map['*']) || {};

        //Adjust any relative paths.
        if (name && name.charAt(0) === ".") {
            //If have a base name, try to normalize against it,
            //otherwise, assume it is a top-level require that will
            //be relative to baseUrl in the end.
            if (baseName) {
                name = name.split('/');
                lastIndex = name.length - 1;

                // Node .js allowance:
                if (config.nodeIdCompat && jsSuffixRegExp.test(name[lastIndex])) {
                    name[lastIndex] = name[lastIndex].replace(jsSuffixRegExp, '');
                }

                //Lop off the last part of baseParts, so that . matches the
                //"directory" and not name of the baseName's module. For instance,
                //baseName of "one/two/three", maps to "one/two/three.js", but we
                //want the directory, "one/two" for this normalization.
                name = baseParts.slice(0, baseParts.length - 1).concat(name);

                //start trimDots
                for (i = 0; i < name.length; i += 1) {
                    part = name[i];
                    if (part === ".") {
                        name.splice(i, 1);
                        i -= 1;
                    } else if (part === "..") {
                        if (i === 1 && (name[2] === '..' || name[0] === '..')) {
                            //End of the line. Keep at least one non-dot
                            //path segment at the front so it can be mapped
                            //correctly to disk. Otherwise, there is likely
                            //no path mapping for a path starting with '..'.
                            //This can still fail, but catches the most reasonable
                            //uses of ..
                            break;
                        } else if (i > 0) {
                            name.splice(i - 1, 2);
                            i -= 2;
                        }
                    }
                }
                //end trimDots

                name = name.join("/");
            } else if (name.indexOf('./') === 0) {
                // No baseName, so this is ID is resolved relative
                // to baseUrl, pull off the leading dot.
                name = name.substring(2);
            }
        }

        //Apply map config if available.
        if ((baseParts || starMap) && map) {
            nameParts = name.split('/');

            for (i = nameParts.length; i > 0; i -= 1) {
                nameSegment = nameParts.slice(0, i).join("/");

                if (baseParts) {
                    //Find the longest baseName segment match in the config.
                    //So, do joins on the biggest to smallest lengths of baseParts.
                    for (j = baseParts.length; j > 0; j -= 1) {
                        mapValue = map[baseParts.slice(0, j).join('/')];

                        //baseName segment has  config, find if it has one for
                        //this name.
                        if (mapValue) {
                            mapValue = mapValue[nameSegment];
                            if (mapValue) {
                                //Match, update name to the new value.
                                foundMap = mapValue;
                                foundI = i;
                                break;
                            }
                        }
                    }
                }

                if (foundMap) {
                    break;
                }

                //Check for a star map match, but just hold on to it,
                //if there is a shorter segment match later in a matching
                //config, then favor over this star map.
                if (!foundStarMap && starMap && starMap[nameSegment]) {
                    foundStarMap = starMap[nameSegment];
                    starI = i;
                }
            }

            if (!foundMap && foundStarMap) {
                foundMap = foundStarMap;
                foundI = starI;
            }

            if (foundMap) {
                nameParts.splice(0, foundI, foundMap);
                name = nameParts.join('/');
            }
        }

        return name;
    }

    function makeRequire(relName, forceSync) {
        return function () {
            //A version of a require function that passes a moduleName
            //value for items that may need to
            //look up paths relative to the moduleName
            var args = aps.call(arguments, 0);

            //If first arg is not require('string'), and there is only
            //one arg, it is the array form without a callback. Insert
            //a null so that the following concat is correct.
            if (typeof args[0] !== 'string' && args.length === 1) {
                args.push(null);
            }
            return req.apply(undef, args.concat([relName, forceSync]));
        };
    }

    function makeNormalize(relName) {
        return function (name) {
            return normalize(name, relName);
        };
    }

    function makeLoad(depName) {
        return function (value) {
            defined[depName] = value;
        };
    }

    function callDep(name) {
        if (hasProp(waiting, name)) {
            var args = waiting[name];
            delete waiting[name];
            defining[name] = true;
            main.apply(undef, args);
        }

        if (!hasProp(defined, name) && !hasProp(defining, name)) {
            throw new Error('No ' + name);
        }
        return defined[name];
    }

    //Turns a plugin!resource to [plugin, resource]
    //with the plugin being undefined if the name
    //did not have a plugin prefix.
    function splitPrefix(name) {
        var prefix,
            index = name ? name.indexOf('!') : -1;
        if (index > -1) {
            prefix = name.substring(0, index);
            name = name.substring(index + 1, name.length);
        }
        return [prefix, name];
    }

    /**
     * Makes a name map, normalizing the name, and using a plugin
     * for normalization if necessary. Grabs a ref to plugin
     * too, as an optimization.
     */
    makeMap = function (name, relName) {
        var plugin,
            parts = splitPrefix(name),
            prefix = parts[0];

        name = parts[1];

        if (prefix) {
            prefix = normalize(prefix, relName);
            plugin = callDep(prefix);
        }

        //Normalize according
        if (prefix) {
            if (plugin && plugin.normalize) {
                name = plugin.normalize(name, makeNormalize(relName));
            } else {
                name = normalize(name, relName);
            }
        } else {
            name = normalize(name, relName);
            parts = splitPrefix(name);
            prefix = parts[0];
            name = parts[1];
            if (prefix) {
                plugin = callDep(prefix);
            }
        }

        //Using ridiculous property names for space reasons
        return {
            f: prefix ? prefix + '!' + name : name, //fullName
            n: name,
            pr: prefix,
            p: plugin
        };
    };

    function makeConfig(name) {
        return function () {
            return (config && config.config && config.config[name]) || {};
        };
    }

    handlers = {
        require: function (name) {
            return makeRequire(name);
        },
        exports: function (name) {
            var e = defined[name];
            if (typeof e !== 'undefined') {
                return e;
            } else {
                return (defined[name] = {});
            }
        },
        module: function (name) {
            return {
                id: name,
                uri: '',
                exports: defined[name],
                config: makeConfig(name)
            };
        }
    };

    main = function (name, deps, callback, relName) {
        var cjsModule, depName, ret, map, i,
            args = [],
            callbackType = typeof callback,
            usingExports;

        //Use name if no relName
        relName = relName || name;

        //Call the callback to define the module, if necessary.
        if (callbackType === 'undefined' || callbackType === 'function') {
            //Pull out the defined dependencies and pass the ordered
            //values to the callback.
            //Default to [require, exports, module] if no deps
            deps = !deps.length && callback.length ? ['require', 'exports', 'module'] : deps;
            for (i = 0; i < deps.length; i += 1) {
                map = makeMap(deps[i], relName);
                depName = map.f;

                //Fast path CommonJS standard dependencies.
                if (depName === "require") {
                    args[i] = handlers.require(name);
                } else if (depName === "exports") {
                    //CommonJS module spec 1.1
                    args[i] = handlers.exports(name);
                    usingExports = true;
                } else if (depName === "module") {
                    //CommonJS module spec 1.1
                    cjsModule = args[i] = handlers.module(name);
                } else if (hasProp(defined, depName) ||
                           hasProp(waiting, depName) ||
                           hasProp(defining, depName)) {
                    args[i] = callDep(depName);
                } else if (map.p) {
                    map.p.load(map.n, makeRequire(relName, true), makeLoad(depName), {});
                    args[i] = defined[depName];
                } else {
                    throw new Error(name + ' missing ' + depName);
                }
            }

            ret = callback ? callback.apply(defined[name], args) : undefined;

            if (name) {
                //If setting exports via "module" is in play,
                //favor that over return value and exports. After that,
                //favor a non-undefined return value over exports use.
                if (cjsModule && cjsModule.exports !== undef &&
                        cjsModule.exports !== defined[name]) {
                    defined[name] = cjsModule.exports;
                } else if (ret !== undef || !usingExports) {
                    //Use the return value from the function.
                    defined[name] = ret;
                }
            }
        } else if (name) {
            //May just be an object definition for the module. Only
            //worry about defining if have a module name.
            defined[name] = callback;
        }
    };

    requirejs = require = req = function (deps, callback, relName, forceSync, alt) {
        if (typeof deps === "string") {
            if (handlers[deps]) {
                //callback in this case is really relName
                return handlers[deps](callback);
            }
            //Just return the module wanted. In this scenario, the
            //deps arg is the module name, and second arg (if passed)
            //is just the relName.
            //Normalize module name, if it contains . or ..
            return callDep(makeMap(deps, callback).f);
        } else if (!deps.splice) {
            //deps is a config object, not an array.
            config = deps;
            if (config.deps) {
                req(config.deps, config.callback);
            }
            if (!callback) {
                return;
            }

            if (callback.splice) {
                //callback is an array, which means it is a dependency list.
                //Adjust args if there are dependencies
                deps = callback;
                callback = relName;
                relName = null;
            } else {
                deps = undef;
            }
        }

        //Support require(['a'])
        callback = callback || function () {};

        //If relName is a function, it is an errback handler,
        //so remove it.
        if (typeof relName === 'function') {
            relName = forceSync;
            forceSync = alt;
        }

        //Simulate async callback;
        if (forceSync) {
            main(undef, deps, callback, relName);
        } else {
            //Using a non-zero value because of concern for what old browsers
            //do, and latest browsers "upgrade" to 4 if lower value is used:
            //http://www.whatwg.org/specs/web-apps/current-work/multipage/timers.html#dom-windowtimers-settimeout:
            //If want a value immediately, use require('id') instead -- something
            //that works in almond on the global level, but not guaranteed and
            //unlikely to work in other AMD implementations.
            setTimeout(function () {
                main(undef, deps, callback, relName);
            }, 4);
        }

        return req;
    };

    /**
     * Just drops the config on the floor, but returns req in case
     * the config return value is used.
     */
    req.config = function (cfg) {
        return req(cfg);
    };

    /**
     * Expose module registry for debugging and tooling
     */
    requirejs._defined = defined;

    define = function (name, deps, callback) {
        if (typeof name !== 'string') {
            throw new Error('See almond README: incorrect module build, no module name');
        }

        //This module may not have dependencies
        if (!deps.splice) {
            //deps is not an array, so probably means
            //an object literal or factory function for
            //the value. Adjust args.
            callback = deps;
            deps = [];
        }

        if (!hasProp(defined, name) && !hasProp(waiting, name)) {
            waiting[name] = [name, deps, callback];
        }
    };

    define.amd = {
        jQuery: true
    };
}());

S2.requirejs = requirejs;S2.require = require;S2.define = define;
}
}());
S2.define("almond", function(){});

/* global jQuery:false, $:false */
S2.define('jquery',[],function () {
  var _$ = jQuery || $;

  if (_$ == null && console && console.error) {
    console.error(
      'Select2: An instance of jQuery or a jQuery-compatible library was not ' +
      'found. Make sure that you are including jQuery before Select2 on your ' +
      'web page.'
    );
  }

  return _$;
});

S2.define('select2/utils',[
  'jquery'
], function ($) {
  var Utils = {};

  Utils.Extend = function (ChildClass, SuperClass) {
    var __hasProp = {}.hasOwnProperty;

    function BaseConstructor () {
      this.constructor = ChildClass;
    }

    for (var key in SuperClass) {
      if (__hasProp.call(SuperClass, key)) {
        ChildClass[key] = SuperClass[key];
      }
    }

    BaseConstructor.prototype = SuperClass.prototype;
    ChildClass.prototype = new BaseConstructor();
    ChildClass.__super__ = SuperClass.prototype;

    return ChildClass;
  };

  function getMethods (theClass) {
    var proto = theClass.prototype;

    var methods = [];

    for (var methodName in proto) {
      var m = proto[methodName];

      if (typeof m !== 'function') {
        continue;
      }

      if (methodName === 'constructor') {
        continue;
      }

      methods.push(methodName);
    }

    return methods;
  }

  Utils.Decorate = function (SuperClass, DecoratorClass) {
    var decoratedMethods = getMethods(DecoratorClass);
    var superMethods = getMethods(SuperClass);

    function DecoratedClass () {
      var unshift = Array.prototype.unshift;

      var argCount = DecoratorClass.prototype.constructor.length;

      var calledConstructor = SuperClass.prototype.constructor;

      if (argCount > 0) {
        unshift.call(arguments, SuperClass.prototype.constructor);

        calledConstructor = DecoratorClass.prototype.constructor;
      }

      calledConstructor.apply(this, arguments);
    }

    DecoratorClass.displayName = SuperClass.displayName;

    function ctr () {
      this.constructor = DecoratedClass;
    }

    DecoratedClass.prototype = new ctr();

    for (var m = 0; m < superMethods.length; m++) {
        var superMethod = superMethods[m];

        DecoratedClass.prototype[superMethod] =
          SuperClass.prototype[superMethod];
    }

    var calledMethod = function (methodName) {
      // Stub out the original method if it's not decorating an actual method
      var originalMethod = function () {};

      if (methodName in DecoratedClass.prototype) {
        originalMethod = DecoratedClass.prototype[methodName];
      }

      var decoratedMethod = DecoratorClass.prototype[methodName];

      return function () {
        var unshift = Array.prototype.unshift;

        unshift.call(arguments, originalMethod);

        return decoratedMethod.apply(this, arguments);
      };
    };

    for (var d = 0; d < decoratedMethods.length; d++) {
      var decoratedMethod = decoratedMethods[d];

      DecoratedClass.prototype[decoratedMethod] = calledMethod(decoratedMethod);
    }

    return DecoratedClass;
  };

  var Observable = function () {
    this.listeners = {};
  };

  Observable.prototype.on = function (event, callback) {
    this.listeners = this.listeners || {};

    if (event in this.listeners) {
      this.listeners[event].push(callback);
    } else {
      this.listeners[event] = [callback];
    }
  };

  Observable.prototype.trigger = function (event) {
    var slice = Array.prototype.slice;

    this.listeners = this.listeners || {};

    if (event in this.listeners) {
      this.invoke(this.listeners[event], slice.call(arguments, 1));
    }

    if ('*' in this.listeners) {
      this.invoke(this.listeners['*'], arguments);
    }
  };

  Observable.prototype.invoke = function (listeners, params) {
    for (var i = 0, len = listeners.length; i < len; i++) {
      listeners[i].apply(this, params);
    }
  };

  Utils.Observable = Observable;

  Utils.generateChars = function (length) {
    var chars = '';

    for (var i = 0; i < length; i++) {
      var randomChar = Math.floor(Math.random() * 36);
      chars += randomChar.toString(36);
    }

    return chars;
  };

  Utils.bind = function (func, context) {
    return function () {
      func.apply(context, arguments);
    };
  };

  Utils._convertData = function (data) {
    for (var originalKey in data) {
      var keys = originalKey.split('-');

      var dataLevel = data;

      if (keys.length === 1) {
        continue;
      }

      for (var k = 0; k < keys.length; k++) {
        var key = keys[k];

        // Lowercase the first letter
        // By default, dash-separated becomes camelCase
        key = key.substring(0, 1).toLowerCase() + key.substring(1);

        if (!(key in dataLevel)) {
          dataLevel[key] = {};
        }

        if (k == keys.length - 1) {
          dataLevel[key] = data[originalKey];
        }

        dataLevel = dataLevel[key];
      }

      delete data[originalKey];
    }

    return data;
  };

  Utils.hasScroll = function (index, el) {
    // Adapted from the function created by @ShadowScripter
    // and adapted by @BillBarry on the Stack Exchange Code Review website.
    // The original code can be found at
    // http://codereview.stackexchange.com/q/13338
    // and was designed to be used with the Sizzle selector engine.

    var $el = $(el);
    var overflowX = el.style.overflowX;
    var overflowY = el.style.overflowY;

    //Check both x and y declarations
    if (overflowX === overflowY &&
        (overflowY === 'hidden' || overflowY === 'visible')) {
      return false;
    }

    if (overflowX === 'scroll' || overflowY === 'scroll') {
      return true;
    }

    return ($el.innerHeight() < el.scrollHeight ||
      $el.innerWidth() < el.scrollWidth);
  };

  Utils.escapeMarkup = function (markup) {
    var replaceMap = {
      '\\': '&#92;',
      '&': '&amp;',
      '<': '&lt;',
      '>': '&gt;',
      '"': '&quot;',
      '\'': '&#39;',
      '/': '&#47;'
    };

    // Do not try to escape the markup if it's not a string
    if (typeof markup !== 'string') {
      return markup;
    }

    return String(markup).replace(/[&<>"'\/\\]/g, function (match) {
      return replaceMap[match];
    });
  };

  // Append an array of jQuery nodes to a given element.
  Utils.appendMany = function ($element, $nodes) {
    // jQuery 1.7.x does not support $.fn.append() with an array
    // Fall back to a jQuery object collection using $.fn.add()
    if ($.fn.jquery.substr(0, 3) === '1.7') {
      var $jqNodes = $();

      $.map($nodes, function (node) {
        $jqNodes = $jqNodes.add(node);
      });

      $nodes = $jqNodes;
    }

    $element.append($nodes);
  };

  return Utils;
});

S2.define('select2/results',[
  'jquery',
  './utils'
], function ($, Utils) {
  function Results ($element, options, dataAdapter) {
    this.$element = $element;
    this.data = dataAdapter;
    this.options = options;

    Results.__super__.constructor.call(this);
  }

  Utils.Extend(Results, Utils.Observable);

  Results.prototype.render = function () {
    var $results = $(
      '<ul class="select2-results__options" role="tree"></ul>'
    );

    if (this.options.get('multiple')) {
      $results.attr('aria-multiselectable', 'true');
    }

    this.$results = $results;

    return $results;
  };

  Results.prototype.clear = function () {
    this.$results.empty();
  };

  Results.prototype.displayMessage = function (params) {
    var escapeMarkup = this.options.get('escapeMarkup');

    this.clear();
    this.hideLoading();

    var $message = $(
      '<li role="treeitem" aria-live="assertive"' +
      ' class="select2-results__option"></li>'
    );

    var message = this.options.get('translations').get(params.message);

    $message.append(
      escapeMarkup(
        message(params.args)
      )
    );

    $message[0].className += ' select2-results__message';

    this.$results.append($message);
  };

  Results.prototype.hideMessages = function () {
    this.$results.find('.select2-results__message').remove();
  };

  Results.prototype.append = function (data) {
    this.hideLoading();

    var $options = [];

    if (data.results == null || data.results.length === 0) {
      if (this.$results.children().length === 0) {
        this.trigger('results:message', {
          message: 'noResults'
        });
      }

      return;
    }

    data.results = this.sort(data.results);

    for (var d = 0; d < data.results.length; d++) {
      var item = data.results[d];

      var $option = this.option(item);

      $options.push($option);
    }

    this.$results.append($options);
  };

  Results.prototype.position = function ($results, $dropdown) {
    var $resultsContainer = $dropdown.find('.select2-results');
    $resultsContainer.append($results);
  };

  Results.prototype.sort = function (data) {
    var sorter = this.options.get('sorter');

    return sorter(data);
  };

  Results.prototype.setClasses = function () {
    var self = this;

    this.data.current(function (selected) {
      var selectedIds = $.map(selected, function (s) {
        return s.id.toString();
      });

      var $options = self.$results
        .find('.select2-results__option[aria-selected]');

      $options.each(function () {
        var $option = $(this);

        var item = $.data(this, 'data');

        // id needs to be converted to a string when comparing
        var id = '' + item.id;

        if ((item.element != null && item.element.selected) ||
            (item.element == null && $.inArray(id, selectedIds) > -1)) {
          $option.attr('aria-selected', 'true');
        } else {
          $option.attr('aria-selected', 'false');
        }
      });

      var $selected = $options.filter('[aria-selected=true]');

      // Check if there are any selected options
      if ($selected.length > 0) {
        // If there are selected options, highlight the first
        $selected.first().trigger('mouseenter');
      } else {
        // If there are no selected options, highlight the first option
        // in the dropdown
        $options.first().trigger('mouseenter');
      }
    });
  };

  Results.prototype.showLoading = function (params) {
    this.hideLoading();

    var loadingMore = this.options.get('translations').get('searching');

    var loading = {
      disabled: true,
      loading: true,
      text: loadingMore(params)
    };
    var $loading = this.option(loading);
    $loading.className += ' loading-results';

    this.$results.prepend($loading);
  };

  Results.prototype.hideLoading = function () {
    this.$results.find('.loading-results').remove();
  };

  Results.prototype.option = function (data) {
    var option = document.createElement('li');
    option.className = 'select2-results__option';

    var attrs = {
      'role': 'treeitem',
      'aria-selected': 'false'
    };

    if (data.disabled) {
      delete attrs['aria-selected'];
      attrs['aria-disabled'] = 'true';
    }

    if (data.id == null) {
      delete attrs['aria-selected'];
    }

    if (data._resultId != null) {
      option.id = data._resultId;
    }

    if (data.title) {
      option.title = data.title;
    }

    if (data.children) {
      attrs.role = 'group';
      attrs['aria-label'] = data.text;
      delete attrs['aria-selected'];
    }

    for (var attr in attrs) {
      var val = attrs[attr];

      option.setAttribute(attr, val);
    }

    if (data.children) {
      var $option = $(option);

      var label = document.createElement('strong');
      label.className = 'select2-results__group';

      var $label = $(label);
      this.template(data, label);

      var $children = [];

      for (var c = 0; c < data.children.length; c++) {
        var child = data.children[c];

        var $child = this.option(child);

        $children.push($child);
      }

      var $childrenContainer = $('<ul></ul>', {
        'class': 'select2-results__options select2-results__options--nested'
      });

      $childrenContainer.append($children);

      $option.append(label);
      $option.append($childrenContainer);
    } else {
      this.template(data, option);
    }

    $.data(option, 'data', data);

    return option;
  };

  Results.prototype.bind = function (container, $container) {
    var self = this;

    var id = container.id + '-results';

    this.$results.attr('id', id);

    container.on('results:all', function (params) {
      self.clear();
      self.append(params.data);

      if (container.isOpen()) {
        self.setClasses();
      }
    });

    container.on('results:append', function (params) {
      self.append(params.data);

      if (container.isOpen()) {
        self.setClasses();
      }
    });

    container.on('query', function (params) {
      self.hideMessages();
      self.showLoading(params);
    });

    container.on('select', function () {
      if (!container.isOpen()) {
        return;
      }

      self.setClasses();
    });

    container.on('unselect', function () {
      if (!container.isOpen()) {
        return;
      }

      self.setClasses();
    });

    container.on('open', function () {
      // When the dropdown is open, aria-expended="true"
      self.$results.attr('aria-expanded', 'true');
      self.$results.attr('aria-hidden', 'false');

      self.setClasses();
      self.ensureHighlightVisible();
    });

    container.on('close', function () {
      // When the dropdown is closed, aria-expended="false"
      self.$results.attr('aria-expanded', 'false');
      self.$results.attr('aria-hidden', 'true');
      self.$results.removeAttr('aria-activedescendant');
    });

    container.on('results:toggle', function () {
      var $highlighted = self.getHighlightedResults();

      if ($highlighted.length === 0) {
        return;
      }

      $highlighted.trigger('mouseup');
    });

    container.on('results:select', function () {
      var $highlighted = self.getHighlightedResults();

      if ($highlighted.length === 0) {
        return;
      }

      var data = $highlighted.data('data');

      if ($highlighted.attr('aria-selected') == 'true') {
        self.trigger('close', {});
      } else {
        self.trigger('select', {
          data: data
        });
      }
    });

    container.on('results:previous', function () {
      var $highlighted = self.getHighlightedResults();

      var $options = self.$results.find('[aria-selected]');

      var currentIndex = $options.index($highlighted);

      // If we are already at te top, don't move further
      if (currentIndex === 0) {
        return;
      }

      var nextIndex = currentIndex - 1;

      // If none are highlighted, highlight the first
      if ($highlighted.length === 0) {
        nextIndex = 0;
      }

      var $next = $options.eq(nextIndex);

      $next.trigger('mouseenter');

      var currentOffset = self.$results.offset().top;
      var nextTop = $next.offset().top;
      var nextOffset = self.$results.scrollTop() + (nextTop - currentOffset);

      if (nextIndex === 0) {
        self.$results.scrollTop(0);
      } else if (nextTop - currentOffset < 0) {
        self.$results.scrollTop(nextOffset);
      }
    });

    container.on('results:next', function () {
      var $highlighted = self.getHighlightedResults();

      var $options = self.$results.find('[aria-selected]');

      var currentIndex = $options.index($highlighted);

      var nextIndex = currentIndex + 1;

      // If we are at the last option, stay there
      if (nextIndex >= $options.length) {
        return;
      }

      var $next = $options.eq(nextIndex);

      $next.trigger('mouseenter');

      var currentOffset = self.$results.offset().top +
        self.$results.outerHeight(false);
      var nextBottom = $next.offset().top + $next.outerHeight(false);
      var nextOffset = self.$results.scrollTop() + nextBottom - currentOffset;

      if (nextIndex === 0) {
        self.$results.scrollTop(0);
      } else if (nextBottom > currentOffset) {
        self.$results.scrollTop(nextOffset);
      }
    });

    container.on('results:focus', function (params) {
      params.element.addClass('select2-results__option--highlighted');
    });

    container.on('results:message', function (params) {
      self.displayMessage(params);
    });

    if ($.fn.mousewheel) {
      this.$results.on('mousewheel', function (e) {
        var top = self.$results.scrollTop();

        var bottom = self.$results.get(0).scrollHeight - top + e.deltaY;

        var isAtTop = e.deltaY > 0 && top - e.deltaY <= 0;
        var isAtBottom = e.deltaY < 0 && bottom <= self.$results.height();

        if (isAtTop) {
          self.$results.scrollTop(0);

          e.preventDefault();
          e.stopPropagation();
        } else if (isAtBottom) {
          self.$results.scrollTop(
            self.$results.get(0).scrollHeight - self.$results.height()
          );

          e.preventDefault();
          e.stopPropagation();
        }
      });
    }

    this.$results.on('mouseup', '.select2-results__option[aria-selected]',
      function (evt) {
      var $this = $(this);

      var data = $this.data('data');

      if ($this.attr('aria-selected') === 'true') {
        if (self.options.get('multiple')) {
          self.trigger('unselect', {
            originalEvent: evt,
            data: data
          });
        } else {
          self.trigger('close', {});
        }

        return;
      }

      self.trigger('select', {
        originalEvent: evt,
        data: data
      });
    });

    this.$results.on('mouseenter', '.select2-results__option[aria-selected]',
      function (evt) {
      var data = $(this).data('data');

      self.getHighlightedResults()
          .removeClass('select2-results__option--highlighted');

      self.trigger('results:focus', {
        data: data,
        element: $(this)
      });
    });
  };

  Results.prototype.getHighlightedResults = function () {
    var $highlighted = this.$results
    .find('.select2-results__option--highlighted');

    return $highlighted;
  };

  Results.prototype.destroy = function () {
    this.$results.remove();
  };

  Results.prototype.ensureHighlightVisible = function () {
    var $highlighted = this.getHighlightedResults();

    if ($highlighted.length === 0) {
      return;
    }

    var $options = this.$results.find('[aria-selected]');

    var currentIndex = $options.index($highlighted);

    var currentOffset = this.$results.offset().top;
    var nextTop = $highlighted.offset().top;
    var nextOffset = this.$results.scrollTop() + (nextTop - currentOffset);

    var offsetDelta = nextTop - currentOffset;
    nextOffset -= $highlighted.outerHeight(false) * 2;

    if (currentIndex <= 2) {
      this.$results.scrollTop(0);
    } else if (offsetDelta > this.$results.outerHeight() || offsetDelta < 0) {
      this.$results.scrollTop(nextOffset);
    }
  };

  Results.prototype.template = function (result, container) {
    var template = this.options.get('templateResult');
    var escapeMarkup = this.options.get('escapeMarkup');

    var content = template(result, container);

    if (content == null) {
      container.style.display = 'none';
    } else if (typeof content === 'string') {
      container.innerHTML = escapeMarkup(content);
    } else {
      $(container).append(content);
    }
  };

  return Results;
});

S2.define('select2/keys',[

], function () {
  var KEYS = {
    BACKSPACE: 8,
    TAB: 9,
    ENTER: 13,
    SHIFT: 16,
    CTRL: 17,
    ALT: 18,
    ESC: 27,
    SPACE: 32,
    PAGE_UP: 33,
    PAGE_DOWN: 34,
    END: 35,
    HOME: 36,
    LEFT: 37,
    UP: 38,
    RIGHT: 39,
    DOWN: 40,
    DELETE: 46
  };

  return KEYS;
});

S2.define('select2/selection/base',[
  'jquery',
  '../utils',
  '../keys'
], function ($, Utils, KEYS) {
  function BaseSelection ($element, options) {
    this.$element = $element;
    this.options = options;

    BaseSelection.__super__.constructor.call(this);
  }

  Utils.Extend(BaseSelection, Utils.Observable);

  BaseSelection.prototype.render = function () {
    var $selection = $(
      '<span class="select2-selection" role="combobox" ' +
      ' aria-haspopup="true" aria-expanded="false">' +
      '</span>'
    );

    this._tabindex = 0;

    if (this.$element.data('old-tabindex') != null) {
      this._tabindex = this.$element.data('old-tabindex');
    } else if (this.$element.attr('tabindex') != null) {
      this._tabindex = this.$element.attr('tabindex');
    }

    $selection.attr('title', this.$element.attr('title'));
    $selection.attr('tabindex', this._tabindex);

    this.$selection = $selection;

    return $selection;
  };

  BaseSelection.prototype.bind = function (container, $container) {
    var self = this;

    var id = container.id + '-container';
    var resultsId = container.id + '-results';

    this.container = container;

    this.$selection.on('focus', function (evt) {
      self.trigger('focus', evt);
    });

    this.$selection.on('blur', function (evt) {
      self._handleBlur(evt);
    });

    this.$selection.on('keydown', function (evt) {
      self.trigger('keypress', evt);

      if (evt.which === KEYS.SPACE) {
        evt.preventDefault();
      }
    });

    container.on('results:focus', function (params) {
      self.$selection.attr('aria-activedescendant', params.data._resultId);
    });

    container.on('selection:update', function (params) {
      self.update(params.data);
    });

    container.on('open', function () {
      // When the dropdown is open, aria-expanded="true"
      self.$selection.attr('aria-expanded', 'true');
      self.$selection.attr('aria-owns', resultsId);

      self._attachCloseHandler(container);
    });

    container.on('close', function () {
      // When the dropdown is closed, aria-expanded="false"
      self.$selection.attr('aria-expanded', 'false');
      self.$selection.removeAttr('aria-activedescendant');
      self.$selection.removeAttr('aria-owns');

      self.$selection.focus();

      self._detachCloseHandler(container);
    });

    container.on('enable', function () {
      self.$selection.attr('tabindex', self._tabindex);
    });

    container.on('disable', function () {
      self.$selection.attr('tabindex', '-1');
    });
  };

  BaseSelection.prototype._handleBlur = function (evt) {
    var self = this;

    // This needs to be delayed as the active element is the body when the tab
    // key is pressed, possibly along with others.
    window.setTimeout(function () {
      // Don't trigger `blur` if the focus is still in the selection
      if (
        (document.activeElement == self.$selection[0]) ||
        ($.contains(self.$selection[0], document.activeElement))
      ) {
        return;
      }

      self.trigger('blur', evt);
    }, 1);
  };

  BaseSelection.prototype._attachCloseHandler = function (container) {
    var self = this;

    $(document.body).on('mousedown.select2.' + container.id, function (e) {
      var $target = $(e.target);

      var $select = $target.closest('.select2');

      var $all = $('.select2.select2-container--open');

      $all.each(function () {
        var $this = $(this);

        if (this == $select[0]) {
          return;
        }

        var $element = $this.data('element');

        $element.select2('close');
      });
    });
  };

  BaseSelection.prototype._detachCloseHandler = function (container) {
    $(document.body).off('mousedown.select2.' + container.id);
  };

  BaseSelection.prototype.position = function ($selection, $container) {
    var $selectionContainer = $container.find('.selection');
    $selectionContainer.append($selection);
  };

  BaseSelection.prototype.destroy = function () {
    this._detachCloseHandler(this.container);
  };

  BaseSelection.prototype.update = function (data) {
    throw new Error('The `update` method must be defined in child classes.');
  };

  return BaseSelection;
});

S2.define('select2/selection/single',[
  'jquery',
  './base',
  '../utils',
  '../keys'
], function ($, BaseSelection, Utils, KEYS) {
  function SingleSelection () {
    SingleSelection.__super__.constructor.apply(this, arguments);
  }

  Utils.Extend(SingleSelection, BaseSelection);

  SingleSelection.prototype.render = function () {
    var $selection = SingleSelection.__super__.render.call(this);

    $selection.addClass('select2-selection--single');

    $selection.html(
      '<span class="select2-selection__rendered"></span>' +
      '<span class="select2-selection__arrow" role="presentation">' +
        '<b role="presentation"></b>' +
      '</span>'
    );

    return $selection;
  };

  SingleSelection.prototype.bind = function (container, $container) {
    var self = this;

    SingleSelection.__super__.bind.apply(this, arguments);

    var id = container.id + '-container';

    this.$selection.find('.select2-selection__rendered').attr('id', id);
    this.$selection.attr('aria-labelledby', id);

    this.$selection.on('mousedown', function (evt) {
      // Only respond to left clicks
      if (evt.which !== 1) {
        return;
      }

      self.trigger('toggle', {
        originalEvent: evt
      });
    });

    this.$selection.on('focus', function (evt) {
      // User focuses on the container
    });

    this.$selection.on('blur', function (evt) {
      // User exits the container
    });

    container.on('selection:update', function (params) {
      self.update(params.data);
    });
  };

  SingleSelection.prototype.clear = function () {
    this.$selection.find('.select2-selection__rendered').empty();
  };

  SingleSelection.prototype.display = function (data, container) {
    var template = this.options.get('templateSelection');
    var escapeMarkup = this.options.get('escapeMarkup');

    return escapeMarkup(template(data, container));
  };

  SingleSelection.prototype.selectionContainer = function () {
    return $('<span></span>');
  };

  SingleSelection.prototype.update = function (data) {
    if (data.length === 0) {
      this.clear();
      return;
    }

    var selection = data[0];

    var $rendered = this.$selection.find('.select2-selection__rendered');
    var formatted = this.display(selection, $rendered);

    $rendered.empty().append(formatted);
    $rendered.prop('title', selection.title || selection.text);
  };

  return SingleSelection;
});

S2.define('select2/selection/multiple',[
  'jquery',
  './base',
  '../utils'
], function ($, BaseSelection, Utils) {
  function MultipleSelection ($element, options) {
    MultipleSelection.__super__.constructor.apply(this, arguments);
  }

  Utils.Extend(MultipleSelection, BaseSelection);

  MultipleSelection.prototype.render = function () {
    var $selection = MultipleSelection.__super__.render.call(this);

    $selection.addClass('select2-selection--multiple');

    $selection.html(
      '<ul class="select2-selection__rendered"></ul>'
    );

    return $selection;
  };

  MultipleSelection.prototype.bind = function (container, $container) {
    var self = this;

    MultipleSelection.__super__.bind.apply(this, arguments);

    this.$selection.on('click', function (evt) {
      self.trigger('toggle', {
        originalEvent: evt
      });
    });

    this.$selection.on(
      'click',
      '.select2-selection__choice__remove',
      function (evt) {
        // Ignore the event if it is disabled
        if (self.options.get('disabled')) {
          return;
        }

        var $remove = $(this);
        var $selection = $remove.parent();

        var data = $selection.data('data');

        self.trigger('unselect', {
          originalEvent: evt,
          data: data
        });
      }
    );
  };

  MultipleSelection.prototype.clear = function () {
    this.$selection.find('.select2-selection__rendered').empty();
  };

  MultipleSelection.prototype.display = function (data, container) {
    var template = this.options.get('templateSelection');
    var escapeMarkup = this.options.get('escapeMarkup');

    return escapeMarkup(template(data, container));
  };

  MultipleSelection.prototype.selectionContainer = function () {
    var $container = $(
      '<li class="select2-selection__choice">' +
        '<span class="select2-selection__choice__remove" role="presentation">' +
          '&times;' +
        '</span>' +
      '</li>'
    );

    return $container;
  };

  MultipleSelection.prototype.update = function (data) {
    this.clear();

    if (data.length === 0) {
      return;
    }

    var $selections = [];

    for (var d = 0; d < data.length; d++) {
      var selection = data[d];

      var $selection = this.selectionContainer();
      var formatted = this.display(selection, $selection);

      $selection.append(formatted);
      $selection.prop('title', selection.title || selection.text);

      $selection.data('data', selection);

      $selections.push($selection);
    }

    var $rendered = this.$selection.find('.select2-selection__rendered');

    Utils.appendMany($rendered, $selections);
  };

  return MultipleSelection;
});

S2.define('select2/selection/placeholder',[
  '../utils'
], function (Utils) {
  function Placeholder (decorated, $element, options) {
    this.placeholder = this.normalizePlaceholder(options.get('placeholder'));

    decorated.call(this, $element, options);
  }

  Placeholder.prototype.normalizePlaceholder = function (_, placeholder) {
    if (typeof placeholder === 'string') {
      placeholder = {
        id: '',
        text: placeholder
      };
    }

    return placeholder;
  };

  Placeholder.prototype.createPlaceholder = function (decorated, placeholder) {
    var $placeholder = this.selectionContainer();

    $placeholder.html(this.display(placeholder));
    $placeholder.addClass('select2-selection__placeholder')
                .removeClass('select2-selection__choice');

    return $placeholder;
  };

  Placeholder.prototype.update = function (decorated, data) {
    var singlePlaceholder = (
      data.length == 1 && data[0].id != this.placeholder.id
    );
    var multipleSelections = data.length > 1;

    if (multipleSelections || singlePlaceholder) {
      return decorated.call(this, data);
    }

    this.clear();

    var $placeholder = this.createPlaceholder(this.placeholder);

    this.$selection.find('.select2-selection__rendered').append($placeholder);
  };

  return Placeholder;
});

S2.define('select2/selection/allowClear',[
  'jquery',
  '../keys'
], function ($, KEYS) {
  function AllowClear () { }

  AllowClear.prototype.bind = function (decorated, container, $container) {
    var self = this;

    decorated.call(this, container, $container);

    if (this.placeholder == null) {
      if (this.options.get('debug') && window.console && console.error) {
        console.error(
          'Select2: The `allowClear` option should be used in combination ' +
          'with the `placeholder` option.'
        );
      }
    }

    this.$selection.on('mousedown', '.select2-selection__clear',
      function (evt) {
        self._handleClear(evt);
    });

    container.on('keypress', function (evt) {
      self._handleKeyboardClear(evt, container);
    });
  };

  AllowClear.prototype._handleClear = function (_, evt) {
    // Ignore the event if it is disabled
    if (this.options.get('disabled')) {
      return;
    }

    var $clear = this.$selection.find('.select2-selection__clear');

    // Ignore the event if nothing has been selected
    if ($clear.length === 0) {
      return;
    }

    evt.stopPropagation();

    var data = $clear.data('data');

    for (var d = 0; d < data.length; d++) {
      var unselectData = {
        data: data[d]
      };

      // Trigger the `unselect` event, so people can prevent it from being
      // cleared.
      this.trigger('unselect', unselectData);

      // If the event was prevented, don't clear it out.
      if (unselectData.prevented) {
        return;
      }
    }

    this.$element.val(this.placeholder.id).trigger('change');

    this.trigger('toggle', {});
  };

  AllowClear.prototype._handleKeyboardClear = function (_, evt, container) {
    if (container.isOpen()) {
      return;
    }

    if (evt.which == KEYS.DELETE || evt.which == KEYS.BACKSPACE) {
      this._handleClear(evt);
    }
  };

  AllowClear.prototype.update = function (decorated, data) {
    decorated.call(this, data);

    if (this.$selection.find('.select2-selection__placeholder').length > 0 ||
        data.length === 0) {
      return;
    }

    var $remove = $(
      '<span class="select2-selection__clear">' +
        '&times;' +
      '</span>'
    );
    $remove.data('data', data);

    this.$selection.find('.select2-selection__rendered').prepend($remove);
  };

  return AllowClear;
});

S2.define('select2/selection/search',[
  'jquery',
  '../utils',
  '../keys'
], function ($, Utils, KEYS) {
  function Search (decorated, $element, options) {
    decorated.call(this, $element, options);
  }

  Search.prototype.render = function (decorated) {
    var $search = $(
      '<li class="select2-search select2-search--inline">' +
        '<input class="select2-search__field" type="search" tabindex="-1"' +
        ' autocomplete="off" autocorrect="off" autocapitalize="off"' +
        ' spellcheck="false" role="textbox" aria-autocomplete="list" />' +
      '</li>'
    );

    this.$searchContainer = $search;
    this.$search = $search.find('input');

    var $rendered = decorated.call(this);

    this._transferTabIndex();

    return $rendered;
  };

  Search.prototype.bind = function (decorated, container, $container) {
    var self = this;

    decorated.call(this, container, $container);

    container.on('open', function () {
      self.$search.trigger('focus');
    });

    container.on('close', function () {
      self.$search.val('');
      self.$search.removeAttr('aria-activedescendant');
      self.$search.trigger('focus');
    });

    container.on('enable', function () {
      self.$search.prop('disabled', false);

      self._transferTabIndex();
    });

    container.on('disable', function () {
      self.$search.prop('disabled', true);
    });

    container.on('focus', function (evt) {
      self.$search.trigger('focus');
    });

    container.on('results:focus', function (params) {
      self.$search.attr('aria-activedescendant', params.id);
    });

    this.$selection.on('focusin', '.select2-search--inline', function (evt) {
      self.trigger('focus', evt);
    });

    this.$selection.on('focusout', '.select2-search--inline', function (evt) {
      self._handleBlur(evt);
    });

    this.$selection.on('keydown', '.select2-search--inline', function (evt) {
      evt.stopPropagation();

      self.trigger('keypress', evt);

      self._keyUpPrevented = evt.isDefaultPrevented();

      var key = evt.which;

      if (key === KEYS.BACKSPACE && self.$search.val() === '') {
        var $previousChoice = self.$searchContainer
          .prev('.select2-selection__choice');

        if ($previousChoice.length > 0) {
          var item = $previousChoice.data('data');

          self.searchRemoveChoice(item);

          evt.preventDefault();
        }
      }
    });

    // Try to detect the IE version should the `documentMode` property that
    // is stored on the document. This is only implemented in IE and is
    // slightly cleaner than doing a user agent check.
    // This property is not available in Edge, but Edge also doesn't have
    // this bug.
    var msie = document.documentMode;
    var disableInputEvents = msie && msie <= 11;

    // Workaround for browsers which do not support the `input` event
    // This will prevent double-triggering of events for browsers which support
    // both the `keyup` and `input` events.
    this.$selection.on(
      'input.searchcheck',
      '.select2-search--inline',
      function (evt) {
        // IE will trigger the `input` event when a placeholder is used on a
        // search box. To get around this issue, we are forced to ignore all
        // `input` events in IE and keep using `keyup`.
        if (disableInputEvents) {
          self.$selection.off('input.search input.searchcheck');
          return;
        }

        // Unbind the duplicated `keyup` event
        self.$selection.off('keyup.search');
      }
    );

    this.$selection.on(
      'keyup.search input.search',
      '.select2-search--inline',
      function (evt) {
        // IE will trigger the `input` event when a placeholder is used on a
        // search box. To get around this issue, we are forced to ignore all
        // `input` events in IE and keep using `keyup`.
        if (disableInputEvents && evt.type === 'input') {
          self.$selection.off('input.search input.searchcheck');
          return;
        }

        var key = evt.which;

        // We can freely ignore events from modifier keys
        if (key == KEYS.SHIFT || key == KEYS.CTRL || key == KEYS.ALT) {
          return;
        }

        // Tabbing will be handled during the `keydown` phase
        if (key == KEYS.TAB) {
          return;
        }

        self.handleSearch(evt);
      }
    );
  };

  /**
   * This method will transfer the tabindex attribute from the rendered
   * selection to the search box. This allows for the search box to be used as
   * the primary focus instead of the selection container.
   *
   * @private
   */
  Search.prototype._transferTabIndex = function (decorated) {
    this.$search.attr('tabindex', this.$selection.attr('tabindex'));
    this.$selection.attr('tabindex', '-1');
  };

  Search.prototype.createPlaceholder = function (decorated, placeholder) {
    this.$search.attr('placeholder', placeholder.text);
  };

  Search.prototype.update = function (decorated, data) {
    var searchHadFocus = this.$search[0] == document.activeElement;

    this.$search.attr('placeholder', '');

    decorated.call(this, data);

    this.$selection.find('.select2-selection__rendered')
                   .append(this.$searchContainer);

    this.resizeSearch();
    if (searchHadFocus) {
      this.$search.focus();
    }
  };

  Search.prototype.handleSearch = function () {
    this.resizeSearch();

    if (!this._keyUpPrevented) {
      var input = this.$search.val();

      this.trigger('query', {
        term: input
      });
    }

    this._keyUpPrevented = false;
  };

  Search.prototype.searchRemoveChoice = function (decorated, item) {
    this.trigger('unselect', {
      data: item
    });

    this.$search.val(item.text);
    this.handleSearch();
  };

  Search.prototype.resizeSearch = function () {
    this.$search.css('width', '25px');

    var width = '';

    if (this.$search.attr('placeholder') !== '') {
      width = this.$selection.find('.select2-selection__rendered').innerWidth();
    } else {
      var minimumWidth = this.$search.val().length + 1;

      width = (minimumWidth * 0.75) + 'em';
    }

    this.$search.css('width', width);
  };

  return Search;
});

S2.define('select2/selection/eventRelay',[
  'jquery'
], function ($) {
  function EventRelay () { }

  EventRelay.prototype.bind = function (decorated, container, $container) {
    var self = this;
    var relayEvents = [
      'open', 'opening',
      'close', 'closing',
      'select', 'selecting',
      'unselect', 'unselecting'
    ];

    var preventableEvents = ['opening', 'closing', 'selecting', 'unselecting'];

    decorated.call(this, container, $container);

    container.on('*', function (name, params) {
      // Ignore events that should not be relayed
      if ($.inArray(name, relayEvents) === -1) {
        return;
      }

      // The parameters should always be an object
      params = params || {};

      // Generate the jQuery event for the Select2 event
      var evt = $.Event('select2:' + name, {
        params: params
      });

      self.$element.trigger(evt);

      // Only handle preventable events if it was one
      if ($.inArray(name, preventableEvents) === -1) {
        return;
      }

      params.prevented = evt.isDefaultPrevented();
    });
  };

  return EventRelay;
});

S2.define('select2/translation',[
  'jquery',
  'require'
], function ($, require) {
  function Translation (dict) {
    this.dict = dict || {};
  }

  Translation.prototype.all = function () {
    return this.dict;
  };

  Translation.prototype.get = function (key) {
    return this.dict[key];
  };

  Translation.prototype.extend = function (translation) {
    this.dict = $.extend({}, translation.all(), this.dict);
  };

  // Static functions

  Translation._cache = {};

  Translation.loadPath = function (path) {
    if (!(path in Translation._cache)) {
      var translations = require(path);

      Translation._cache[path] = translations;
    }

    return new Translation(Translation._cache[path]);
  };

  return Translation;
});

S2.define('select2/diacritics',[

], function () {
  var diacritics = {
    '\u24B6': 'A',
    '\uFF21': 'A',
    '\u00C0': 'A',
    '\u00C1': 'A',
    '\u00C2': 'A',
    '\u1EA6': 'A',
    '\u1EA4': 'A',
    '\u1EAA': 'A',
    '\u1EA8': 'A',
    '\u00C3': 'A',
    '\u0100': 'A',
    '\u0102': 'A',
    '\u1EB0': 'A',
    '\u1EAE': 'A',
    '\u1EB4': 'A',
    '\u1EB2': 'A',
    '\u0226': 'A',
    '\u01E0': 'A',
    '\u00C4': 'A',
    '\u01DE': 'A',
    '\u1EA2': 'A',
    '\u00C5': 'A',
    '\u01FA': 'A',
    '\u01CD': 'A',
    '\u0200': 'A',
    '\u0202': 'A',
    '\u1EA0': 'A',
    '\u1EAC': 'A',
    '\u1EB6': 'A',
    '\u1E00': 'A',
    '\u0104': 'A',
    '\u023A': 'A',
    '\u2C6F': 'A',
    '\uA732': 'AA',
    '\u00C6': 'AE',
    '\u01FC': 'AE',
    '\u01E2': 'AE',
    '\uA734': 'AO',
    '\uA736': 'AU',
    '\uA738': 'AV',
    '\uA73A': 'AV',
    '\uA73C': 'AY',
    '\u24B7': 'B',
    '\uFF22': 'B',
    '\u1E02': 'B',
    '\u1E04': 'B',
    '\u1E06': 'B',
    '\u0243': 'B',
    '\u0182': 'B',
    '\u0181': 'B',
    '\u24B8': 'C',
    '\uFF23': 'C',
    '\u0106': 'C',
    '\u0108': 'C',
    '\u010A': 'C',
    '\u010C': 'C',
    '\u00C7': 'C',
    '\u1E08': 'C',
    '\u0187': 'C',
    '\u023B': 'C',
    '\uA73E': 'C',
    '\u24B9': 'D',
    '\uFF24': 'D',
    '\u1E0A': 'D',
    '\u010E': 'D',
    '\u1E0C': 'D',
    '\u1E10': 'D',
    '\u1E12': 'D',
    '\u1E0E': 'D',
    '\u0110': 'D',
    '\u018B': 'D',
    '\u018A': 'D',
    '\u0189': 'D',
    '\uA779': 'D',
    '\u01F1': 'DZ',
    '\u01C4': 'DZ',
    '\u01F2': 'Dz',
    '\u01C5': 'Dz',
    '\u24BA': 'E',
    '\uFF25': 'E',
    '\u00C8': 'E',
    '\u00C9': 'E',
    '\u00CA': 'E',
    '\u1EC0': 'E',
    '\u1EBE': 'E',
    '\u1EC4': 'E',
    '\u1EC2': 'E',
    '\u1EBC': 'E',
    '\u0112': 'E',
    '\u1E14': 'E',
    '\u1E16': 'E',
    '\u0114': 'E',
    '\u0116': 'E',
    '\u00CB': 'E',
    '\u1EBA': 'E',
    '\u011A': 'E',
    '\u0204': 'E',
    '\u0206': 'E',
    '\u1EB8': 'E',
    '\u1EC6': 'E',
    '\u0228': 'E',
    '\u1E1C': 'E',
    '\u0118': 'E',
    '\u1E18': 'E',
    '\u1E1A': 'E',
    '\u0190': 'E',
    '\u018E': 'E',
    '\u24BB': 'F',
    '\uFF26': 'F',
    '\u1E1E': 'F',
    '\u0191': 'F',
    '\uA77B': 'F',
    '\u24BC': 'G',
    '\uFF27': 'G',
    '\u01F4': 'G',
    '\u011C': 'G',
    '\u1E20': 'G',
    '\u011E': 'G',
    '\u0120': 'G',
    '\u01E6': 'G',
    '\u0122': 'G',
    '\u01E4': 'G',
    '\u0193': 'G',
    '\uA7A0': 'G',
    '\uA77D': 'G',
    '\uA77E': 'G',
    '\u24BD': 'H',
    '\uFF28': 'H',
    '\u0124': 'H',
    '\u1E22': 'H',
    '\u1E26': 'H',
    '\u021E': 'H',
    '\u1E24': 'H',
    '\u1E28': 'H',
    '\u1E2A': 'H',
    '\u0126': 'H',
    '\u2C67': 'H',
    '\u2C75': 'H',
    '\uA78D': 'H',
    '\u24BE': 'I',
    '\uFF29': 'I',
    '\u00CC': 'I',
    '\u00CD': 'I',
    '\u00CE': 'I',
    '\u0128': 'I',
    '\u012A': 'I',
    '\u012C': 'I',
    '\u0130': 'I',
    '\u00CF': 'I',
    '\u1E2E': 'I',
    '\u1EC8': 'I',
    '\u01CF': 'I',
    '\u0208': 'I',
    '\u020A': 'I',
    '\u1ECA': 'I',
    '\u012E': 'I',
    '\u1E2C': 'I',
    '\u0197': 'I',
    '\u24BF': 'J',
    '\uFF2A': 'J',
    '\u0134': 'J',
    '\u0248': 'J',
    '\u24C0': 'K',
    '\uFF2B': 'K',
    '\u1E30': 'K',
    '\u01E8': 'K',
    '\u1E32': 'K',
    '\u0136': 'K',
    '\u1E34': 'K',
    '\u0198': 'K',
    '\u2C69': 'K',
    '\uA740': 'K',
    '\uA742': 'K',
    '\uA744': 'K',
    '\uA7A2': 'K',
    '\u24C1': 'L',
    '\uFF2C': 'L',
    '\u013F': 'L',
    '\u0139': 'L',
    '\u013D': 'L',
    '\u1E36': 'L',
    '\u1E38': 'L',
    '\u013B': 'L',
    '\u1E3C': 'L',
    '\u1E3A': 'L',
    '\u0141': 'L',
    '\u023D': 'L',
    '\u2C62': 'L',
    '\u2C60': 'L',
    '\uA748': 'L',
    '\uA746': 'L',
    '\uA780': 'L',
    '\u01C7': 'LJ',
    '\u01C8': 'Lj',
    '\u24C2': 'M',
    '\uFF2D': 'M',
    '\u1E3E': 'M',
    '\u1E40': 'M',
    '\u1E42': 'M',
    '\u2C6E': 'M',
    '\u019C': 'M',
    '\u24C3': 'N',
    '\uFF2E': 'N',
    '\u01F8': 'N',
    '\u0143': 'N',
    '\u00D1': 'N',
    '\u1E44': 'N',
    '\u0147': 'N',
    '\u1E46': 'N',
    '\u0145': 'N',
    '\u1E4A': 'N',
    '\u1E48': 'N',
    '\u0220': 'N',
    '\u019D': 'N',
    '\uA790': 'N',
    '\uA7A4': 'N',
    '\u01CA': 'NJ',
    '\u01CB': 'Nj',
    '\u24C4': 'O',
    '\uFF2F': 'O',
    '\u00D2': 'O',
    '\u00D3': 'O',
    '\u00D4': 'O',
    '\u1ED2': 'O',
    '\u1ED0': 'O',
    '\u1ED6': 'O',
    '\u1ED4': 'O',
    '\u00D5': 'O',
    '\u1E4C': 'O',
    '\u022C': 'O',
    '\u1E4E': 'O',
    '\u014C': 'O',
    '\u1E50': 'O',
    '\u1E52': 'O',
    '\u014E': 'O',
    '\u022E': 'O',
    '\u0230': 'O',
    '\u00D6': 'O',
    '\u022A': 'O',
    '\u1ECE': 'O',
    '\u0150': 'O',
    '\u01D1': 'O',
    '\u020C': 'O',
    '\u020E': 'O',
    '\u01A0': 'O',
    '\u1EDC': 'O',
    '\u1EDA': 'O',
    '\u1EE0': 'O',
    '\u1EDE': 'O',
    '\u1EE2': 'O',
    '\u1ECC': 'O',
    '\u1ED8': 'O',
    '\u01EA': 'O',
    '\u01EC': 'O',
    '\u00D8': 'O',
    '\u01FE': 'O',
    '\u0186': 'O',
    '\u019F': 'O',
    '\uA74A': 'O',
    '\uA74C': 'O',
    '\u01A2': 'OI',
    '\uA74E': 'OO',
    '\u0222': 'OU',
    '\u24C5': 'P',
    '\uFF30': 'P',
    '\u1E54': 'P',
    '\u1E56': 'P',
    '\u01A4': 'P',
    '\u2C63': 'P',
    '\uA750': 'P',
    '\uA752': 'P',
    '\uA754': 'P',
    '\u24C6': 'Q',
    '\uFF31': 'Q',
    '\uA756': 'Q',
    '\uA758': 'Q',
    '\u024A': 'Q',
    '\u24C7': 'R',
    '\uFF32': 'R',
    '\u0154': 'R',
    '\u1E58': 'R',
    '\u0158': 'R',
    '\u0210': 'R',
    '\u0212': 'R',
    '\u1E5A': 'R',
    '\u1E5C': 'R',
    '\u0156': 'R',
    '\u1E5E': 'R',
    '\u024C': 'R',
    '\u2C64': 'R',
    '\uA75A': 'R',
    '\uA7A6': 'R',
    '\uA782': 'R',
    '\u24C8': 'S',
    '\uFF33': 'S',
    '\u1E9E': 'S',
    '\u015A': 'S',
    '\u1E64': 'S',
    '\u015C': 'S',
    '\u1E60': 'S',
    '\u0160': 'S',
    '\u1E66': 'S',
    '\u1E62': 'S',
    '\u1E68': 'S',
    '\u0218': 'S',
    '\u015E': 'S',
    '\u2C7E': 'S',
    '\uA7A8': 'S',
    '\uA784': 'S',
    '\u24C9': 'T',
    '\uFF34': 'T',
    '\u1E6A': 'T',
    '\u0164': 'T',
    '\u1E6C': 'T',
    '\u021A': 'T',
    '\u0162': 'T',
    '\u1E70': 'T',
    '\u1E6E': 'T',
    '\u0166': 'T',
    '\u01AC': 'T',
    '\u01AE': 'T',
    '\u023E': 'T',
    '\uA786': 'T',
    '\uA728': 'TZ',
    '\u24CA': 'U',
    '\uFF35': 'U',
    '\u00D9': 'U',
    '\u00DA': 'U',
    '\u00DB': 'U',
    '\u0168': 'U',
    '\u1E78': 'U',
    '\u016A': 'U',
    '\u1E7A': 'U',
    '\u016C': 'U',
    '\u00DC': 'U',
    '\u01DB': 'U',
    '\u01D7': 'U',
    '\u01D5': 'U',
    '\u01D9': 'U',
    '\u1EE6': 'U',
    '\u016E': 'U',
    '\u0170': 'U',
    '\u01D3': 'U',
    '\u0214': 'U',
    '\u0216': 'U',
    '\u01AF': 'U',
    '\u1EEA': 'U',
    '\u1EE8': 'U',
    '\u1EEE': 'U',
    '\u1EEC': 'U',
    '\u1EF0': 'U',
    '\u1EE4': 'U',
    '\u1E72': 'U',
    '\u0172': 'U',
    '\u1E76': 'U',
    '\u1E74': 'U',
    '\u0244': 'U',
    '\u24CB': 'V',
    '\uFF36': 'V',
    '\u1E7C': 'V',
    '\u1E7E': 'V',
    '\u01B2': 'V',
    '\uA75E': 'V',
    '\u0245': 'V',
    '\uA760': 'VY',
    '\u24CC': 'W',
    '\uFF37': 'W',
    '\u1E80': 'W',
    '\u1E82': 'W',
    '\u0174': 'W',
    '\u1E86': 'W',
    '\u1E84': 'W',
    '\u1E88': 'W',
    '\u2C72': 'W',
    '\u24CD': 'X',
    '\uFF38': 'X',
    '\u1E8A': 'X',
    '\u1E8C': 'X',
    '\u24CE': 'Y',
    '\uFF39': 'Y',
    '\u1EF2': 'Y',
    '\u00DD': 'Y',
    '\u0176': 'Y',
    '\u1EF8': 'Y',
    '\u0232': 'Y',
    '\u1E8E': 'Y',
    '\u0178': 'Y',
    '\u1EF6': 'Y',
    '\u1EF4': 'Y',
    '\u01B3': 'Y',
    '\u024E': 'Y',
    '\u1EFE': 'Y',
    '\u24CF': 'Z',
    '\uFF3A': 'Z',
    '\u0179': 'Z',
    '\u1E90': 'Z',
    '\u017B': 'Z',
    '\u017D': 'Z',
    '\u1E92': 'Z',
    '\u1E94': 'Z',
    '\u01B5': 'Z',
    '\u0224': 'Z',
    '\u2C7F': 'Z',
    '\u2C6B': 'Z',
    '\uA762': 'Z',
    '\u24D0': 'a',
    '\uFF41': 'a',
    '\u1E9A': 'a',
    '\u00E0': 'a',
    '\u00E1': 'a',
    '\u00E2': 'a',
    '\u1EA7': 'a',
    '\u1EA5': 'a',
    '\u1EAB': 'a',
    '\u1EA9': 'a',
    '\u00E3': 'a',
    '\u0101': 'a',
    '\u0103': 'a',
    '\u1EB1': 'a',
    '\u1EAF': 'a',
    '\u1EB5': 'a',
    '\u1EB3': 'a',
    '\u0227': 'a',
    '\u01E1': 'a',
    '\u00E4': 'a',
    '\u01DF': 'a',
    '\u1EA3': 'a',
    '\u00E5': 'a',
    '\u01FB': 'a',
    '\u01CE': 'a',
    '\u0201': 'a',
    '\u0203': 'a',
    '\u1EA1': 'a',
    '\u1EAD': 'a',
    '\u1EB7': 'a',
    '\u1E01': 'a',
    '\u0105': 'a',
    '\u2C65': 'a',
    '\u0250': 'a',
    '\uA733': 'aa',
    '\u00E6': 'ae',
    '\u01FD': 'ae',
    '\u01E3': 'ae',
    '\uA735': 'ao',
    '\uA737': 'au',
    '\uA739': 'av',
    '\uA73B': 'av',
    '\uA73D': 'ay',
    '\u24D1': 'b',
    '\uFF42': 'b',
    '\u1E03': 'b',
    '\u1E05': 'b',
    '\u1E07': 'b',
    '\u0180': 'b',
    '\u0183': 'b',
    '\u0253': 'b',
    '\u24D2': 'c',
    '\uFF43': 'c',
    '\u0107': 'c',
    '\u0109': 'c',
    '\u010B': 'c',
    '\u010D': 'c',
    '\u00E7': 'c',
    '\u1E09': 'c',
    '\u0188': 'c',
    '\u023C': 'c',
    '\uA73F': 'c',
    '\u2184': 'c',
    '\u24D3': 'd',
    '\uFF44': 'd',
    '\u1E0B': 'd',
    '\u010F': 'd',
    '\u1E0D': 'd',
    '\u1E11': 'd',
    '\u1E13': 'd',
    '\u1E0F': 'd',
    '\u0111': 'd',
    '\u018C': 'd',
    '\u0256': 'd',
    '\u0257': 'd',
    '\uA77A': 'd',
    '\u01F3': 'dz',
    '\u01C6': 'dz',
    '\u24D4': 'e',
    '\uFF45': 'e',
    '\u00E8': 'e',
    '\u00E9': 'e',
    '\u00EA': 'e',
    '\u1EC1': 'e',
    '\u1EBF': 'e',
    '\u1EC5': 'e',
    '\u1EC3': 'e',
    '\u1EBD': 'e',
    '\u0113': 'e',
    '\u1E15': 'e',
    '\u1E17': 'e',
    '\u0115': 'e',
    '\u0117': 'e',
    '\u00EB': 'e',
    '\u1EBB': 'e',
    '\u011B': 'e',
    '\u0205': 'e',
    '\u0207': 'e',
    '\u1EB9': 'e',
    '\u1EC7': 'e',
    '\u0229': 'e',
    '\u1E1D': 'e',
    '\u0119': 'e',
    '\u1E19': 'e',
    '\u1E1B': 'e',
    '\u0247': 'e',
    '\u025B': 'e',
    '\u01DD': 'e',
    '\u24D5': 'f',
    '\uFF46': 'f',
    '\u1E1F': 'f',
    '\u0192': 'f',
    '\uA77C': 'f',
    '\u24D6': 'g',
    '\uFF47': 'g',
    '\u01F5': 'g',
    '\u011D': 'g',
    '\u1E21': 'g',
    '\u011F': 'g',
    '\u0121': 'g',
    '\u01E7': 'g',
    '\u0123': 'g',
    '\u01E5': 'g',
    '\u0260': 'g',
    '\uA7A1': 'g',
    '\u1D79': 'g',
    '\uA77F': 'g',
    '\u24D7': 'h',
    '\uFF48': 'h',
    '\u0125': 'h',
    '\u1E23': 'h',
    '\u1E27': 'h',
    '\u021F': 'h',
    '\u1E25': 'h',
    '\u1E29': 'h',
    '\u1E2B': 'h',
    '\u1E96': 'h',
    '\u0127': 'h',
    '\u2C68': 'h',
    '\u2C76': 'h',
    '\u0265': 'h',
    '\u0195': 'hv',
    '\u24D8': 'i',
    '\uFF49': 'i',
    '\u00EC': 'i',
    '\u00ED': 'i',
    '\u00EE': 'i',
    '\u0129': 'i',
    '\u012B': 'i',
    '\u012D': 'i',
    '\u00EF': 'i',
    '\u1E2F': 'i',
    '\u1EC9': 'i',
    '\u01D0': 'i',
    '\u0209': 'i',
    '\u020B': 'i',
    '\u1ECB': 'i',
    '\u012F': 'i',
    '\u1E2D': 'i',
    '\u0268': 'i',
    '\u0131': 'i',
    '\u24D9': 'j',
    '\uFF4A': 'j',
    '\u0135': 'j',
    '\u01F0': 'j',
    '\u0249': 'j',
    '\u24DA': 'k',
    '\uFF4B': 'k',
    '\u1E31': 'k',
    '\u01E9': 'k',
    '\u1E33': 'k',
    '\u0137': 'k',
    '\u1E35': 'k',
    '\u0199': 'k',
    '\u2C6A': 'k',
    '\uA741': 'k',
    '\uA743': 'k',
    '\uA745': 'k',
    '\uA7A3': 'k',
    '\u24DB': 'l',
    '\uFF4C': 'l',
    '\u0140': 'l',
    '\u013A': 'l',
    '\u013E': 'l',
    '\u1E37': 'l',
    '\u1E39': 'l',
    '\u013C': 'l',
    '\u1E3D': 'l',
    '\u1E3B': 'l',
    '\u017F': 'l',
    '\u0142': 'l',
    '\u019A': 'l',
    '\u026B': 'l',
    '\u2C61': 'l',
    '\uA749': 'l',
    '\uA781': 'l',
    '\uA747': 'l',
    '\u01C9': 'lj',
    '\u24DC': 'm',
    '\uFF4D': 'm',
    '\u1E3F': 'm',
    '\u1E41': 'm',
    '\u1E43': 'm',
    '\u0271': 'm',
    '\u026F': 'm',
    '\u24DD': 'n',
    '\uFF4E': 'n',
    '\u01F9': 'n',
    '\u0144': 'n',
    '\u00F1': 'n',
    '\u1E45': 'n',
    '\u0148': 'n',
    '\u1E47': 'n',
    '\u0146': 'n',
    '\u1E4B': 'n',
    '\u1E49': 'n',
    '\u019E': 'n',
    '\u0272': 'n',
    '\u0149': 'n',
    '\uA791': 'n',
    '\uA7A5': 'n',
    '\u01CC': 'nj',
    '\u24DE': 'o',
    '\uFF4F': 'o',
    '\u00F2': 'o',
    '\u00F3': 'o',
    '\u00F4': 'o',
    '\u1ED3': 'o',
    '\u1ED1': 'o',
    '\u1ED7': 'o',
    '\u1ED5': 'o',
    '\u00F5': 'o',
    '\u1E4D': 'o',
    '\u022D': 'o',
    '\u1E4F': 'o',
    '\u014D': 'o',
    '\u1E51': 'o',
    '\u1E53': 'o',
    '\u014F': 'o',
    '\u022F': 'o',
    '\u0231': 'o',
    '\u00F6': 'o',
    '\u022B': 'o',
    '\u1ECF': 'o',
    '\u0151': 'o',
    '\u01D2': 'o',
    '\u020D': 'o',
    '\u020F': 'o',
    '\u01A1': 'o',
    '\u1EDD': 'o',
    '\u1EDB': 'o',
    '\u1EE1': 'o',
    '\u1EDF': 'o',
    '\u1EE3': 'o',
    '\u1ECD': 'o',
    '\u1ED9': 'o',
    '\u01EB': 'o',
    '\u01ED': 'o',
    '\u00F8': 'o',
    '\u01FF': 'o',
    '\u0254': 'o',
    '\uA74B': 'o',
    '\uA74D': 'o',
    '\u0275': 'o',
    '\u01A3': 'oi',
    '\u0223': 'ou',
    '\uA74F': 'oo',
    '\u24DF': 'p',
    '\uFF50': 'p',
    '\u1E55': 'p',
    '\u1E57': 'p',
    '\u01A5': 'p',
    '\u1D7D': 'p',
    '\uA751': 'p',
    '\uA753': 'p',
    '\uA755': 'p',
    '\u24E0': 'q',
    '\uFF51': 'q',
    '\u024B': 'q',
    '\uA757': 'q',
    '\uA759': 'q',
    '\u24E1': 'r',
    '\uFF52': 'r',
    '\u0155': 'r',
    '\u1E59': 'r',
    '\u0159': 'r',
    '\u0211': 'r',
    '\u0213': 'r',
    '\u1E5B': 'r',
    '\u1E5D': 'r',
    '\u0157': 'r',
    '\u1E5F': 'r',
    '\u024D': 'r',
    '\u027D': 'r',
    '\uA75B': 'r',
    '\uA7A7': 'r',
    '\uA783': 'r',
    '\u24E2': 's',
    '\uFF53': 's',
    '\u00DF': 's',
    '\u015B': 's',
    '\u1E65': 's',
    '\u015D': 's',
    '\u1E61': 's',
    '\u0161': 's',
    '\u1E67': 's',
    '\u1E63': 's',
    '\u1E69': 's',
    '\u0219': 's',
    '\u015F': 's',
    '\u023F': 's',
    '\uA7A9': 's',
    '\uA785': 's',
    '\u1E9B': 's',
    '\u24E3': 't',
    '\uFF54': 't',
    '\u1E6B': 't',
    '\u1E97': 't',
    '\u0165': 't',
    '\u1E6D': 't',
    '\u021B': 't',
    '\u0163': 't',
    '\u1E71': 't',
    '\u1E6F': 't',
    '\u0167': 't',
    '\u01AD': 't',
    '\u0288': 't',
    '\u2C66': 't',
    '\uA787': 't',
    '\uA729': 'tz',
    '\u24E4': 'u',
    '\uFF55': 'u',
    '\u00F9': 'u',
    '\u00FA': 'u',
    '\u00FB': 'u',
    '\u0169': 'u',
    '\u1E79': 'u',
    '\u016B': 'u',
    '\u1E7B': 'u',
    '\u016D': 'u',
    '\u00FC': 'u',
    '\u01DC': 'u',
    '\u01D8': 'u',
    '\u01D6': 'u',
    '\u01DA': 'u',
    '\u1EE7': 'u',
    '\u016F': 'u',
    '\u0171': 'u',
    '\u01D4': 'u',
    '\u0215': 'u',
    '\u0217': 'u',
    '\u01B0': 'u',
    '\u1EEB': 'u',
    '\u1EE9': 'u',
    '\u1EEF': 'u',
    '\u1EED': 'u',
    '\u1EF1': 'u',
    '\u1EE5': 'u',
    '\u1E73': 'u',
    '\u0173': 'u',
    '\u1E77': 'u',
    '\u1E75': 'u',
    '\u0289': 'u',
    '\u24E5': 'v',
    '\uFF56': 'v',
    '\u1E7D': 'v',
    '\u1E7F': 'v',
    '\u028B': 'v',
    '\uA75F': 'v',
    '\u028C': 'v',
    '\uA761': 'vy',
    '\u24E6': 'w',
    '\uFF57': 'w',
    '\u1E81': 'w',
    '\u1E83': 'w',
    '\u0175': 'w',
    '\u1E87': 'w',
    '\u1E85': 'w',
    '\u1E98': 'w',
    '\u1E89': 'w',
    '\u2C73': 'w',
    '\u24E7': 'x',
    '\uFF58': 'x',
    '\u1E8B': 'x',
    '\u1E8D': 'x',
    '\u24E8': 'y',
    '\uFF59': 'y',
    '\u1EF3': 'y',
    '\u00FD': 'y',
    '\u0177': 'y',
    '\u1EF9': 'y',
    '\u0233': 'y',
    '\u1E8F': 'y',
    '\u00FF': 'y',
    '\u1EF7': 'y',
    '\u1E99': 'y',
    '\u1EF5': 'y',
    '\u01B4': 'y',
    '\u024F': 'y',
    '\u1EFF': 'y',
    '\u24E9': 'z',
    '\uFF5A': 'z',
    '\u017A': 'z',
    '\u1E91': 'z',
    '\u017C': 'z',
    '\u017E': 'z',
    '\u1E93': 'z',
    '\u1E95': 'z',
    '\u01B6': 'z',
    '\u0225': 'z',
    '\u0240': 'z',
    '\u2C6C': 'z',
    '\uA763': 'z',
    '\u0386': '\u0391',
    '\u0388': '\u0395',
    '\u0389': '\u0397',
    '\u038A': '\u0399',
    '\u03AA': '\u0399',
    '\u038C': '\u039F',
    '\u038E': '\u03A5',
    '\u03AB': '\u03A5',
    '\u038F': '\u03A9',
    '\u03AC': '\u03B1',
    '\u03AD': '\u03B5',
    '\u03AE': '\u03B7',
    '\u03AF': '\u03B9',
    '\u03CA': '\u03B9',
    '\u0390': '\u03B9',
    '\u03CC': '\u03BF',
    '\u03CD': '\u03C5',
    '\u03CB': '\u03C5',
    '\u03B0': '\u03C5',
    '\u03C9': '\u03C9',
    '\u03C2': '\u03C3'
  };

  return diacritics;
});

S2.define('select2/data/base',[
  '../utils'
], function (Utils) {
  function BaseAdapter ($element, options) {
    BaseAdapter.__super__.constructor.call(this);
  }

  Utils.Extend(BaseAdapter, Utils.Observable);

  BaseAdapter.prototype.current = function (callback) {
    throw new Error('The `current` method must be defined in child classes.');
  };

  BaseAdapter.prototype.query = function (params, callback) {
    throw new Error('The `query` method must be defined in child classes.');
  };

  BaseAdapter.prototype.bind = function (container, $container) {
    // Can be implemented in subclasses
  };

  BaseAdapter.prototype.destroy = function () {
    // Can be implemented in subclasses
  };

  BaseAdapter.prototype.generateResultId = function (container, data) {
    var id = container.id + '-result-';

    id += Utils.generateChars(4);

    if (data.id != null) {
      id += '-' + data.id.toString();
    } else {
      id += '-' + Utils.generateChars(4);
    }
    return id;
  };

  return BaseAdapter;
});

S2.define('select2/data/select',[
  './base',
  '../utils',
  'jquery'
], function (BaseAdapter, Utils, $) {
  function SelectAdapter ($element, options) {
    this.$element = $element;
    this.options = options;

    SelectAdapter.__super__.constructor.call(this);
  }

  Utils.Extend(SelectAdapter, BaseAdapter);

  SelectAdapter.prototype.current = function (callback) {
    var data = [];
    var self = this;

    this.$element.find(':selected').each(function () {
      var $option = $(this);

      var option = self.item($option);

      data.push(option);
    });

    callback(data);
  };

  SelectAdapter.prototype.select = function (data) {
    var self = this;

    data.selected = true;

    // If data.element is a DOM node, use it instead
    if ($(data.element).is('option')) {
      data.element.selected = true;

      this.$element.trigger('change');

      return;
    }

    if (this.$element.prop('multiple')) {
      this.current(function (currentData) {
        var val = [];

        data = [data];
        data.push.apply(data, currentData);

        for (var d = 0; d < data.length; d++) {
          var id = data[d].id;

          if ($.inArray(id, val) === -1) {
            val.push(id);
          }
        }

        self.$element.val(val);
        self.$element.trigger('change');
      });
    } else {
      var val = data.id;

      this.$element.val(val);
      this.$element.trigger('change');
    }
  };

  SelectAdapter.prototype.unselect = function (data) {
    var self = this;

    if (!this.$element.prop('multiple')) {
      return;
    }

    data.selected = false;

    if ($(data.element).is('option')) {
      data.element.selected = false;

      this.$element.trigger('change');

      return;
    }

    this.current(function (currentData) {
      var val = [];

      for (var d = 0; d < currentData.length; d++) {
        var id = currentData[d].id;

        if (id !== data.id && $.inArray(id, val) === -1) {
          val.push(id);
        }
      }

      self.$element.val(val);

      self.$element.trigger('change');
    });
  };

  SelectAdapter.prototype.bind = function (container, $container) {
    var self = this;

    this.container = container;

    container.on('select', function (params) {
      self.select(params.data);
    });

    container.on('unselect', function (params) {
      self.unselect(params.data);
    });
  };

  SelectAdapter.prototype.destroy = function () {
    // Remove anything added to child elements
    this.$element.find('*').each(function () {
      // Remove any custom data set by Select2
      $.removeData(this, 'data');
    });
  };

  SelectAdapter.prototype.query = function (params, callback) {
    var data = [];
    var self = this;

    var $options = this.$element.children();

    $options.each(function () {
      var $option = $(this);

      if (!$option.is('option') && !$option.is('optgroup')) {
        return;
      }

      var option = self.item($option);

      var matches = self.matches(params, option);

      if (matches !== null) {
        data.push(matches);
      }
    });

    callback({
      results: data
    });
  };

  SelectAdapter.prototype.addOptions = function ($options) {
    Utils.appendMany(this.$element, $options);
  };

  SelectAdapter.prototype.option = function (data) {
    var option;

    if (data.children) {
      option = document.createElement('optgroup');
      option.label = data.text;
    } else {
      option = document.createElement('option');

      if (option.textContent !== undefined) {
        option.textContent = data.text;
      } else {
        option.innerText = data.text;
      }
    }

    if (data.id) {
      option.value = data.id;
    }

    if (data.disabled) {
      option.disabled = true;
    }

    if (data.selected) {
      option.selected = true;
    }

    if (data.title) {
      option.title = data.title;
    }

    var $option = $(option);

    var normalizedData = this._normalizeItem(data);
    normalizedData.element = option;

    // Override the option's data with the combined data
    $.data(option, 'data', normalizedData);

    return $option;
  };

  SelectAdapter.prototype.item = function ($option) {
    var data = {};

    data = $.data($option[0], 'data');

    if (data != null) {
      return data;
    }

    if ($option.is('option')) {
      data = {
        id: $option.val(),
        text: $option.text(),
        disabled: $option.prop('disabled'),
        selected: $option.prop('selected'),
        title: $option.prop('title')
      };
    } else if ($option.is('optgroup')) {
      data = {
        text: $option.prop('label'),
        children: [],
        title: $option.prop('title')
      };

      var $children = $option.children('option');
      var children = [];

      for (var c = 0; c < $children.length; c++) {
        var $child = $($children[c]);

        var child = this.item($child);

        children.push(child);
      }

      data.children = children;
    }

    data = this._normalizeItem(data);
    data.element = $option[0];

    $.data($option[0], 'data', data);

    return data;
  };

  SelectAdapter.prototype._normalizeItem = function (item) {
    if (!$.isPlainObject(item)) {
      item = {
        id: item,
        text: item
      };
    }

    item = $.extend({}, {
      text: ''
    }, item);

    var defaults = {
      selected: false,
      disabled: false
    };

    if (item.id != null) {
      item.id = item.id.toString();
    }

    if (item.text != null) {
      item.text = item.text.toString();
    }

    if (item._resultId == null && item.id && this.container != null) {
      item._resultId = this.generateResultId(this.container, item);
    }

    return $.extend({}, defaults, item);
  };

  SelectAdapter.prototype.matches = function (params, data) {
    var matcher = this.options.get('matcher');

    return matcher(params, data);
  };

  return SelectAdapter;
});

S2.define('select2/data/array',[
  './select',
  '../utils',
  'jquery'
], function (SelectAdapter, Utils, $) {
  function ArrayAdapter ($element, options) {
    var data = options.get('data') || [];

    ArrayAdapter.__super__.constructor.call(this, $element, options);

    this.addOptions(this.convertToOptions(data));
  }

  Utils.Extend(ArrayAdapter, SelectAdapter);

  ArrayAdapter.prototype.select = function (data) {
    var $option = this.$element.find('option').filter(function (i, elm) {
      return elm.value == data.id.toString();
    });

    if ($option.length === 0) {
      $option = this.option(data);

      this.addOptions($option);
    }

    ArrayAdapter.__super__.select.call(this, data);
  };

  ArrayAdapter.prototype.convertToOptions = function (data) {
    var self = this;

    var $existing = this.$element.find('option');
    var existingIds = $existing.map(function () {
      return self.item($(this)).id;
    }).get();

    var $options = [];

    // Filter out all items except for the one passed in the argument
    function onlyItem (item) {
      return function () {
        return $(this).val() == item.id;
      };
    }

    for (var d = 0; d < data.length; d++) {
      var item = this._normalizeItem(data[d]);

      // Skip items which were pre-loaded, only merge the data
      if ($.inArray(item.id, existingIds) >= 0) {
        var $existingOption = $existing.filter(onlyItem(item));

        var existingData = this.item($existingOption);
        var newData = $.extend(true, {}, item, existingData);

        var $newOption = this.option(newData);

        $existingOption.replaceWith($newOption);

        continue;
      }

      var $option = this.option(item);

      if (item.children) {
        var $children = this.convertToOptions(item.children);

        Utils.appendMany($option, $children);
      }

      $options.push($option);
    }

    return $options;
  };

  return ArrayAdapter;
});

S2.define('select2/data/ajax',[
  './array',
  '../utils',
  'jquery'
], function (ArrayAdapter, Utils, $) {
  function AjaxAdapter ($element, options) {
    this.ajaxOptions = this._applyDefaults(options.get('ajax'));

    if (this.ajaxOptions.processResults != null) {
      this.processResults = this.ajaxOptions.processResults;
    }

    AjaxAdapter.__super__.constructor.call(this, $element, options);
  }

  Utils.Extend(AjaxAdapter, ArrayAdapter);

  AjaxAdapter.prototype._applyDefaults = function (options) {
    var defaults = {
      data: function (params) {
        return $.extend({}, params, {
          q: params.term
        });
      },
      transport: function (params, success, failure) {
        var $request = $.ajax(params);

        $request.then(success);
        $request.fail(failure);

        return $request;
      }
    };

    return $.extend({}, defaults, options, true);
  };

  AjaxAdapter.prototype.processResults = function (results) {
    return results;
  };

  AjaxAdapter.prototype.query = function (params, callback) {
    var matches = [];
    var self = this;

    if (this._request != null) {
      // JSONP requests cannot always be aborted
      if ($.isFunction(this._request.abort)) {
        this._request.abort();
      }

      this._request = null;
    }

    var options = $.extend({
      type: 'GET'
    }, this.ajaxOptions);

    if (typeof options.url === 'function') {
      options.url = options.url.call(this.$element, params);
    }

    if (typeof options.data === 'function') {
      options.data = options.data.call(this.$element, params);
    }

    function request () {
      var $request = options.transport(options, function (data) {
        var results = self.processResults(data, params);

        if (self.options.get('debug') && window.console && console.error) {
          // Check to make sure that the response included a `results` key.
          if (!results || !results.results || !$.isArray(results.results)) {
            console.error(
              'Select2: The AJAX results did not return an array in the ' +
              '`results` key of the response.'
            );
          }
        }

        callback(results);
      }, function () {
        self.trigger('results:message', {
          message: 'errorLoading'
        });
      });

      self._request = $request;
    }

    if (this.ajaxOptions.delay && params.term !== '') {
      if (this._queryTimeout) {
        window.clearTimeout(this._queryTimeout);
      }

      this._queryTimeout = window.setTimeout(request, this.ajaxOptions.delay);
    } else {
      request();
    }
  };

  return AjaxAdapter;
});

S2.define('select2/data/tags',[
  'jquery'
], function ($) {
  function Tags (decorated, $element, options) {
    var tags = options.get('tags');

    var createTag = options.get('createTag');

    if (createTag !== undefined) {
      this.createTag = createTag;
    }

    var insertTag = options.get('insertTag');

    if (insertTag !== undefined) {
        this.insertTag = insertTag;
    }

    decorated.call(this, $element, options);

    if ($.isArray(tags)) {
      for (var t = 0; t < tags.length; t++) {
        var tag = tags[t];
        var item = this._normalizeItem(tag);

        var $option = this.option(item);

        this.$element.append($option);
      }
    }
  }

  Tags.prototype.query = function (decorated, params, callback) {
    var self = this;

    this._removeOldTags();

    if (params.term == null || params.page != null) {
      decorated.call(this, params, callback);
      return;
    }

    function wrapper (obj, child) {
      var data = obj.results;

      for (var i = 0; i < data.length; i++) {
        var option = data[i];

        var checkChildren = (
          option.children != null &&
          !wrapper({
            results: option.children
          }, true)
        );

        var checkText = option.text === params.term;

        if (checkText || checkChildren) {
          if (child) {
            return false;
          }

          obj.data = data;
          callback(obj);

          return;
        }
      }

      if (child) {
        return true;
      }

      var tag = self.createTag(params);

      if (tag != null) {
        var $option = self.option(tag);
        $option.attr('data-select2-tag', true);

        self.addOptions([$option]);

        self.insertTag(data, tag);
      }

      obj.results = data;

      callback(obj);
    }

    decorated.call(this, params, wrapper);
  };

  Tags.prototype.createTag = function (decorated, params) {
    var term = $.trim(params.term);

    if (term === '') {
      return null;
    }

    return {
      id: term,
      text: term
    };
  };

  Tags.prototype.insertTag = function (_, data, tag) {
    data.unshift(tag);
  };

  Tags.prototype._removeOldTags = function (_) {
    var tag = this._lastTag;

    var $options = this.$element.find('option[data-select2-tag]');

    $options.each(function () {
      if (this.selected) {
        return;
      }

      $(this).remove();
    });
  };

  return Tags;
});

S2.define('select2/data/tokenizer',[
  'jquery'
], function ($) {
  function Tokenizer (decorated, $element, options) {
    var tokenizer = options.get('tokenizer');

    if (tokenizer !== undefined) {
      this.tokenizer = tokenizer;
    }

    decorated.call(this, $element, options);
  }

  Tokenizer.prototype.bind = function (decorated, container, $container) {
    decorated.call(this, container, $container);

    this.$search =  container.dropdown.$search || container.selection.$search ||
      $container.find('.select2-search__field');
  };

  Tokenizer.prototype.query = function (decorated, params, callback) {
    var self = this;

    function select (data) {
      self.trigger('select', {
        data: data
      });
    }

    params.term = params.term || '';

    var tokenData = this.tokenizer(params, this.options, select);

    if (tokenData.term !== params.term) {
      // Replace the search term if we have the search box
      if (this.$search.length) {
        this.$search.val(tokenData.term);
        this.$search.focus();
      }

      params.term = tokenData.term;
    }

    decorated.call(this, params, callback);
  };

  Tokenizer.prototype.tokenizer = function (_, params, options, callback) {
    var separators = options.get('tokenSeparators') || [];
    var term = params.term;
    var i = 0;

    var createTag = this.createTag || function (params) {
      return {
        id: params.term,
        text: params.term
      };
    };

    while (i < term.length) {
      var termChar = term[i];

      if ($.inArray(termChar, separators) === -1) {
        i++;

        continue;
      }

      var part = term.substr(0, i);
      var partParams = $.extend({}, params, {
        term: part
      });

      var data = createTag(partParams);

      if (data == null) {
        i++;
        continue;
      }

      callback(data);

      // Reset the term to not include the tokenized portion
      term = term.substr(i + 1) || '';
      i = 0;
    }

    return {
      term: term
    };
  };

  return Tokenizer;
});

S2.define('select2/data/minimumInputLength',[

], function () {
  function MinimumInputLength (decorated, $e, options) {
    this.minimumInputLength = options.get('minimumInputLength');

    decorated.call(this, $e, options);
  }

  MinimumInputLength.prototype.query = function (decorated, params, callback) {
    params.term = params.term || '';

    if (params.term.length < this.minimumInputLength) {
      this.trigger('results:message', {
        message: 'inputTooShort',
        args: {
          minimum: this.minimumInputLength,
          input: params.term,
          params: params
        }
      });

      return;
    }

    decorated.call(this, params, callback);
  };

  return MinimumInputLength;
});

S2.define('select2/data/maximumInputLength',[

], function () {
  function MaximumInputLength (decorated, $e, options) {
    this.maximumInputLength = options.get('maximumInputLength');

    decorated.call(this, $e, options);
  }

  MaximumInputLength.prototype.query = function (decorated, params, callback) {
    params.term = params.term || '';

    if (this.maximumInputLength > 0 &&
        params.term.length > this.maximumInputLength) {
      this.trigger('results:message', {
        message: 'inputTooLong',
        args: {
          maximum: this.maximumInputLength,
          input: params.term,
          params: params
        }
      });

      return;
    }

    decorated.call(this, params, callback);
  };

  return MaximumInputLength;
});

S2.define('select2/data/maximumSelectionLength',[

], function (){
  function MaximumSelectionLength (decorated, $e, options) {
    this.maximumSelectionLength = options.get('maximumSelectionLength');

    decorated.call(this, $e, options);
  }

  MaximumSelectionLength.prototype.query =
    function (decorated, params, callback) {
      var self = this;

      this.current(function (currentData) {
        var count = currentData != null ? currentData.length : 0;
        if (self.maximumSelectionLength > 0 &&
          count >= self.maximumSelectionLength) {
          self.trigger('results:message', {
            message: 'maximumSelected',
            args: {
              maximum: self.maximumSelectionLength
            }
          });
          return;
        }
        decorated.call(self, params, callback);
      });
  };

  return MaximumSelectionLength;
});

S2.define('select2/dropdown',[
  'jquery',
  './utils'
], function ($, Utils) {
  function Dropdown ($element, options) {
    this.$element = $element;
    this.options = options;

    Dropdown.__super__.constructor.call(this);
  }

  Utils.Extend(Dropdown, Utils.Observable);

  Dropdown.prototype.render = function () {
    var $dropdown = $(
      '<span class="select2-dropdown">' +
        '<span class="select2-results"></span>' +
      '</span>'
    );

    $dropdown.attr('dir', this.options.get('dir'));

    this.$dropdown = $dropdown;

    return $dropdown;
  };

  Dropdown.prototype.bind = function () {
    // Should be implemented in subclasses
  };

  Dropdown.prototype.position = function ($dropdown, $container) {
    // Should be implmented in subclasses
  };

  Dropdown.prototype.destroy = function () {
    // Remove the dropdown from the DOM
    this.$dropdown.remove();
  };

  return Dropdown;
});

S2.define('select2/dropdown/search',[
  'jquery',
  '../utils'
], function ($, Utils) {
  function Search () { }

  Search.prototype.render = function (decorated) {
    var $rendered = decorated.call(this);

    var $search = $(
      '<span class="select2-search select2-search--dropdown">' +
        '<input class="select2-search__field" type="search" tabindex="-1"' +
        ' autocomplete="off" autocorrect="off" autocapitalize="off"' +
        ' spellcheck="false" role="textbox" />' +
      '</span>'
    );

    this.$searchContainer = $search;
    this.$search = $search.find('input');

    $rendered.prepend($search);

    return $rendered;
  };

  Search.prototype.bind = function (decorated, container, $container) {
    var self = this;

    decorated.call(this, container, $container);

    this.$search.on('keydown', function (evt) {
      self.trigger('keypress', evt);

      self._keyUpPrevented = evt.isDefaultPrevented();
    });

    // Workaround for browsers which do not support the `input` event
    // This will prevent double-triggering of events for browsers which support
    // both the `keyup` and `input` events.
    this.$search.on('input', function (evt) {
      // Unbind the duplicated `keyup` event
      $(this).off('keyup');
    });

    this.$search.on('keyup input', function (evt) {
      self.handleSearch(evt);
    });

    container.on('open', function () {
      self.$search.attr('tabindex', 0);

      self.$search.focus();

      window.setTimeout(function () {
        self.$search.focus();
      }, 0);
    });

    container.on('close', function () {
      self.$search.attr('tabindex', -1);

      self.$search.val('');
    });

    container.on('results:all', function (params) {
      if (params.query.term == null || params.query.term === '') {
        var showSearch = self.showSearch(params);

        if (showSearch) {
          self.$searchContainer.removeClass('select2-search--hide');
        } else {
          self.$searchContainer.addClass('select2-search--hide');
        }
      }
    });
  };

  Search.prototype.handleSearch = function (evt) {
    if (!this._keyUpPrevented) {
      var input = this.$search.val();

      this.trigger('query', {
        term: input
      });
    }

    this._keyUpPrevented = false;
  };

  Search.prototype.showSearch = function (_, params) {
    return true;
  };

  return Search;
});

S2.define('select2/dropdown/hidePlaceholder',[

], function () {
  function HidePlaceholder (decorated, $element, options, dataAdapter) {
    this.placeholder = this.normalizePlaceholder(options.get('placeholder'));

    decorated.call(this, $element, options, dataAdapter);
  }

  HidePlaceholder.prototype.append = function (decorated, data) {
    data.results = this.removePlaceholder(data.results);

    decorated.call(this, data);
  };

  HidePlaceholder.prototype.normalizePlaceholder = function (_, placeholder) {
    if (typeof placeholder === 'string') {
      placeholder = {
        id: '',
        text: placeholder
      };
    }

    return placeholder;
  };

  HidePlaceholder.prototype.removePlaceholder = function (_, data) {
    var modifiedData = data.slice(0);

    for (var d = data.length - 1; d >= 0; d--) {
      var item = data[d];

      if (this.placeholder.id === item.id) {
        modifiedData.splice(d, 1);
      }
    }

    return modifiedData;
  };

  return HidePlaceholder;
});

S2.define('select2/dropdown/infiniteScroll',[
  'jquery'
], function ($) {
  function InfiniteScroll (decorated, $element, options, dataAdapter) {
    this.lastParams = {};

    decorated.call(this, $element, options, dataAdapter);

    this.$loadingMore = this.createLoadingMore();
    this.loading = false;
  }

  InfiniteScroll.prototype.append = function (decorated, data) {
    this.$loadingMore.remove();
    this.loading = false;

    decorated.call(this, data);

    if (this.showLoadingMore(data)) {
      this.$results.append(this.$loadingMore);
    }
  };

  InfiniteScroll.prototype.bind = function (decorated, container, $container) {
    var self = this;

    decorated.call(this, container, $container);

    container.on('query', function (params) {
      self.lastParams = params;
      self.loading = true;
    });

    container.on('query:append', function (params) {
      self.lastParams = params;
      self.loading = true;
    });

    this.$results.on('scroll', function () {
      var isLoadMoreVisible = $.contains(
        document.documentElement,
        self.$loadingMore[0]
      );

      if (self.loading || !isLoadMoreVisible) {
        return;
      }

      var currentOffset = self.$results.offset().top +
        self.$results.outerHeight(false);
      var loadingMoreOffset = self.$loadingMore.offset().top +
        self.$loadingMore.outerHeight(false);

      if (currentOffset + 50 >= loadingMoreOffset) {
        self.loadMore();
      }
    });
  };

  InfiniteScroll.prototype.loadMore = function () {
    this.loading = true;

    var params = $.extend({}, {page: 1}, this.lastParams);

    params.page++;

    this.trigger('query:append', params);
  };

  InfiniteScroll.prototype.showLoadingMore = function (_, data) {
    return data.pagination && data.pagination.more;
  };

  InfiniteScroll.prototype.createLoadingMore = function () {
    var $option = $(
      '<li ' +
      'class="select2-results__option select2-results__option--load-more"' +
      'role="treeitem" aria-disabled="true"></li>'
    );

    var message = this.options.get('translations').get('loadingMore');

    $option.html(message(this.lastParams));

    return $option;
  };

  return InfiniteScroll;
});

S2.define('select2/dropdown/attachBody',[
  'jquery',
  '../utils'
], function ($, Utils) {
  function AttachBody (decorated, $element, options) {
    this.$dropdownParent = options.get('dropdownParent') || $(document.body);

    decorated.call(this, $element, options);
  }

  AttachBody.prototype.bind = function (decorated, container, $container) {
    var self = this;

    var setupResultsEvents = false;

    decorated.call(this, container, $container);

    container.on('open', function () {
      self._showDropdown();
      self._attachPositioningHandler(container);

      if (!setupResultsEvents) {
        setupResultsEvents = true;

        container.on('results:all', function () {
          self._positionDropdown();
          self._resizeDropdown();
        });

        container.on('results:append', function () {
          self._positionDropdown();
          self._resizeDropdown();
        });
      }
    });

    container.on('close', function () {
      self._hideDropdown();
      self._detachPositioningHandler(container);
    });

    this.$dropdownContainer.on('mousedown', function (evt) {
      evt.stopPropagation();
    });
  };

  AttachBody.prototype.destroy = function (decorated) {
    decorated.call(this);

    this.$dropdownContainer.remove();
  };

  AttachBody.prototype.position = function (decorated, $dropdown, $container) {
    // Clone all of the container classes
    $dropdown.attr('class', $container.attr('class'));

    $dropdown.removeClass('select2');
    $dropdown.addClass('select2-container--open');

    $dropdown.css({
      position: 'absolute',
      top: -999999
    });

    this.$container = $container;
  };

  AttachBody.prototype.render = function (decorated) {
    var $container = $('<span></span>');

    var $dropdown = decorated.call(this);
    $container.append($dropdown);

    this.$dropdownContainer = $container;

    return $container;
  };

  AttachBody.prototype._hideDropdown = function (decorated) {
    this.$dropdownContainer.detach();
  };

  AttachBody.prototype._attachPositioningHandler =
      function (decorated, container) {
    var self = this;

    var scrollEvent = 'scroll.select2.' + container.id;
    var resizeEvent = 'resize.select2.' + container.id;
    var orientationEvent = 'orientationchange.select2.' + container.id;

    var $watchers = this.$container.parents().filter(Utils.hasScroll);
    $watchers.each(function () {
      $(this).data('select2-scroll-position', {
        x: $(this).scrollLeft(),
        y: $(this).scrollTop()
      });
    });

    $watchers.on(scrollEvent, function (ev) {
      var position = $(this).data('select2-scroll-position');
      $(this).scrollTop(position.y);
    });

    $(window).on(scrollEvent + ' ' + resizeEvent + ' ' + orientationEvent,
      function (e) {
      self._positionDropdown();
      self._resizeDropdown();
    });
  };

  AttachBody.prototype._detachPositioningHandler =
      function (decorated, container) {
    var scrollEvent = 'scroll.select2.' + container.id;
    var resizeEvent = 'resize.select2.' + container.id;
    var orientationEvent = 'orientationchange.select2.' + container.id;

    var $watchers = this.$container.parents().filter(Utils.hasScroll);
    $watchers.off(scrollEvent);

    $(window).off(scrollEvent + ' ' + resizeEvent + ' ' + orientationEvent);
  };

  AttachBody.prototype._positionDropdown = function () {
    var $window = $(window);

    var isCurrentlyAbove = this.$dropdown.hasClass('select2-dropdown--above');
    var isCurrentlyBelow = this.$dropdown.hasClass('select2-dropdown--below');

    var newDirection = null;

    var offset = this.$container.offset();

    offset.bottom = offset.top + this.$container.outerHeight(false);

    var container = {
      height: this.$container.outerHeight(false)
    };

    container.top = offset.top;
    container.bottom = offset.top + container.height;

    var dropdown = {
      height: this.$dropdown.outerHeight(false)
    };

    var viewport = {
      top: $window.scrollTop(),
      bottom: $window.scrollTop() + $window.height()
    };

    var enoughRoomAbove = viewport.top < (offset.top - dropdown.height);
    var enoughRoomBelow = viewport.bottom > (offset.bottom + dropdown.height);

    var css = {
      left: offset.left,
      top: container.bottom
    };

    // Determine what the parent element is to use for calciulating the offset
    var $offsetParent = this.$dropdownParent;

    // For statically positoned elements, we need to get the element
    // that is determining the offset
    if ($offsetParent.css('position') === 'static') {
      $offsetParent = $offsetParent.offsetParent();
    }

    var parentOffset = $offsetParent.offset();

    css.top -= parentOffset.top;
    css.left -= parentOffset.left;

    if (!isCurrentlyAbove && !isCurrentlyBelow) {
      newDirection = 'below';
    }

    if (!enoughRoomBelow && enoughRoomAbove && !isCurrentlyAbove) {
      newDirection = 'above';
    } else if (!enoughRoomAbove && enoughRoomBelow && isCurrentlyAbove) {
      newDirection = 'below';
    }

    if (newDirection == 'above' ||
      (isCurrentlyAbove && newDirection !== 'below')) {
      css.top = container.top - dropdown.height;
    }

    if (newDirection != null) {
      this.$dropdown
        .removeClass('select2-dropdown--below select2-dropdown--above')
        .addClass('select2-dropdown--' + newDirection);
      this.$container
        .removeClass('select2-container--below select2-container--above')
        .addClass('select2-container--' + newDirection);
    }

    this.$dropdownContainer.css(css);
  };

  AttachBody.prototype._resizeDropdown = function () {
    var css = {
      width: this.$container.outerWidth(false) + 'px'
    };

    if (this.options.get('dropdownAutoWidth')) {
      css.minWidth = css.width;
      css.width = 'auto';
    }

    this.$dropdown.css(css);
  };

  AttachBody.prototype._showDropdown = function (decorated) {
    this.$dropdownContainer.appendTo(this.$dropdownParent);

    this._positionDropdown();
    this._resizeDropdown();
  };

  return AttachBody;
});

S2.define('select2/dropdown/minimumResultsForSearch',[

], function () {
  function countResults (data) {
    var count = 0;

    for (var d = 0; d < data.length; d++) {
      var item = data[d];

      if (item.children) {
        count += countResults(item.children);
      } else {
        count++;
      }
    }

    return count;
  }

  function MinimumResultsForSearch (decorated, $element, options, dataAdapter) {
    this.minimumResultsForSearch = options.get('minimumResultsForSearch');

    if (this.minimumResultsForSearch < 0) {
      this.minimumResultsForSearch = Infinity;
    }

    decorated.call(this, $element, options, dataAdapter);
  }

  MinimumResultsForSearch.prototype.showSearch = function (decorated, params) {
    if (countResults(params.data.results) < this.minimumResultsForSearch) {
      return false;
    }

    return decorated.call(this, params);
  };

  return MinimumResultsForSearch;
});

S2.define('select2/dropdown/selectOnClose',[

], function () {
  function SelectOnClose () { }

  SelectOnClose.prototype.bind = function (decorated, container, $container) {
    var self = this;

    decorated.call(this, container, $container);

    container.on('close', function () {
      self._handleSelectOnClose();
    });
  };

  SelectOnClose.prototype._handleSelectOnClose = function () {
    var $highlightedResults = this.getHighlightedResults();

    // Only select highlighted results
    if ($highlightedResults.length < 1) {
      return;
    }

    var data = $highlightedResults.data('data');

    // Don't re-select already selected resulte
    if (
      (data.element != null && data.element.selected) ||
      (data.element == null && data.selected)
    ) {
      return;
    }

    this.trigger('select', {
        data: data
    });
  };

  return SelectOnClose;
});

S2.define('select2/dropdown/closeOnSelect',[

], function () {
  function CloseOnSelect () { }

  CloseOnSelect.prototype.bind = function (decorated, container, $container) {
    var self = this;

    decorated.call(this, container, $container);

    container.on('select', function (evt) {
      self._selectTriggered(evt);
    });

    container.on('unselect', function (evt) {
      self._selectTriggered(evt);
    });
  };

  CloseOnSelect.prototype._selectTriggered = function (_, evt) {
    var originalEvent = evt.originalEvent;

    // Don't close if the control key is being held
    if (originalEvent && originalEvent.ctrlKey) {
      return;
    }

    this.trigger('close', {});
  };

  return CloseOnSelect;
});

S2.define('select2/i18n/en',[],function () {
  // English
  return {
    errorLoading: function () {
      return 'The results could not be loaded.';
    },
    inputTooLong: function (args) {
      var overChars = args.input.length - args.maximum;

      var message = 'Please delete ' + overChars + ' character';

      if (overChars != 1) {
        message += 's';
      }

      return message;
    },
    inputTooShort: function (args) {
      var remainingChars = args.minimum - args.input.length;

      var message = 'Please enter ' + remainingChars + ' or more characters';

      return message;
    },
    loadingMore: function () {
      return 'Loading more results…';
    },
    maximumSelected: function (args) {
      var message = 'You can only select ' + args.maximum + ' item';

      if (args.maximum != 1) {
        message += 's';
      }

      return message;
    },
    noResults: function () {
      return 'No results found';
    },
    searching: function () {
      return 'Searching…';
    }
  };
});

S2.define('select2/defaults',[
  'jquery',
  'require',

  './results',

  './selection/single',
  './selection/multiple',
  './selection/placeholder',
  './selection/allowClear',
  './selection/search',
  './selection/eventRelay',

  './utils',
  './translation',
  './diacritics',

  './data/select',
  './data/array',
  './data/ajax',
  './data/tags',
  './data/tokenizer',
  './data/minimumInputLength',
  './data/maximumInputLength',
  './data/maximumSelectionLength',

  './dropdown',
  './dropdown/search',
  './dropdown/hidePlaceholder',
  './dropdown/infiniteScroll',
  './dropdown/attachBody',
  './dropdown/minimumResultsForSearch',
  './dropdown/selectOnClose',
  './dropdown/closeOnSelect',

  './i18n/en'
], function ($, require,

             ResultsList,

             SingleSelection, MultipleSelection, Placeholder, AllowClear,
             SelectionSearch, EventRelay,

             Utils, Translation, DIACRITICS,

             SelectData, ArrayData, AjaxData, Tags, Tokenizer,
             MinimumInputLength, MaximumInputLength, MaximumSelectionLength,

             Dropdown, DropdownSearch, HidePlaceholder, InfiniteScroll,
             AttachBody, MinimumResultsForSearch, SelectOnClose, CloseOnSelect,

             EnglishTranslation) {
  function Defaults () {
    this.reset();
  }

  Defaults.prototype.apply = function (options) {
    options = $.extend(true, {}, this.defaults, options);

    if (options.dataAdapter == null) {
      if (options.ajax != null) {
        options.dataAdapter = AjaxData;
      } else if (options.data != null) {
        options.dataAdapter = ArrayData;
      } else {
        options.dataAdapter = SelectData;
      }

      if (options.minimumInputLength > 0) {
        options.dataAdapter = Utils.Decorate(
          options.dataAdapter,
          MinimumInputLength
        );
      }

      if (options.maximumInputLength > 0) {
        options.dataAdapter = Utils.Decorate(
          options.dataAdapter,
          MaximumInputLength
        );
      }

      if (options.maximumSelectionLength > 0) {
        options.dataAdapter = Utils.Decorate(
          options.dataAdapter,
          MaximumSelectionLength
        );
      }

      if (options.tags) {
        options.dataAdapter = Utils.Decorate(options.dataAdapter, Tags);
      }

      if (options.tokenSeparators != null || options.tokenizer != null) {
        options.dataAdapter = Utils.Decorate(
          options.dataAdapter,
          Tokenizer
        );
      }

      if (options.query != null) {
        var Query = require(options.amdBase + 'compat/query');

        options.dataAdapter = Utils.Decorate(
          options.dataAdapter,
          Query
        );
      }

      if (options.initSelection != null) {
        var InitSelection = require(options.amdBase + 'compat/initSelection');

        options.dataAdapter = Utils.Decorate(
          options.dataAdapter,
          InitSelection
        );
      }
    }

    if (options.resultsAdapter == null) {
      options.resultsAdapter = ResultsList;

      if (options.ajax != null) {
        options.resultsAdapter = Utils.Decorate(
          options.resultsAdapter,
          InfiniteScroll
        );
      }

      if (options.placeholder != null) {
        options.resultsAdapter = Utils.Decorate(
          options.resultsAdapter,
          HidePlaceholder
        );
      }

      if (options.selectOnClose) {
        options.resultsAdapter = Utils.Decorate(
          options.resultsAdapter,
          SelectOnClose
        );
      }
    }

    if (options.dropdownAdapter == null) {
      if (options.multiple) {
        options.dropdownAdapter = Dropdown;
      } else {
        var SearchableDropdown = Utils.Decorate(Dropdown, DropdownSearch);

        options.dropdownAdapter = SearchableDropdown;
      }

      if (options.minimumResultsForSearch !== 0) {
        options.dropdownAdapter = Utils.Decorate(
          options.dropdownAdapter,
          MinimumResultsForSearch
        );
      }

      if (options.closeOnSelect) {
        options.dropdownAdapter = Utils.Decorate(
          options.dropdownAdapter,
          CloseOnSelect
        );
      }

      if (
        options.dropdownCssClass != null ||
        options.dropdownCss != null ||
        options.adaptDropdownCssClass != null
      ) {
        var DropdownCSS = require(options.amdBase + 'compat/dropdownCss');

        options.dropdownAdapter = Utils.Decorate(
          options.dropdownAdapter,
          DropdownCSS
        );
      }

      options.dropdownAdapter = Utils.Decorate(
        options.dropdownAdapter,
        AttachBody
      );
    }

    if (options.selectionAdapter == null) {
      if (options.multiple) {
        options.selectionAdapter = MultipleSelection;
      } else {
        options.selectionAdapter = SingleSelection;
      }

      // Add the placeholder mixin if a placeholder was specified
      if (options.placeholder != null) {
        options.selectionAdapter = Utils.Decorate(
          options.selectionAdapter,
          Placeholder
        );
      }

      if (options.allowClear) {
        options.selectionAdapter = Utils.Decorate(
          options.selectionAdapter,
          AllowClear
        );
      }

      if (options.multiple) {
        options.selectionAdapter = Utils.Decorate(
          options.selectionAdapter,
          SelectionSearch
        );
      }

      if (
        options.containerCssClass != null ||
        options.containerCss != null ||
        options.adaptContainerCssClass != null
      ) {
        var ContainerCSS = require(options.amdBase + 'compat/containerCss');

        options.selectionAdapter = Utils.Decorate(
          options.selectionAdapter,
          ContainerCSS
        );
      }

      options.selectionAdapter = Utils.Decorate(
        options.selectionAdapter,
        EventRelay
      );
    }

    if (typeof options.language === 'string') {
      // Check if the language is specified with a region
      if (options.language.indexOf('-') > 0) {
        // Extract the region information if it is included
        var languageParts = options.language.split('-');
        var baseLanguage = languageParts[0];

        options.language = [options.language, baseLanguage];
      } else {
        options.language = [options.language];
      }
    }

    if ($.isArray(options.language)) {
      var languages = new Translation();
      options.language.push('en');

      var languageNames = options.language;

      for (var l = 0; l < languageNames.length; l++) {
        var name = languageNames[l];
        var language = {};

        try {
          // Try to load it with the original name
          language = Translation.loadPath(name);
        } catch (e) {
          try {
            // If we couldn't load it, check if it wasn't the full path
            name = this.defaults.amdLanguageBase + name;
            language = Translation.loadPath(name);
          } catch (ex) {
            // The translation could not be loaded at all. Sometimes this is
            // because of a configuration problem, other times this can be
            // because of how Select2 helps load all possible translation files.
            if (options.debug && window.console && console.warn) {
              console.warn(
                'Select2: The language file for "' + name + '" could not be ' +
                'automatically loaded. A fallback will be used instead.'
              );
            }

            continue;
          }
        }

        languages.extend(language);
      }

      options.translations = languages;
    } else {
      var baseTranslation = Translation.loadPath(
        this.defaults.amdLanguageBase + 'en'
      );
      var customTranslation = new Translation(options.language);

      customTranslation.extend(baseTranslation);

      options.translations = customTranslation;
    }

    return options;
  };

  Defaults.prototype.reset = function () {
    function stripDiacritics (text) {
      // Used 'uni range + named function' from http://jsperf.com/diacritics/18
      function match(a) {
        return DIACRITICS[a] || a;
      }

      return text.replace(/[^\u0000-\u007E]/g, match);
    }

    function matcher (params, data) {
      // Always return the object if there is nothing to compare
      if ($.trim(params.term) === '') {
        return data;
      }

      // Do a recursive check for options with children
      if (data.children && data.children.length > 0) {
        // Clone the data object if there are children
        // This is required as we modify the object to remove any non-matches
        var match = $.extend(true, {}, data);

        // Check each child of the option
        for (var c = data.children.length - 1; c >= 0; c--) {
          var child = data.children[c];

          var matches = matcher(params, child);

          // If there wasn't a match, remove the object in the array
          if (matches == null) {
            match.children.splice(c, 1);
          }
        }

        // If any children matched, return the new object
        if (match.children.length > 0) {
          return match;
        }

        // If there were no matching children, check just the plain object
        return matcher(params, match);
      }

      var original = stripDiacritics(data.text).toUpperCase();
      var term = stripDiacritics(params.term).toUpperCase();

      // Check if the text contains the term
      if (original.indexOf(term) > -1) {
        return data;
      }

      // If it doesn't contain the term, don't return anything
      return null;
    }

    this.defaults = {
      amdBase: './',
      amdLanguageBase: './i18n/',
      closeOnSelect: true,
      debug: false,
      dropdownAutoWidth: false,
      escapeMarkup: Utils.escapeMarkup,
      language: EnglishTranslation,
      matcher: matcher,
      minimumInputLength: 0,
      maximumInputLength: 0,
      maximumSelectionLength: 0,
      minimumResultsForSearch: 0,
      selectOnClose: false,
      sorter: function (data) {
        return data;
      },
      templateResult: function (result) {
        return result.text;
      },
      templateSelection: function (selection) {
        return selection.text;
      },
      theme: 'default',
      width: 'resolve'
    };
  };

  Defaults.prototype.set = function (key, value) {
    var camelKey = $.camelCase(key);

    var data = {};
    data[camelKey] = value;

    var convertedData = Utils._convertData(data);

    $.extend(this.defaults, convertedData);
  };

  var defaults = new Defaults();

  return defaults;
});

S2.define('select2/options',[
  'require',
  'jquery',
  './defaults',
  './utils'
], function (require, $, Defaults, Utils) {
  function Options (options, $element) {
    this.options = options;

    if ($element != null) {
      this.fromElement($element);
    }

    this.options = Defaults.apply(this.options);

    if ($element && $element.is('input')) {
      var InputCompat = require(this.get('amdBase') + 'compat/inputData');

      this.options.dataAdapter = Utils.Decorate(
        this.options.dataAdapter,
        InputCompat
      );
    }
  }

  Options.prototype.fromElement = function ($e) {
    var excludedData = ['select2'];

    if (this.options.multiple == null) {
      this.options.multiple = $e.prop('multiple');
    }

    if (this.options.disabled == null) {
      this.options.disabled = $e.prop('disabled');
    }

    if (this.options.language == null) {
      if ($e.prop('lang')) {
        this.options.language = $e.prop('lang').toLowerCase();
      } else if ($e.closest('[lang]').prop('lang')) {
        this.options.language = $e.closest('[lang]').prop('lang');
      }
    }

    if (this.options.dir == null) {
      if ($e.prop('dir')) {
        this.options.dir = $e.prop('dir');
      } else if ($e.closest('[dir]').prop('dir')) {
        this.options.dir = $e.closest('[dir]').prop('dir');
      } else {
        this.options.dir = 'ltr';
      }
    }

    $e.prop('disabled', this.options.disabled);
    $e.prop('multiple', this.options.multiple);

    if ($e.data('select2Tags')) {
      if (this.options.debug && window.console && console.warn) {
        console.warn(
          'Select2: The `data-select2-tags` attribute has been changed to ' +
          'use the `data-data` and `data-tags="true"` attributes and will be ' +
          'removed in future versions of Select2.'
        );
      }

      $e.data('data', $e.data('select2Tags'));
      $e.data('tags', true);
    }

    if ($e.data('ajaxUrl')) {
      if (this.options.debug && window.console && console.warn) {
        console.warn(
          'Select2: The `data-ajax-url` attribute has been changed to ' +
          '`data-ajax--url` and support for the old attribute will be removed' +
          ' in future versions of Select2.'
        );
      }

      $e.attr('ajax--url', $e.data('ajaxUrl'));
      $e.data('ajax--url', $e.data('ajaxUrl'));
    }

    var dataset = {};

    // Prefer the element's `dataset` attribute if it exists
    // jQuery 1.x does not correctly handle data attributes with multiple dashes
    if ($.fn.jquery && $.fn.jquery.substr(0, 2) == '1.' && $e[0].dataset) {
      dataset = $.extend(true, {}, $e[0].dataset, $e.data());
    } else {
      dataset = $e.data();
    }

    var data = $.extend(true, {}, dataset);

    data = Utils._convertData(data);

    for (var key in data) {
      if ($.inArray(key, excludedData) > -1) {
        continue;
      }

      if ($.isPlainObject(this.options[key])) {
        $.extend(this.options[key], data[key]);
      } else {
        this.options[key] = data[key];
      }
    }

    return this;
  };

  Options.prototype.get = function (key) {
    return this.options[key];
  };

  Options.prototype.set = function (key, val) {
    this.options[key] = val;
  };

  return Options;
});

S2.define('select2/core',[
  'jquery',
  './options',
  './utils',
  './keys'
], function ($, Options, Utils, KEYS) {
  var Select2 = function ($element, options) {
    if ($element.data('select2') != null) {
      $element.data('select2').destroy();
    }

    this.$element = $element;

    this.id = this._generateId($element);

    options = options || {};

    this.options = new Options(options, $element);

    Select2.__super__.constructor.call(this);

    // Set up the tabindex

    var tabindex = $element.attr('tabindex') || 0;
    $element.data('old-tabindex', tabindex);
    $element.attr('tabindex', '-1');

    // Set up containers and adapters

    var DataAdapter = this.options.get('dataAdapter');
    this.dataAdapter = new DataAdapter($element, this.options);

    var $container = this.render();

    this._placeContainer($container);

    var SelectionAdapter = this.options.get('selectionAdapter');
    this.selection = new SelectionAdapter($element, this.options);
    this.$selection = this.selection.render();

    this.selection.position(this.$selection, $container);

    var DropdownAdapter = this.options.get('dropdownAdapter');
    this.dropdown = new DropdownAdapter($element, this.options);
    this.$dropdown = this.dropdown.render();

    this.dropdown.position(this.$dropdown, $container);

    var ResultsAdapter = this.options.get('resultsAdapter');
    this.results = new ResultsAdapter($element, this.options, this.dataAdapter);
    this.$results = this.results.render();

    this.results.position(this.$results, this.$dropdown);

    // Bind events

    var self = this;

    // Bind the container to all of the adapters
    this._bindAdapters();

    // Register any DOM event handlers
    this._registerDomEvents();

    // Register any internal event handlers
    this._registerDataEvents();
    this._registerSelectionEvents();
    this._registerDropdownEvents();
    this._registerResultsEvents();
    this._registerEvents();

    // Set the initial state
    this.dataAdapter.current(function (initialData) {
      self.trigger('selection:update', {
        data: initialData
      });
    });

    // Hide the original select
    $element.addClass('select2-hidden-accessible');
    $element.attr('aria-hidden', 'true');

    // Synchronize any monitored attributes
    this._syncAttributes();

    $element.data('select2', this);
  };

  Utils.Extend(Select2, Utils.Observable);

  Select2.prototype._generateId = function ($element) {
    var id = '';

    if ($element.attr('id') != null) {
      id = $element.attr('id');
    } else if ($element.attr('name') != null) {
      id = $element.attr('name') + '-' + Utils.generateChars(2);
    } else {
      id = Utils.generateChars(4);
    }

    id = id.replace(/(:|\.|\[|\]|,)/g, '');
    id = 'select2-' + id;

    return id;
  };

  Select2.prototype._placeContainer = function ($container) {
    $container.insertAfter(this.$element);

    var width = this._resolveWidth(this.$element, this.options.get('width'));

    if (width != null) {
      $container.css('width', width);
    }
  };

  Select2.prototype._resolveWidth = function ($element, method) {
    var WIDTH = /^width:(([-+]?([0-9]*\.)?[0-9]+)(px|em|ex|%|in|cm|mm|pt|pc))/i;

    if (method == 'resolve') {
      var styleWidth = this._resolveWidth($element, 'style');

      if (styleWidth != null) {
        return styleWidth;
      }

      return this._resolveWidth($element, 'element');
    }

    if (method == 'element') {
      var elementWidth = $element.outerWidth(false);

      if (elementWidth <= 0) {
        return 'auto';
      }

      return elementWidth + 'px';
    }

    if (method == 'style') {
      var style = $element.attr('style');

      if (typeof(style) !== 'string') {
        return null;
      }

      var attrs = style.split(';');

      for (var i = 0, l = attrs.length; i < l; i = i + 1) {
        var attr = attrs[i].replace(/\s/g, '');
        var matches = attr.match(WIDTH);

        if (matches !== null && matches.length >= 1) {
          return matches[1];
        }
      }

      return null;
    }

    return method;
  };

  Select2.prototype._bindAdapters = function () {
    this.dataAdapter.bind(this, this.$container);
    this.selection.bind(this, this.$container);

    this.dropdown.bind(this, this.$container);
    this.results.bind(this, this.$container);
  };

  Select2.prototype._registerDomEvents = function () {
    var self = this;

    this.$element.on('change.select2', function () {
      self.dataAdapter.current(function (data) {
        self.trigger('selection:update', {
          data: data
        });
      });
    });

    this._sync = Utils.bind(this._syncAttributes, this);

    if (this.$element[0].attachEvent) {
      this.$element[0].attachEvent('onpropertychange', this._sync);
    }

    var observer = window.MutationObserver ||
      window.WebKitMutationObserver ||
      window.MozMutationObserver
    ;

    if (observer != null) {
      this._observer = new observer(function (mutations) {
        $.each(mutations, self._sync);
      });
      this._observer.observe(this.$element[0], {
        attributes: true,
        subtree: false
      });
    } else if (this.$element[0].addEventListener) {
      this.$element[0].addEventListener('DOMAttrModified', self._sync, false);
    }
  };

  Select2.prototype._registerDataEvents = function () {
    var self = this;

    this.dataAdapter.on('*', function (name, params) {
      self.trigger(name, params);
    });
  };

  Select2.prototype._registerSelectionEvents = function () {
    var self = this;
    var nonRelayEvents = ['toggle', 'focus'];

    this.selection.on('toggle', function () {
      self.toggleDropdown();
    });

    this.selection.on('focus', function (params) {
      self.focus(params);
    });

    this.selection.on('*', function (name, params) {
      if ($.inArray(name, nonRelayEvents) !== -1) {
        return;
      }

      self.trigger(name, params);
    });
  };

  Select2.prototype._registerDropdownEvents = function () {
    var self = this;

    this.dropdown.on('*', function (name, params) {
      self.trigger(name, params);
    });
  };

  Select2.prototype._registerResultsEvents = function () {
    var self = this;

    this.results.on('*', function (name, params) {
      self.trigger(name, params);
    });
  };

  Select2.prototype._registerEvents = function () {
    var self = this;

    this.on('open', function () {
      self.$container.addClass('select2-container--open');
    });

    this.on('close', function () {
      self.$container.removeClass('select2-container--open');
    });

    this.on('enable', function () {
      self.$container.removeClass('select2-container--disabled');
    });

    this.on('disable', function () {
      self.$container.addClass('select2-container--disabled');
    });

    this.on('blur', function () {
      self.$container.removeClass('select2-container--focus');
    });

    this.on('query', function (params) {
      if (!self.isOpen()) {
        self.trigger('open', {});
      }

      this.dataAdapter.query(params, function (data) {
        self.trigger('results:all', {
          data: data,
          query: params
        });
      });
    });

    this.on('query:append', function (params) {
      this.dataAdapter.query(params, function (data) {
        self.trigger('results:append', {
          data: data,
          query: params
        });
      });
    });

    this.on('keypress', function (evt) {
      var key = evt.which;

      if (self.isOpen()) {
        if (key === KEYS.ESC || key === KEYS.TAB ||
            (key === KEYS.UP && evt.altKey)) {
          self.close();

          evt.preventDefault();
        } else if (key === KEYS.ENTER) {
          self.trigger('results:select', {});

          evt.preventDefault();
        } else if ((key === KEYS.SPACE && evt.ctrlKey)) {
          self.trigger('results:toggle', {});

          evt.preventDefault();
        } else if (key === KEYS.UP) {
          self.trigger('results:previous', {});

          evt.preventDefault();
        } else if (key === KEYS.DOWN) {
          self.trigger('results:next', {});

          evt.preventDefault();
        }
      } else {
        if (key === KEYS.ENTER || key === KEYS.SPACE ||
            (key === KEYS.DOWN && evt.altKey)) {
          self.open();

          evt.preventDefault();
        }
      }
    });
  };

  Select2.prototype._syncAttributes = function () {
    this.options.set('disabled', this.$element.prop('disabled'));

    if (this.options.get('disabled')) {
      if (this.isOpen()) {
        this.close();
      }

      this.trigger('disable', {});
    } else {
      this.trigger('enable', {});
    }
  };

  /**
   * Override the trigger method to automatically trigger pre-events when
   * there are events that can be prevented.
   */
  Select2.prototype.trigger = function (name, args) {
    var actualTrigger = Select2.__super__.trigger;
    var preTriggerMap = {
      'open': 'opening',
      'close': 'closing',
      'select': 'selecting',
      'unselect': 'unselecting'
    };

    if (args === undefined) {
      args = {};
    }

    if (name in preTriggerMap) {
      var preTriggerName = preTriggerMap[name];
      var preTriggerArgs = {
        prevented: false,
        name: name,
        args: args
      };

      actualTrigger.call(this, preTriggerName, preTriggerArgs);

      if (preTriggerArgs.prevented) {
        args.prevented = true;

        return;
      }
    }

    actualTrigger.call(this, name, args);
  };

  Select2.prototype.toggleDropdown = function () {
    if (this.options.get('disabled')) {
      return;
    }

    if (this.isOpen()) {
      this.close();
    } else {
      this.open();
    }
  };

  Select2.prototype.open = function () {
    if (this.isOpen()) {
      return;
    }

    this.trigger('query', {});
  };

  Select2.prototype.close = function () {
    if (!this.isOpen()) {
      return;
    }

    this.trigger('close', {});
  };

  Select2.prototype.isOpen = function () {
    return this.$container.hasClass('select2-container--open');
  };

  Select2.prototype.hasFocus = function () {
    return this.$container.hasClass('select2-container--focus');
  };

  Select2.prototype.focus = function (data) {
    // No need to re-trigger focus events if we are already focused
    if (this.hasFocus()) {
      return;
    }

    this.$container.addClass('select2-container--focus');
    this.trigger('focus', {});
  };

  Select2.prototype.enable = function (args) {
    if (this.options.get('debug') && window.console && console.warn) {
      console.warn(
        'Select2: The `select2("enable")` method has been deprecated and will' +
        ' be removed in later Select2 versions. Use $element.prop("disabled")' +
        ' instead.'
      );
    }

    if (args == null || args.length === 0) {
      args = [true];
    }

    var disabled = !args[0];

    this.$element.prop('disabled', disabled);
  };

  Select2.prototype.data = function () {
    if (this.options.get('debug') &&
        arguments.length > 0 && window.console && console.warn) {
      console.warn(
        'Select2: Data can no longer be set using `select2("data")`. You ' +
        'should consider setting the value instead using `$element.val()`.'
      );
    }

    var data = [];

    this.dataAdapter.current(function (currentData) {
      data = currentData;
    });

    return data;
  };

  Select2.prototype.val = function (args) {
    if (this.options.get('debug') && window.console && console.warn) {
      console.warn(
        'Select2: The `select2("val")` method has been deprecated and will be' +
        ' removed in later Select2 versions. Use $element.val() instead.'
      );
    }

    if (args == null || args.length === 0) {
      return this.$element.val();
    }

    var newVal = args[0];

    if ($.isArray(newVal)) {
      newVal = $.map(newVal, function (obj) {
        return obj.toString();
      });
    }

    this.$element.val(newVal).trigger('change');
  };

  Select2.prototype.destroy = function () {
    this.$container.remove();

    if (this.$element[0].detachEvent) {
      this.$element[0].detachEvent('onpropertychange', this._sync);
    }

    if (this._observer != null) {
      this._observer.disconnect();
      this._observer = null;
    } else if (this.$element[0].removeEventListener) {
      this.$element[0]
        .removeEventListener('DOMAttrModified', this._sync, false);
    }

    this._sync = null;

    this.$element.off('.select2');
    this.$element.attr('tabindex', this.$element.data('old-tabindex'));

    this.$element.removeClass('select2-hidden-accessible');
    this.$element.attr('aria-hidden', 'false');
    this.$element.removeData('select2');

    this.dataAdapter.destroy();
    this.selection.destroy();
    this.dropdown.destroy();
    this.results.destroy();

    this.dataAdapter = null;
    this.selection = null;
    this.dropdown = null;
    this.results = null;
  };

  Select2.prototype.render = function () {
    var $container = $(
      '<span class="select2 select2-container">' +
        '<span class="selection"></span>' +
        '<span class="dropdown-wrapper" aria-hidden="true"></span>' +
      '</span>'
    );

    $container.attr('dir', this.options.get('dir'));

    this.$container = $container;

    this.$container.addClass('select2-container--' + this.options.get('theme'));

    $container.data('element', this.$element);

    return $container;
  };

  return Select2;
});

S2.define('jquery-mousewheel',[
  'jquery'
], function ($) {
  // Used to shim jQuery.mousewheel for non-full builds.
  return $;
});

S2.define('jquery.select2',[
  'jquery',
  'jquery-mousewheel',

  './select2/core',
  './select2/defaults'
], function ($, _, Select2, Defaults) {
  if ($.fn.select2 == null) {
    // All methods that should return the element
    var thisMethods = ['open', 'close', 'destroy'];

    $.fn.select2 = function (options) {
      options = options || {};

      if (typeof options === 'object') {
        this.each(function () {
          var instanceOptions = $.extend(true, {}, options);

          var instance = new Select2($(this), instanceOptions);
        });

        return this;
      } else if (typeof options === 'string') {
        var ret;

        this.each(function () {
          var instance = $(this).data('select2');

          if (instance == null && window.console && console.error) {
            console.error(
              'The select2(\'' + options + '\') method was called on an ' +
              'element that is not using Select2.'
            );
          }

          var args = Array.prototype.slice.call(arguments, 1);

          ret = instance[options].apply(instance, args);
        });

        // Check if we should be returning `this`
        if ($.inArray(options, thisMethods) > -1) {
          return this;
        }

        return ret;
      } else {
        throw new Error('Invalid arguments for Select2: ' + options);
      }
    };
  }

  if ($.fn.select2.defaults == null) {
    $.fn.select2.defaults = Defaults;
  }

  return Select2;
});

  // Return the AMD loader configuration so it can be used outside of this file
  return {
    define: S2.define,
    require: S2.require
  };
}());

  // Autoload the jQuery bindings
  // We know that all of the modules exist above this, so we're safe
  var select2 = S2.require('jquery.select2');

  // Hold the AMD module references on the jQuery function that was just loaded
  // This allows Select2 to use the internal loader outside of this file, such
  // as in the language files.
  jQuery.fn.select2.amd = S2;

  // Return the Select2 instance for anyone who is importing it.
  return select2;
}));

// classmapstart

window.CLASSMAP = {
  alert: 'alert',
  close: 'close',
  modal: 'modal',
  btn: 'btn',
  carousel: 'carousel',
  panel: 'panel',
  dropdown: 'dropdown',
  dropdownMenu: 'dropdown-menu',
  popover: 'popover',
  tooltip: 'tooltip',
  nav: 'nav',
  pagination: 'pagination',
  tagGroup: 'tag-group'
}

// classmapstart

window.CLASSMAP = {
  alert: 'sui-alert',
  close: 'sui-close',
  btn: 'sui-btn',
  modal: 'sui-modal',
  carousel: 'sui-carousel',
  panel: 'sui-panel',
  dropdown: 'sui-dropdown',
  dropdownMenu: 'sui-dropdown-menu',
  popover: 'sui-popover',
  tooltip: 'sui-tooltip',
  nav: 'sui-nav',
  pagination: 'sui-pagination',
  tagGroup: 'sui-tag-group'
}

/*jshint -W054 */
// use template in underscore: http://underscorejs.org/
// By default, Underscore uses ERB-style template delimiters, change the
// following template settings to use alternative delimiters.
!function ($) {
  var escapeMap = {
    '&': '&amp;',
    '<': '&lt;',
    '>': '&gt;',
    '"': '&quot;',
    "'": '&#x27;',
    '`': '&#x60;'
  };

  // Functions for escaping and unescaping strings to/from HTML interpolation.
  var createEscaper = function(map) {
    var escaper = function(match) {
      return map[match];
    };
    // Regexes for identifying a key that needs to be escaped
    var keys = [];
    for(var k in escapeMap) keys.push(k);
    var source = '(?:' + keys.join('|') + ')';
    var testRegexp = RegExp(source);
    var replaceRegexp = RegExp(source, 'g');
    return function(string) {
      string = string == null ? '' : '' + string;
      return testRegexp.test(string) ? string.replace(replaceRegexp, escaper) : string;
    };
  };
  $.escape = createEscaper(escapeMap);

  var templateSettings = {
    evaluate    : /<%([\s\S]+?)%>/g,
    interpolate : /<%=([\s\S]+?)%>/g,
    escape      : /<%-([\s\S]+?)%>/g
  };

  // When customizing `templateSettings`, if you don't want to define an
  // interpolation, evaluation or escaping regex, we need one that is
  // guaranteed not to match.
  var noMatch = /(.)^/;

  // Certain characters need to be escaped so that they can be put into a
  // string literal.
  var escapes = {
    "'":      "'",
    '\\':     '\\',
    '\r':     'r',
    '\n':     'n',
    '\u2028': 'u2028',
    '\u2029': 'u2029'
  };

  var escaper = /\\|'|\r|\n|\u2028|\u2029/g;

  var escapeChar = function(match) {
    return '\\' + escapes[match];
  };

  // JavaScript micro-templating, similar to John Resig's implementation.
  // Underscore templating handles arbitrary delimiters, preserves whitespace,
  // and correctly escapes quotes within interpolated code.
  // NB: `oldSettings` only exists for backwards compatibility.
  $.template = function(text, settings, oldSettings) {
    if (!settings && oldSettings) settings = oldSettings;
    settings = $.extend({}, settings, templateSettings);

    // Combine delimiters into one regular expression via alternation.
    var matcher = RegExp([
      (settings.escape || noMatch).source,
      (settings.interpolate || noMatch).source,
      (settings.evaluate || noMatch).source
    ].join('|') + '|$', 'g');

    // Compile the template source, escaping string literals appropriately.
    var index = 0;
    var source = "__p+='";
    text.replace(matcher, function(match, escape, interpolate, evaluate, offset) {
      source += text.slice(index, offset).replace(escaper, escapeChar);
      index = offset + match.length;

      if (escape) {
        source += "'+\n((__t=(" + escape + "))==null?'':_.escape(__t))+\n'";
      } else if (interpolate) {
        source += "'+\n((__t=(" + interpolate + "))==null?'':__t)+\n'";
      } else if (evaluate) {
        source += "';\n" + evaluate + "\n__p+='";
      }

      // Adobe VMs need the match returned to produce the correct offest.
      return match;
    });
    source += "';\n";

    // If a variable is not specified, place data values in local scope.
    if (!settings.variable) source = 'with(obj||{}){\n' + source + '}\n';

    source = "var __t,__p='',__j=Array.prototype.join," +
      "print=function(){__p+=__j.call(arguments,'');};\n" +
      source + 'return __p;\n';

    try {
      var render = new Function(settings.variable || 'obj', '_', source);
    } catch (e) {
      e.source = source;
      throw e;
    }

    var template = function(data) {
      return render.call(this, data, $);
    };

    // Provide the compiled source as a convenience for precompilation.
    var argument = settings.variable || 'obj';
    template.source = 'function(' + argument + '){\n' + source + '}';

    return template;
  };
}(window.jQuery);

/* ===================================================
 * bootstrap-transition.js v2.3.2
 * http://getbootstrap.com/2.3.2/javascript.html#transitions
 * ===================================================
 * Copyright 2013 Twitter, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * ========================================================== */


!function ($) {

  "use strict";


  /* CSS TRANSITION SUPPORT (http://www.modernizr.com/)
   * ======================================================= */

  $(function () {

    $.support.transition = (function () {

      var transitionEnd = (function () {

        var el = document.createElement('bootstrap')
          , transEndEventNames = {
               'WebkitTransition' : 'webkitTransitionEnd'
            ,  'MozTransition'    : 'transitionend'
            ,  'OTransition'      : 'oTransitionEnd otransitionend'
            ,  'transition'       : 'transitionend'
            }
          , name

        for (name in transEndEventNames){
          if (el.style[name] !== undefined) {
            return transEndEventNames[name]
          }
        }

      }())

      return transitionEnd && {
        end: transitionEnd
      }

    })()

  })

}(window.jQuery);

//msgs组件添加叉叉关闭功能
!function ($) {
  $(document).on('click.msgs', '[data-dismiss="msgs"]', function (e) {
    e.preventDefault();
    var $this = $(this),
        $msg = $this.parents('.sui-msg').remove();
    
    var id = $msg.attr("id");
    if(id && $msg.hasClass("remember")) {
      localStorage.setItem("sui-msg-" + id, 1);
    }
  })

  $(function() {
    $(".sui-msg.remember").each(function() {
      var $this = $(this);
      var id = $this.attr("id");
      if(!id) return;
      localStorage.getItem("sui-msg-" + id) || $this.show();
    });
  });
}(window.jQuery);

!function($) {
  /**
   * filesize  获得计算机文件体积大小(byte)对人更友好的格式
   * @param  {number | string}  可正确转为数字的数字（int、float）、字符串
   * @param  {Object} opt 可选的配置，目前只有保留的小数位数，默认为2
   */
  "use strict";
  $.extend({
    filesize: function(arg, options){
      var result = ""
        , opt = options || {}
        , num = Number(arg)
        , bytes = ["B", "kB", "MB", "GB", "TB", "PB", "EB", "ZB", "YB"]
        , round = opt.round !== undefined ? opt.round : 2
        , e;

      if (isNaN(arg) || num < 0) {
        throw new Error("无效的size参数");
      }

      if (num === 0) {
        result = "0B";
      }
      else {
        e = Math.floor(Math.log(num) / Math.log(1000));

        if (e > 8) {
          result = result * (1000 * (e - 8));
          e = 8;
        }

        result = num / Math.pow(2, (e * 10));

        result = result.toFixed(e > 0 ? round : 0) + bytes[e];
      }

      return result;
    }
  })
}(jQuery);

/* ============================================================
 * bootstrap-button.js v2.3.2
 * http://getbootstrap.com/2.3.2/javascript.html#buttons
 * ============================================================
 * Copyright 2013 Twitter, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * ============================================================ */


!function ($) {

  "use strict";


 /* BUTTON PUBLIC CLASS DEFINITION
  * ============================== */

  var Button = function (element, options) {
    this.$element = $(element)
    this.options = $.extend({}, $.fn.button.defaults, options)
  }

  Button.prototype.setState = function (state) {
    var d = 'disabled'
      , $el = this.$element
      , data = $el.data()
      , val = $el.is('input') ? 'val' : 'html'

    state = state + 'Text'
    data.resetText || $el.data('resetText', $el[val]())

    $el[val](data[state] || this.options[state])

    // push to event loop to allow forms to submit
    setTimeout(function () {
      state == 'loadingText' ?
        $el.addClass(d).attr(d, d) :
        $el.removeClass(d).removeAttr(d)
    }, 0)
  }

  Button.prototype.toggle = function () {
    var $parent = this.$element.closest('[data-toggle="buttons-radio"]')

    $parent && $parent
      .find('.active')
      .removeClass('active')

    this.$element.toggleClass('active')
  }


 /* BUTTON PLUGIN DEFINITION
  * ======================== */

  var old = $.fn.button

  $.fn.button = function (option) {
    return this.each(function () {
      var $this = $(this)
        , data = $this.data('button')
        , options = typeof option == 'object' && option
      if (!data) $this.data('button', (data = new Button(this, options)))
      if (option == 'toggle') data.toggle()
      else if (option) data.setState(option)
    })
  }

  $.fn.button.defaults = {
    loadingText: 'loading...'
  }

  $.fn.button.Constructor = Button


 /* BUTTON NO CONFLICT
  * ================== */

  $.fn.button.noConflict = function () {
    $.fn.button = old
    return this
  }


 /* BUTTON DATA-API
  * =============== */

  $(document).on('click.button.data-api', '[data-toggle^=button]', function (e) {
    var $btn = $(e.target)
    if (!$btn.hasClass('btn')) $btn = $btn.closest('.btn')
    $btn.button('toggle')
  })

}(window.jQuery);

//proxy dropdown to document, so there is no need to init
!function ($) {

  "use strict";
  var toggleSelector = '[data-toggle=dropdown]',
      containerClass = ".sui-dropdown, .sui-dropup";
  var clearMenus = function () {
    $('.sui-dropdown.open, .sui-dropup.open, .sui-btn-group.open').each(function () {
      $(this).removeClass('open')
    })
  }
  var getContainer = function($el) {
    var $parent = $el.parent()
    if ($parent.hasClass("dropdown-inner")) return $parent.parent()
    return $parent;
  }
  var show = function() {
    clearMenus()
    var $el = $(this),
        $container = getContainer($el);
    if ($container.is('.disabled, :disabled')) return
    $container.addClass("open")
    $el.focus()
    return false; 
  }
  var hide = function() {
    var $el = $(this),
        $container = getContainer($el);
    if ($container.is('.disabled, :disabled')) return
    $container.removeClass("open")
    $el.focus()
    return false;
  }

  var toggle = function() {
    var $el = $(this),
        $container = getContainer($el),
        active = $container.hasClass("open");
    clearMenus()
    if ($container.is('.disabled, :disabled')) return
    if(active) $container.removeClass("open")
    else $container.addClass("open")
    $el.focus()
    return false;
  }

  var setValue = function() {
    var $target = $(this),
        $li = $target.parent(),
        $container = $target.parents(".sui-dropdown, .sui-dropup"),
        $menu = $container.find("[role='menu']");
    if($li.is(".disabled, :disabled")) return;
    if ($container.is('.disabled, :disabled')) return;
    $container.find("input").val($target.attr("value") || "").trigger("change")
    $container.find(toggleSelector+ ' span').html($target.html())
    $menu.find(".active").removeClass("active")
    $li.addClass("active")
  }


  $(document).on("mouseover", containerClass, function() {
    var $container = $(this), el;
    if(el = $container.find('[data-trigger="hover"]')[0]) show.call(el);
  })
  $(document).on("mouseleave", containerClass, function() {
    var $container = $(this), el;
    if(el = $container.find('[data-trigger="hover"]')[0]) hide.call(el);
  })
  $(document).on("click", "[data-toggle='dropdown']", toggle)
  $(document).on("click", function() {
    var $this = $(this);
    if(!($this.is(containerClass) || $this.parents(containerClass)[0])) clearMenus()
  })

  $(document).on("click", ".select .sui-dropdown-menu a", setValue)


  // Dropdown api
  $.fn.dropdown = function(option) {
    return this.each(function() {
      $(this).attr("data-toggle", "dropdown");
      if(typeof option == 'string') {
        switch(option) {
          case "show":
            show.call(this);
            break;
          case "hide":
            hide.call(this);
            break;
          case "toggle":
            toggle.call(this);
            break;
        }
      }
    });
  }

}(window.jQuery);

 //jscs:disable 

 /**
 * toast.js
 /*jshint scripturl:true */
 /*jshint funcscope:true */
 /*jshint -W004 */
 /*jshint unused:false*/

 /* jshint -W099 */


!function ($) {
  "use strict";
  /*jshint validthis: true */
 /* BUTTON PUBLIC CLASS DEFINITION
  * ============================== */
  var template = '<div class=" toast"><h5 class="toast_text msg-con"></h5><s class="msg-icon"></s></div>';

  var Toast = function (options) {
    var $toast = null;
    if(typeof options === typeof 'a'){
      this.options = $.extend({}, this.defaults);
      this.options.text = options;
      if(arguments[2]){
        this.options.position= arguments[2];
      }
      if(arguments[1]){
        this.options.type = arguments[1];
      }
      
    }else{
      this.options = $.extend({}, this.defaults, options);
    }
    return this.render();
  }

  Toast.prototype = {
    Constructor : Toast,
     render: function(){
      var options = this.options;
      var message = ".toast";
      var text = ".toast_text";
      var cssPrefix = "toast-";
      $(message).remove();
      this.el = $(template);
      this.el.appendTo(document.body);
      $(text).html(options.text); //this.el.find(text)
      options.position.replace(/(\S+)/g, cssPrefix) ;
      this.el.addClass(options.position).addClass(cssPrefix+options.type);
      this.show();
    
      
      // if(options.closeButton){
      //   this.el.addClass('show-close-btn');
      // }
      if(options.closeOnClick){
        this.el.click($.proxy(this.hide,this));
      }
    },
    hide : function(callback){  // hide : function(duration, callback);
      this.el.removeClass('toast-in');
      var self = this.el;
      setTimeout(function(){self.remove()},1000);
    },
    show : function(duration, callback){  // show : function(duration, callback);
      var classes = this.el.attr("class");
      var vertical = this.el.hasClass('top')&&"top"||this.el.hasClass('bottom')&&"bottom"||"middle";
      var horizontal = this.el.hasClass('left')&&"left"||this.el.hasClass('right')&&"right"||"center";
      if(horizontal=="center"){
        var mlwidth = -(this.el.width()/2);
        this.el.css("margin-left",mlwidth+"px");
      }
      if(vertical=="middle"){
        var mtheight = -(this.el.height()/2);
        this.el.css("margin-top",mtheight);
      }
      var addclass = function(){
        this.el.addClass('toast-in')
      }
      setTimeout($.proxy(addclass,this));
      setTimeout($.proxy(this.hide,this),this.options.timeout);
    }
  } 

  var old = $.toast
  
  $.toast = function(arg1,arg2,arg3){
    return new Toast(arg1,arg2, arg3);
  }

  Toast.prototype.defaults = {
    position: 'center',
    type: 'default',
    // speed: 500,
    timeout: 3000,
    // closeButton: false,
    closeOnClick: true,
    text:''
  };

  $.toast.Constructor = Toast;

 /* BUTTON NO CONFLICT
  * ================== */

  $.toast.noConflict = function () {
    $.toast = old;
    return this;
  }

 /* BUTTON DATA-API
  * =============== */ 
}(window.jQuery);

/* =========================================================
 * bootstrap-modal.js v2.3.2
 * http://getbootstrap.com/2.3.2/javascript.html#modals
 * =========================================================
 * @file bootstrap-modal.js
 * @brief 弹层dpl，扩展自bootstrap2.3.2
 * @author banbian, zangtao.zt@alibaba-inc.com
 * @date 2014-01-14
 */

!function ($) {
  "use strict";
 /* MODAL CLASS DEFINITION
  * ====================== */
  var Modal = function (element, options) {
    this.options = options
    //若element为null，则表示为js触发的alert、confirm弹层
    if (element === null) {
      var TPL = ''
        //data-hidetype表明这类简单dialog调用hide方法时会从文档树里删除节点
        + '<div class="sui-modal hide fade" tabindex="-1" role="dialog" id={%id%} data-hidetype="remove">'
          + '<div class="modal-dialog">'
            + '<div class="modal-content">'
              + '<div class="modal-header">'
                + (options.closeBtn ? '<button type="button" class="sui-close" data-dismiss="modal" aria-hidden="true">&times;</button>' : '')
                + '<h4 class="modal-title">{%title%}</h4>'
              + '</div>'
              + '<div class="modal-body ' + (options.hasfoot ? '' : 'no-foot') + '">{%body%}</div>'
              + (options.hasfoot ? '<div class="modal-footer">'
              //增加data-ok="modal"参数
                + '<button type="button" class="sui-btn btn-primary btn-large" data-ok="modal">{%ok_btn%}</button>'
                + (options.cancelBtn ? '<button type="button" class="sui-btn btn-default btn-large" data-dismiss="modal">{%cancel_btn%}</button>' : '')
              + '</div>' : '')
            + '</div>'
          + '</div>'
        + '</div>';
      element = $(TPL.replace('{%title%}', options.title)
                      .replace('{%body%}', options.body)
                      .replace('{%id%}', options.id)
                      .replace('{%ok_btn%}', options.okBtn)
                      .replace('{%cancel_btn%}', options.cancelBtn))
      //如果不支持动画显示（默认支持）
      $('body').append(element)
    }
    this.$element = $(element)
    if (!options.transition) $(element).removeClass('fade')
    this.init()

  }
  //对外接口只有toggle, show, hide
  Modal.prototype = {
    constructor: Modal
    ,init: function () {
      var ele = this.$element
        , opt = this.options
        , w = opt.width
        , h = opt.height
        , self = this
        , standardW = {
            small: 440  //默认宽度
            ,normal: 590
            ,large: 790
          }
      ele.delegate('[data-dismiss="modal"]', 'click.dismiss.modal', $.proxy(this.hide, this))
        .delegate(':not(.disabled)[data-ok="modal"]', 'click.ok.modal', $.proxy(this.okHide, this))
      if (w) {
        standardW[w] && (w = standardW[w])
        ele.width(w).css('margin-left', -parseInt(w) / 2)
      }
      h && ele.find('.modal-body').height(h);
      if (typeof this.options.remote == 'string') {
        this.$element.find('.modal-body').load(this.options.remote)
      }
    }

    , toggle: function () {
        return this[!this.isShown ? 'show' : 'hide']()
    }

    , show: function () {
        var self = this
          , e = $.Event('show')
          , ele = this.$element
        ele.trigger(e)
        if (this.isShown || e.isDefaultPrevented()) return
        this.isShown = true
        this.escape()
        this.backdrop(function () {
          var transition = $.support.transition && ele.hasClass('fade')
          if (!ele.parent().length) {
            ele.appendTo(document.body) //don't move modals dom position
          }
          //处理dialog在页面中的定位
          self.resize()

          ele.show()
          if (transition) {
            ele[0].offsetWidth // force reflow
          }
          ele
            .addClass('in')
            .attr('aria-hidden', false)
          self.enforceFocus()
          transition ?
            ele.one($.support.transition.end, function () {
              callbackAfterTransition(self)
            }) :
            callbackAfterTransition(self)

          function callbackAfterTransition(self) {
            self.$element.focus().trigger('shown')
            if (self.options.timeout > 0) {
              self.timeid = setTimeout(function(){
                self.hide();
              }, self.options.timeout)
            }
          }
        })
        return ele
      }

    , hide: function (e) {
        e && e.preventDefault()
        var $ele = this.$element
        e = $.Event('hide')
        this.hideReason != 'ok' && $ele.trigger('cancelHide')
        $ele.trigger(e)
        if (!this.isShown || e.isDefaultPrevented()) return
        this.isShown = false
        this.escape()
        $(document).off('focusin.modal')
        this.timeid && clearTimeout(this.timeid)
        $ele
          .removeClass('in')
          .attr('aria-hidden', true)
        $.support.transition && $ele.hasClass('fade') ?
          this.hideWithTransition() :
          this.hideModal()
        return $ele
      }
    , okHide: function(e){
        var self = this
        // 如果e为undefined而不是事件对象，则说明不是点击确定按钮触发的执行，而是手工调用，
        // 那么直接执行hideWithOk
        if (!e) {
          hideWithOk()
          return
        }
        var fn = this.options.okHide
          , ifNeedHide = true
        if (!fn) {
            var eventArr = $._data(this.$element[0], 'events').okHide
            if (eventArr && eventArr.length) {
                fn = eventArr[eventArr.length - 1].handler;
            }
        }
        typeof fn == 'function' && (ifNeedHide = fn.call(this))
        //显式返回false，则不关闭对话框
        if (ifNeedHide !== false){
          hideWithOk()
        }
        function hideWithOk (){
          self.hideReason = 'ok'
          self.hide(e)
        }
        return self.$element
    }
    //对话框内部遮罩层
    , shadeIn: function () {
        var $ele = this.$element
        if ($ele.find('.shade').length) return
        var $shadeEle = $('<div class="shade in" style="background:' + this.options.bgcolor + '"></div>')
        $shadeEle.appendTo($ele)
        this.hasShaded = true
        return this.$element
    }
    , shadeOut: function () {
        this.$element.find('.shade').remove()
        this.hasShaded = false
        return this.$element
    }
    , shadeToggle: function () {
        return this[!this.hasShaded ? 'shadeIn' : 'shadeOut']()
    }
    // dialog展示后，如果高度动态发生变化，比如塞入异步数据后撑高容器，则调用$dialog.modal('resize'),使dialog重新定位居中
    , resize: function() {
      var ele = this.$element
        ,eleH = ele.height()
        ,winH = $(window).height()
        ,mt = 0
      if (eleH >= winH)
          mt = -winH/2
      else
          mt = (winH - eleH) / (1 + 1.618) - winH / 2
      ele.css('margin-top', parseInt(mt))
      return ele
    }
    , enforceFocus: function () {
        var self = this
        //防止多实例时循环触发
        $(document).off('focusin.modal') .on('focusin.modal', function (e) {
          if (self.$element[0] !== e.target && !self.$element.has(e.target).length) {
            self.$element.focus()
          }
        })
      }

    , escape: function () {
        var self = this
        if (this.isShown && this.options.keyboard) {
          this.$element.on('keyup.dismiss.modal', function ( e ) {
            e.which == 27 && self.hide()
          })
        } else if (!this.isShown) {
          this.$element.off('keyup.dismiss.modal')
        }
      }

    , hideWithTransition: function () {
        var self = this
          , timeout = setTimeout(function () {
              self.$element.off($.support.transition.end)
              self.hideModal()
            }, 300)
        this.$element.one($.support.transition.end, function () {
          clearTimeout(timeout)
          self.hideModal()
        })
      }

    , hideModal: function () {
        var self = this
          ,ele = this.$element
        ele.hide()
        this.backdrop(function () {
          self.removeBackdrop()
          ele.trigger(self.hideReason == 'ok' ? 'okHidden' : 'cancelHidden')
          self.hideReason = null
          ele.trigger('hidden')
          //销毁静态方法生成的dialog元素 , 默认只有静态方法是remove类型
          ele.data('hidetype') == 'remove' && ele.remove()
        })
      }

    , removeBackdrop: function () {
        this.$backdrop && this.$backdrop.remove()
        this.$backdrop = null
      }

    , backdrop: function (callback) {
        var self = this
          , animate = this.$element.hasClass('fade') ? 'fade' : ''
          , opt = this.options
        if (this.isShown) {
          var doAnimate = $.support.transition && animate
          //如果显示背景遮罩层
          if (opt.backdrop !== false) {
            this.$backdrop = $('<div class="sui-modal-backdrop ' + animate + '" style="background:' + opt.bgcolor + '"/>')
            .appendTo(document.body)
            //遮罩层背景黑色半透明
            this.$backdrop.click(
              opt.backdrop == 'static' ?
                $.proxy(this.$element[0].focus, this.$element[0])
              : $.proxy(this.hide, this)
            )
            if (doAnimate) this.$backdrop[0].offsetWidth // force reflow
            this.$backdrop.addClass('in ')
            if (!callback) return
            doAnimate ?
              this.$backdrop.one($.support.transition.end, callback) :
              callback()
          } else {
            callback && callback()
          }
        } else {
          if (this.$backdrop) {
            this.$backdrop.removeClass('in')
            $.support.transition && this.$element.hasClass('fade')?
              this.$backdrop.one($.support.transition.end, callback) :
              callback()
          } else {
            callback && callback();
          }
        }
      }
  }

 /* MODAL PLUGIN DEFINITION
  * ======================= */


  var old = $.fn.modal

  $.fn.modal = function (option) {
    //this指向dialog元素Dom，
    //each让诸如 $('#qqq, #eee').modal(options) 的用法可行。
    return this.each(function () {
      var $this = $(this)
        , data = $this.data('modal')
        , options = $.extend({}, $.fn.modal.defaults, $this.data(), typeof option == 'object' && option)
      //这里判断的目的是：第一次show时实例化dialog，之后的show则用缓存在data-modal里的对象。
      if (!data) $this.data('modal', (data = new Modal(this, options)))

      //如果是$('#xx').modal('toggle'),务必保证传入的字符串是Modal类原型链里已存在的方法。否则会报错has no method。
      if (typeof option == 'string') data[option]()
      else data.show()
    })
  }

  $.fn.modal.defaults = {
      backdrop: true
    , bgcolor: '#000'
    , keyboard: true
    , hasfoot: true
    , closeBtn: true
    , transition: true
  }

  $.fn.modal.Constructor = Modal
 /* MODAL NO CONFLICT
  * ================= */

  $.fn.modal.noConflict = function () {
    $.fn.modal = old
    return this
  }

 /* MODAL DATA-API
  * ============== */

  $(document).on('click.modal.data-api', '[data-toggle="modal"]', function (e) {
    var $this = $(this)
      , href = $this.attr('href')
      //$target这里指dialog本体Dom(若存在)
      //通过data-target="#foo"或href="#foo"指向
      , $target = $($this.attr('data-target') || (href && href.replace(/.*(?=#[^\s]+$)/, ''))) //strip for ie7
      //remote,href属性如果以#开头，表示等同于data-target属性
      , option = $target.data('modal') ? 'toggle' : $this.data()
    e.preventDefault()
    $target
      .modal(option)
      .one('hide', function () {
        $this.focus()
    })
  })

  /* jquery弹层静态方法，用于很少重复，不需记住状态的弹层，可方便的直接调用，最简单形式就是$.alert('我是alert')
   * 若弹层内容是复杂的Dom结构， 建议将弹层html结构写到模版里，用$(xx).modal(options) 调用
   *
   * example
   * $.alert({
   *  title: '自定义标题'
   *  body: 'html' //必填
   *  okBtn : '好的'
   *  cancelBtn : '雅达'
   *  closeBtn: true
   *  keyboard: true   是否可由esc按键关闭
   *  backdrop: true   决定是否为模态对话框添加一个背景遮罩层。另外，该属性指定'static'时，表示添加遮罩层，同时点击模态对话框的外部区域不会将其关闭。

   *  bgcolor : '#123456'  背景遮罩层颜色
   *  width: {number|string(px)|'small'|'normal'|'large'}推荐优先使用后三个描述性字符串，统一样式
   *  height: {number|string(px)} 高度
   *  timeout: {number} 1000    单位毫秒ms ,dialog打开后多久自动关闭
   *  transition: {Boolean} 是否以动画弹出对话框，默认为true。HTML使用方式只需把模板里的fade的class去掉即可
   *  hasfoot: {Boolean}  是否显示脚部  默认true
   *  remote: {string} 如果提供了远程url地址，就会加载远端内容
   *  show:     fn --------------function(e){}
   *  shown:    fn
   *  hide:     fn
   *  hidden:   fn
   *  okHide:   function(e){alert('点击确认后、dialog消失前的逻辑,
   *            函数返回true（默认）则dialog关闭，反之不关闭;若不传入则默认是直接返回true的函数
   *            注意不要人肉返回undefined！！')}
   *  okHidden: function(e){alert('点击确认后、dialog消失后的逻辑')}
   *  cancelHide: fn
   *  cancelHidden: fn
   * })
   *
   */
  $.extend({
    _modal: function(dialogCfg, customCfg){
      var modalId = +new Date()

        ,finalCfg = $.extend({}, $.fn.modal.defaults
          , dialogCfg
          , {id: modalId, okBtn: '确定'}
          , (typeof customCfg == 'string' ? {body: customCfg} : customCfg))
      var dialog = new Modal(null, finalCfg)
        , $ele = dialog.$element
      _bind(modalId, finalCfg)
      $ele.data('modal', dialog).modal('show')
      function _bind(id, eList){
        var eType = ['show', 'shown', 'hide', 'hidden', 'okHidden', 'cancelHide', 'cancelHidden']
        $.each(eType, function(k, v){
          if (typeof eList[v] == 'function'){
            $(document).on(v, '#'+id, $.proxy(eList[v], $('#' + id)[0]))
          }
        })
      }
      //静态方法对话框返回对话框元素的jQuery对象
      return $ele
    }
    //为最常见的alert，confirm建立$.modal的快捷方式，
    ,alert: function(customCfg){
      var dialogCfg = {
        type: 'alert'
        ,title: '注意'
      }
      return $._modal(dialogCfg, customCfg)
    }
    ,confirm: function(customCfg){
      var dialogCfg = {
        type: 'confirm'
        ,title: '提示'
        ,cancelBtn: '取消'
      }
      return $._modal(dialogCfg, customCfg)
    }
  })

}(window.jQuery);

/* ===========================================================
 * bootstrap-tooltip.js v2.3.2
 * http://getbootstrap.com/2.3.2/javascript.html#tooltips
 * Inspired by the original jQuery.tipsy by Jason Frame
 * ===========================================================
 * Copyright 2013 Twitter, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * ========================================================== */


!function ($) {

  "use strict";


 /* TOOLTIP PUBLIC CLASS DEFINITION
  * =============================== */

  //element为触发元素，如标识文字链
  var Tooltip = function (element, options) {
    this.init('tooltip', element, options)
  }

  Tooltip.prototype = {

    constructor: Tooltip

  , init: function (type, element, options) {
      var eventIn
        , eventOut
        , triggers
        , trigger
        , i

      this.type = type
      this.$element = $(element)
      this.options = this.getOptions(options)
      this.enabled = true
      this.hoverState = 'out'

      triggers = this.options.trigger.split(' ')

      for (i = triggers.length; i--;) {
        trigger = triggers[i]
        if (trigger == 'click') {
          this.$element.on('click.' + this.type, this.options.selector, $.proxy(this.toggle, this))

        } else if (trigger != 'manual') {
          eventIn = trigger == 'hover' ? 'mouseenter' : 'focus'
          eventOut = trigger == 'hover' ? 'mouseleave' : 'blur'
          this.$element.on(eventIn + '.' + this.type, this.options.selector, $.proxy(this.enter, this))
          this.$element.on(eventOut + '.' + this.type, this.options.selector, $.proxy(this.leave, this))
        }
      }

      this.options.selector ?
        (this._options = $.extend({}, this.options, { trigger: 'manual', selector: '' })) :
        this.fixTitle()
    }

  , getOptions: function (options) {
      options = $.extend({}, $.fn[this.type].defaults, this.$element.data(), options)

      var foot = options.type == 'confirm' ? '<div class="tooltip-footer"><button class="sui-btn btn-primary" data-ok="tooltip">确定</button><button class="sui-btn btn-default" data-dismiss="tooltip">取消</button></div>' : ''
      //根据tooltip的type类型构造tip模版
      options.template = '<div class="sui-tooltip ' + options.type + '" style="overflow:visible"><div class="tooltip-arrow"><div class="tooltip-arrow cover"></div></div><div class="tooltip-inner"></div>' + foot + '</div>'
      options.type == 'confirm' && (options.html = true)

      if (options.delay && typeof options.delay == 'number') {
        options.delay = {
          show: options.delay
        , hide: options.delay
        }
      }

      return options
    }

  , enter: function (e) {
      var defaults = $.fn[this.type].defaults
        , options = {}
        , self

      this._options && $.each(this._options, function (key, value) {
        if (defaults[key] != value) options[key] = value
      }, this)

      self = $(e.currentTarget)[this.type](options).data(this.type)

      clearTimeout(self.timeout)
      if (this.hoverState == 'out') {
        this.hoverState = 'in'
        this.tip().off($.support.transition && $.support.transition.end)
        if (!this.options.delay || !this.options.delay.show) return this.show()
        this.timeout = setTimeout(function() {
          if (self.hoverState == 'in') self.show()
        }, self.options.delay.show)
      }
    }

  , leave: function (e) {
      var self = $(e.currentTarget)[this.type](this._options).data(this.type)
      if (this.timeout) clearTimeout(this.timeout)
      if (!self.options.delay || !self.options.delay.hide) return self.hide()

      this.timeout = setTimeout(function() {
        //isHover 为0或undefined，undefined:没有移到tip上过
        if (!self.isTipHover) {
          self.hoverState = 'out'
        }
        if (self.hoverState == 'out') self.hide()
      }, self.options.delay.hide)
    }

  , show: function () {
      var $tip
        , pos
        , actualWidth
        , actualHeight
        , placement
        , tp
        , e = $.Event('show')
        , opt = this.options
        , align = opt.align
        , self = this

      if (this.hasContent() && this.enabled) {
        this.$element.trigger(e)
        if (e.isDefaultPrevented()) return
        $tip = this.tip()
        this.setContent()

        if (opt.animation) {
          $tip.addClass('fade')
        }

        placement = typeof opt.placement == 'function' ?
          opt.placement.call(this, $tip[0], this.$element[0]) :
          opt.placement

        $tip
          .detach()
          .css({ top: 0, left: 0, display: 'block' })

        opt.container ? $tip.appendTo(opt.container) : $tip.insertAfter(this.$element)
        if (/\bhover\b/.test(opt.trigger)) {
          $tip.hover(function(){
            self.isTipHover = 1
          }, function(){
            self.isTipHover = 0
            self.hoverState = 'out'
            $tip.detach()
          })
        }
        this.setWidth()
        pos = this.getPosition()

        actualWidth = $tip[0].offsetWidth
        actualHeight = $tip[0].offsetHeight

        //+ - 7修正，和css对应，勿单独修改
        var d = opt.type == 'attention' ? 5 : 7
        tp = positioning();
        this.applyPlacement(tp, placement)
        this.applyAlign(align, pos)
        this.$element.trigger('shown')
      }
      //确定tooltip布局对齐方式
      function positioning (){
        var _left = pos.left + pos.width / 2 - actualWidth / 2
          , _top = pos.top + pos.height / 2 - actualHeight / 2
        switch (align) {
          case 'left':
            _left = pos.left
            break
          case 'right':
            _left = pos.left - actualWidth + pos.width
            break
          case 'top':
            _top = pos.top
            break
          case 'bottom':
            _top = pos.top - actualHeight + pos.height
            break
        }
        switch (placement) {
          case 'bottom':
            tp = {top: pos.top + pos.height + d, left: _left}
            break
          case 'top':
            tp = {top: pos.top - actualHeight - d, left: _left }
            break
          case 'left':
            tp = {top: _top, left: pos.left - actualWidth - d}
            break
          case 'right':
            tp = {top: _top, left: pos.left + pos.width + d}
            break
        }
        return tp
      }

    }

  , applyPlacement: function(offset, placement){
      var $tip = this.tip()
        , width = $tip[0].offsetWidth
        , height = $tip[0].offsetHeight
        , actualWidth
        , actualHeight
        , delta
        , replace

      $tip
        .offset(offset)
        .addClass(placement)
        .addClass('in')

      actualWidth = $tip[0].offsetWidth
      actualHeight = $tip[0].offsetHeight

      if (placement == 'top' && actualHeight != height) {
        offset.top = offset.top + height - actualHeight
        replace = true
      }

      if (placement == 'bottom' || placement == 'top') {
        delta = 0

        if (offset.left < 0){
          delta = offset.left * -2
          offset.left = 0
          $tip.offset(offset)
          actualWidth = $tip[0].offsetWidth
          actualHeight = $tip[0].offsetHeight
        }

        this.replaceArrow(delta - width + actualWidth, actualWidth, 'left')
      } else {
        this.replaceArrow(actualHeight - height, actualHeight, 'top')
      }

      if (replace) $tip.offset(offset)
    }
  , applyAlign: function(align, tipPos){
      var $tip = this.tip()
      , actualWidth = $tip[0].offsetWidth
      , actualHeight = $tip[0].offsetHeight
      , css = {}
      switch (align) {
        case 'left':
          if (tipPos.width < actualWidth)
            css = {left: tipPos.width / 2}
          break
        case 'right':
          if (tipPos.width < actualWidth)
            css = {left: actualWidth - tipPos.width / 2}
          break
        case 'top':
          if (tipPos.height < actualHeight)
            css = {top: tipPos.height / 2}
          break
        case 'bottom':
          if (tipPos.height < actualHeight)
            css = {top: actualHeight - tipPos.height / 2}
          break
      }
      align != 'center' && $tip.find('.tooltip-arrow').first().css(css)
 
  }

  , replaceArrow: function(delta, dimension, position){
      this
        .arrow()
        .css(position, delta ? (50 * (1 - delta / dimension) + "%") : '')
    }

  , setWidth: function() {
      var opt = this.options
        , width = opt.width
        , widthLimit = opt.widthlimit
        , $tip = this.tip()
      //人工设置宽度，则忽略最大宽度限制
      if (width) {
        $tip.width(width)
      } else { 
        //宽度限制逻辑
        if (widthLimit === true) {
          $tip.css('max-width', '400px')
        } else {
          var val
          widthLimit === false && (val = 'none')
          typeof opt.widthlimit == 'string' && (val = widthLimit)
          $tip.css('max-width', val)
        }
      } 
  }

  , setContent: function () {
      var $tip = this.tip()
        , title = this.getTitle()

      $tip.find('.tooltip-inner')[this.options.html ? 'html' : 'text'](title)
      $tip.removeClass('fade in top bottom left right')
    }

  , hide: function () {
      var $tip = this.tip()
        , e = $.Event('hide')
        , self = this
        , opt = this.options

      this.$element.trigger(e)
      if (e.isDefaultPrevented()) return

      $tip.removeClass('in')
      if (typeof opt.hide == 'function') {
        opt.hide.call(self.$element)
      }

      function removeWithAnimation() {
        self.timeout = setTimeout(function () {
          $tip.off($.support.transition.end).detach()
        }, 500)

        $tip.one($.support.transition.end, function () {
          clearTimeout(self.timeout)
          $tip.detach()
        })
      }

      $.support.transition && this.$tip.hasClass('fade') ?
        removeWithAnimation() :
        ($tip.detach())
      this.$element.trigger('hidden')

      return this
    }

  , fixTitle: function () {
      var $e = this.$element
      //只有无js激活方式才处理title属性。同时html属性data-original-title必须附加到触发元素,即使是js调用生成的tooltip。
      if ($e.attr('title') || typeof($e.attr('data-original-title')) != 'string') {
        if ($e.data('toggle') == 'tooltip') {
          $e.attr('data-original-title', $e.attr('title') || '').attr('title', '')
        } else {
          $e.attr('data-original-title', '')
        }
      }
    }

  , hasContent: function () {
      return this.getTitle()
    }

  , getPosition: function () {
      var el = this.$element[0]
      return $.extend({}, (typeof el.getBoundingClientRect == 'function') ? el.getBoundingClientRect() : {
        width: el.offsetWidth
      , height: el.offsetHeight
      }, this.$element.offset())
    }

  , getTitle: function () {
      var title
        , $e = this.$element
        , o = this.options

      title = $e.attr('data-original-title')
        || (typeof o.title == 'function' ? o.title.call($e[0]) :  o.title)
      return title
    }

  , tip: function () {
      return this.$tip = this.$tip || $(this.options.template)
    }

  , arrow: function(){
      return this.$arrow = this.$arrow || this.tip().find(".tooltip-arrow")
    }

  , validate: function () {
      if (!this.$element[0].parentNode) {
        this.hide()
        this.$element = null
        this.options = null
      }
    }

  , enable: function () {
      this.enabled = true
    }

  , disable: function () {
      this.enabled = false
    }

  , toggleEnabled: function () {
      this.enabled = !this.enabled
    }

  , toggle: function (e) {
      var self = e ? $(e.currentTarget)[this.type](this._options).data(this.type) : this
      self.tip().hasClass('in') ? self.hide() : self.show()
    }

  , destroy: function () {
      this.hide().$element.off('.' + this.type).removeData(this.type)
    }

  }


 /* TOOLTIP PLUGIN DEFINITION
  * ========================= */

  var old = $.fn.tooltip

  $.fn.tooltip = function ( option ) {

    return this.each(function () {
      var $this = $(this)
        , data = $this.data('tooltip')
        , options = typeof option == 'object' && option
      if (!data) $this.data('tooltip', (data = new Tooltip(this, options)))
      if (typeof option == 'string') data[option]()
    })
  }

  $.fn.tooltip.Constructor = Tooltip

  $.fn.tooltip.defaults = {
    animation: true
  , type: 'default'   //tip 类型 {string} 'default'|'attention'|'confirm' ,区别见demo
  , placement: 'top'
  , selector: false  //通常要配合调用方法使用，如果tooltip元素很多，用此途径进行事件委托减少事件监听数量: $('body').tooltip({selector: '.tips'})
  , trigger: 'hover focus'   //触发方式，多选：click hover focus，如果希望手动触发，则传入'manual'
  , title: 'it is default title'  //默认tooltip的内容，如果给html元素添加了title属性则使用该html属性替代此属性
  , delay: {show:0, hide: 200}   //如果只传number，则show、hide时都会使用这个延时，若想差异化则传入形如{show:400, hide: 600} 的对象   注：delay参数对manual触发方式的tooltip无效
  , html: true  //决定是html()还是text()
  , container: false  //将tooltip与输入框组一同使用时，为了避免不必要的影响，需要设置container.他用来将tooltip的dom节点插入到container指定的元素内的最后，可理解为 container.append(tooltipDom)。
  , widthlimit: true  // {Boolean|string} tooltip元素最大宽度限制，false不限宽，true限宽300px，也可传入"500px",人工限制宽度
  , align: 'center'  // {string} tip元素的布局方式，默认居中：'center' ,'left','right','top','bottom'
  }


 /* TOOLTIP NO CONFLICT
  * =================== */

  $.fn.tooltip.noConflict = function () {
    $.fn.tooltip = old
    return this
  }

  //document ready init
  $(function(){
    $('[data-toggle="tooltip"]').tooltip()

    //mousedown外部可消失tooltip(为了在click回调执行前处理好dom状态)
    $(document).on('mousedown', function(e){
      var tgt = $(e.target)
        , tip = $('.sui-tooltip')
        , switchTgt = tip.prev()
        , tipContainer = tgt.parents('.sui-tooltip')
      /* 逻辑执行条件一次注释：
       * 1、存在tip
       * 2、点击的不是tip内的某区域
       * 3、点击的不是触发元素本身
       * 4、触发元素为复杂HTML结构时，点击的不是触发元素内的区域
       */
       // 这里决定了data-original-title属性必须存在于触发元素上
      if (tip.length && !tipContainer.length && tgt[0] != switchTgt[0] && tgt.parents('[data-original-title]')[0] != switchTgt[0]) {
        switchTgt.trigger('click.tooltip')   
      }
    })

    //为confirm类型tooltip增加取消按钮设置默认逻辑
    $(document).on('click', '[data-dismiss=tooltip]', function(e){
      e.preventDefault()
      $(e.target).parents('.sui-tooltip').prev().trigger('click.tooltip')
    })
    $(document).on('click', '[data-ok=tooltip]', function(e){
      e.preventDefault()
      var triggerEle = $(e.target).parents('.sui-tooltip').prev()
        , instance = triggerEle.data('tooltip')
        , okHideCallback = instance.options.okHide
      if (typeof okHideCallback == 'function') {
        okHideCallback.call(triggerEle)
      }
    })

  })

}(window.jQuery);

/* ========================================================
 * bootstrap-tab.js v2.3.2
 * http://getbootstrap.com/2.3.2/javascript.html#tabs
 * ========================================================
 * Copyright 2013 Twitter, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * ======================================================== */


!function ($) {

  "use strict";


 /* TAB CLASS DEFINITION
  * ==================== */

  var Tab = function (element) {
    this.element = $(element)
  }

  Tab.prototype = {

    constructor: Tab

  , show: function () {
      var $this = this.element
        , $ul = $this.closest('ul:not(.dropdown-menu)')
        , selector = $this.attr('data-target')
        , previous
        , $target
        , e

      if (!selector) {
        selector = $this.attr('href')
        selector = selector && selector.replace(/.*(?=#[^\s]*$)/, '') //strip for ie7
      }

      if ( $this.parent('li').hasClass('active') ) return

      previous = $ul.find('.active:last a')[0]

      e = $.Event('show', {
        relatedTarget: previous
      })

      $this.trigger(e)

      if (e.isDefaultPrevented()) return

      $target = $(selector)

      this.activate($this.parent('li'), $ul)
      this.activate($target, $target.parent(), function () {
        $this.trigger({
          type: 'shown'
        , relatedTarget: previous
        })
      })
    }

  , activate: function ( element, container, callback) {
      var $active = container.find('> .active')
        , transition = callback
            && $.support.transition
            && $active.hasClass('fade')

      function next() {
        $active
          .removeClass('active')
          .find('> .dropdown-menu > .active')
          .removeClass('active')

        element.addClass('active')

        if (transition) {
          element[0].offsetWidth // reflow for transition
          element.addClass('in')
        } else {
          element.removeClass('fade')
        }

        if ( element.parent('.dropdown-menu') ) {
          element.closest('li.dropdown').addClass('active')
        }

        callback && callback()
      }

      transition ?
        $active.one($.support.transition.end, next) :
        next()

      $active.removeClass('in')
    }
  }


 /* TAB PLUGIN DEFINITION
  * ===================== */

  var old = $.fn.tab

  $.fn.tab = function ( option ) {
    return this.each(function () {
      var $this = $(this)
        , data = $this.data('tab')
      if (!data) $this.data('tab', (data = new Tab(this)))
      if (typeof option == 'string') data[option]()
    })
  }

  $.fn.tab.Constructor = Tab


 /* TAB NO CONFLICT
  * =============== */

  $.fn.tab.noConflict = function () {
    $.fn.tab = old
    return this
  }


 /* TAB DATA-API
  * ============ */

  $(document).on('click.tab.data-api', '[data-toggle="tab"], [data-toggle="pill"]', function (e) {
    e.preventDefault()
    $(this).tab('show')
  })

}(window.jQuery);

!function ($) {
    function Pagination(opts) {
        this.itemsCount = opts.itemsCount;
        this.pageSize = opts.pageSize;
        this.displayPage = opts.displayPage < 5 ? 5 : opts.displayPage;
        //itemsCount为0的时候应为1页
        this.pages = Math.ceil(opts.itemsCount / opts.pageSize) || 1; 
        $.isNumeric(opts.pages) && (this.pages = opts.pages);
        this.currentPage = opts.currentPage;
        this.styleClass = opts.styleClass;
        this.onSelect = opts.onSelect;
        this.showCtrl = opts.showCtrl;
        this.remote = opts.remote;
        this.displayInfoType = ((opts.displayInfoType == 'itemsCount' && opts.itemsCount) ? 'itemsCount': 'pages');
    }

    /* jshint ignore:start */
    Pagination.prototype = {
        //generate the outer wrapper with the config of custom style
        _draw: function () {
            var tpl = '<div class="sui-pagination';
            for (var i = 0; i < this.styleClass.length; i++) {
                tpl += ' ' + this.styleClass[i];
            }
            tpl += '"></div>'
            this.hookNode.html(tpl);
            this._drawInner();
        },
        //generate the true pagination
        _drawInner: function () {
            var outer = this.hookNode.children('.sui-pagination');
            var tpl = '<ul>' + '<li class="prev' + (this.currentPage - 1 <= 0 ? ' disabled' : ' ') + '"><a href="#" data="' + (this.currentPage - 1) + '">«上一页</a></li>';
            if (this.pages <= this.displayPage || this.pages == this.displayPage + 1) {
                for (var i = 1; i < this.pages + 1; i++) {
                    i == this.currentPage ? (tpl += '<li class="active"><a href="#" data="' + i + '">' + i + '</a></li>') : (tpl += '<li><a href="#" data="' + i + '">' + i + '</a></li>');
                }

            } else {
                if (this.currentPage < this.displayPage - 1) {
                    for (var i = 1; i < this.displayPage; i++) {
                        i == this.currentPage ? (tpl += '<li class="active"><a href="#" data="' + i + '">' + i + '</a></li>') : (tpl += '<li><a href="#" data="' + i + '">' + i + '</a></li>');
                    }
                    tpl += '<li class="dotted"><span>...</span></li>';
                    tpl += '<li><a href="#" data="' + this.pages + '">' + this.pages + '</a></li>';
                } else if (this.currentPage > this.pages - this.displayPage + 2 && this.currentPage <= this.pages) {
                    tpl += '<li><a href="#" data="1">1</a></li>';
                    tpl += '<li class="dotted"><span>...</span></li>';
                    for (var i = this.pages - this.displayPage + 2; i <= this.pages; i++) {
                        i == this.currentPage ? (tpl += '<li class="active"><a href="#" data="' + i + '">' + i + '</a></li>') : (tpl += '<li><a href="#" data="' + i + '">' + i + '</a></li>');
                    }
                } else {
                    tpl += '<li><a href="#" data="1">1</a></li>';
                    tpl += '<li class="dotted"><span>...</span></li>';
                    var frontPage,
                        backPage,
                        middle = (this.displayPage - 3) / 2;
                    if ( (this.displayPage - 3) % 2 == 0 ) {
                        frontPage = backPage = middle; 
                    } else {
                        frontPage = Math.floor(middle);
                        backPage = Math.ceil(middle);
                    }
                    for (var i = this.currentPage - frontPage; i <= this.currentPage + backPage; i++) {
                        i == this.currentPage ? (tpl += '<li class="active"><a href="#" data="' + i + '">' + i + '</a></li>') : (tpl += '<li><a href="#" data="' + i + '">' + i + '</a></li>');
                    }
                    tpl += '<li class="dotted"><span>...</span></li>';
                    tpl += '<li><a href="#" data="' + this.pages + '">' + this.pages + '</a></li>';
                }
            }
            tpl += '<li class="next' + (this.currentPage + 1 > this.pages ? ' disabled' : ' ') + '"><a href="#" data="' + (this.currentPage + 1) + '">下一页»</a></li>' + '</ul>';
            this.showCtrl && (tpl += this._drawCtrl());
            outer.html(tpl);
        },
        //值传递
        _drawCtrl: function () {
            var tpl = '<div>&nbsp;' + (this.displayInfoType == 'itemsCount'? '<span>共' + this.itemsCount + '条</span>&nbsp;' :'<span>共' + this.pages + '页</span>&nbsp;') + 
            '<span>' + '&nbsp;到&nbsp;' + '<input type="text" class="page-num"/><button class="page-confirm">确定</button>' + '&nbsp;页' + '</span>' + '</div>';
            return tpl;
        },

        _ctrl: function () {
            var self = this,
                pag = self.hookNode.children('.sui-pagination');

            function doPagination() {
                var tmpNum = parseInt(pag.find('.page-num').val());
                if ($.isNumeric(tmpNum) && tmpNum <= self.pages && tmpNum > 0) {
                    if (!self.remote) {
                        self.currentPage = tmpNum;
                        self._drawInner();
                    }
                    if ($.isFunction(self.onSelect)) {
                        self.onSelect.call($(this), tmpNum);
                    }
                }
            }
            pag.on('click', '.page-confirm', function (e) {
                doPagination.call(this)
            })
            pag.on('keypress', '.page-num', function (e) {
                e.which == 13 && doPagination.call(this)
            })
        },

        _select: function () {
            var self = this;
            self.hookNode.children('.sui-pagination').on('click', 'a', function (e) {
                e.preventDefault();
                var tmpNum = parseInt($(this).attr('data'));
                if (!$(this).parent().hasClass('disabled') && !$(this).parent().hasClass('active')) {
                    if (!self.remote) {
                        self.currentPage = tmpNum;
                        self._drawInner();
                    }
                    if ($.isFunction(self.onSelect)) {
                        self.onSelect.call($(this), tmpNum);
                    }
                }
            })
        },

        init: function (opts, hookNode) {
            this.hookNode = hookNode;
            this._draw();
            this._select();
            this.showCtrl && this._ctrl();
            return this;
        },

        updateItemsCount: function (itemsCount, pageToGo) {
            $.isNumeric(itemsCount) && (this.pages = Math.ceil(itemsCount / this.pageSize));
            //如果最后一页没有数据了，返回到剩余最大页数
            this.currentPage = this.currentPage > this.pages ? this.pages : this.currentPage;
            $.isNumeric(pageToGo) && (this.currentPage = pageToGo);
            this._drawInner();
        },

        updatePages: function (pages, pageToGo) {
            $.isNumeric(pages) && (this.pages = pages);
            this.currentPage = this.currentPage > this.pages ? this.pages : this.currentPage;
            $.isNumeric(pageToGo) && (this.currentPage = pageToGo);
            this._drawInner();
        },

        goToPage: function (page) {
            if ($.isNumeric(page) && page <= this.pages && page > 0) {
                this.currentPage = page;
                this._drawInner()
            }
        }
    }
    /* jshint ignore:end */

    var old = $.fn.pagination;
    
    $.fn.pagination = function (options) {
        var opts = $.extend({}, $.fn.pagination.defaults, typeof options == 'object' && options);
        if (typeof options == 'string') {
            args = $.makeArray(arguments);
            args.shift();
        }
        var $this = $(this),
        pag = $this.data('sui-pagination');
        if (!pag) $this.data('sui-pagination', (pag = new Pagination(opts).init(opts, $(this))))
            else if (typeof options == 'string') {
                pag[options].apply(pag, args)
            }
        return pag;
    };

    $.fn.pagination.Constructor = Pagination;

    $.fn.pagination.noConflict = function () {
        $.fn.pagination = old;
        return this
    }

    $.fn.pagination.defaults = {
        pageSize: 10,
        displayPage: 5,
        currentPage: 1,
        itemsCount: 0,
        styleClass: [],
        pages: null,
        showCtrl: false,
        onSelect: null,
        remote: false
    }

}(window.jQuery)

/*
 * validate 核心函数，只提供框架，不提供校验规则
 */

!function($) {
  'use strict';
  var Validate = function(form, options) {
    var self = this;
    this.options = $.extend({}, $.fn.validate.defaults, options)
    this.$form = $(form).attr("novalidate", 'novalidate');
    this.$form.submit(function() {
      return onsubmit.call(self);
    });
    this.disabled = false;
    this.$form.on('blur keyup change update', 'input, select, textarea', function(e) {
      if(self.disabled) return;
      var $target = $(e.target);
      if ($target.attr("disabled")) return;
      update.call(self, $target);
    });
    this.errors = {};
  };
  Validate.rules = {};

  Validate.setRule = function(name, method, msg) {
    var oldRule = Validate.rules[name];
    if (oldRule && !method) {
      method = oldRule.method
    }
    Validate.rules[name] = {
      method: method,
      msg: msg
    };
  };
  Validate.setMsg = function(name, msg) {
    Validate.setRule(name, undefined, msg)
  }

  Validate.prototype = {
    disable: function() {
      this.disabled = true;
      this.hideError();
    },
    enable: function() {
      this.disabled = false;
    },
    showError: function($input, errorMsg, errorName) {
      showError.call(this, $input, errorMsg, errorName);
    },
    hideError: function($input, errorName) {
      hideError.call(this, $input, errorName);
    }
  }

  var onsubmit = function() {
    if(this.disabled) return true;
    var hasError, self;
    self = this;
    hasError = false;
    var errorInputs = [];
    this.$form.find("input, select, textarea").each(function() {
      var $input, error;
      $input = $(this);
      error = update.call(self, this);
      if (error && !hasError) {
        $input.focus();
      }
      if (error) {
        errorInputs.push($input);
        return hasError = true;
      }
    });
    if (hasError) {
      this.options.fail.call(this, errorInputs, this.$form);
    } else {
      var result = this.options.success.call(this, this.$form);
      if (result === false) {
        return false;
      }
    }
    return !hasError;
  };
  var update = function(input) {
    var $input = $(input);
    var rules = {};
    var dataRules = ($input.data("rules") || "").split('|');
    var inputName = $input.attr("name");
    for (var i = 0; i < dataRules.length; i++) {
      if (!dataRules[i]) continue;
      var tokens = dataRules[i].split('=');
      tokens[1] = tokens[1] || undefined;
      rules[tokens[0]] = tokens[1];
    }
    var configRules = (this.options.rules && this.options.rules[inputName]) || {};
    rules = $.extend(rules, configRules)
    var error = false;
    var msg = null;
    for (var name in rules) {
      var value = rules[name];

      var currentRule = Validate.rules[name];
      if (!currentRule) { //未定义的rule
        throw new Error("未定义的校验规则：" + name);
      }
      var inputVal = val($input);
      if ((!inputVal) && name !== 'required') {  //特殊处理，如果当前输入框没有值，并且当前不是required，则不报错
        error = false;
        hideError.call(this, $input);
        continue
      }
      var result = true
      // 如果规则值是一个函数，则直接用此函数的返回值
      if ($.isFunction(value)) {
        result = value.call(this, $input)
      } else {
        result = currentRule.method.call(this, inputVal, $input, value)
      }
      if (result) {
        error = false;
        hideError.call(this, $input, name);
      } else {
        error = true;
        msg = currentRule.msg;
        if ($.isFunction(msg)) msg = msg($input, value)
        //如果不是required规则，则可以使用自定义错误消息
        if(name !== 'required') {
          if($input.data("error-msg")) {
            msg = $input.data("error-msg")
          }
          if (this.options.messages && this.options.messages[inputName]) {
            msg = this.options.messages[inputName]
            if ($.isFunction(msg)) msg = msg($input, value)
            if ($.isArray(msg)) msg = msg[1]
          }
        }
        //如果是required规则
        if(name === 'required') {
          if($input.data("empty-msg")) {
            msg = $input.data("empty-msg")
          }
          if (this.options.messages && this.options.messages[inputName]) {
            var _msg = this.options.messages[inputName]
            if ($.isFunction(_msg)) _msg = msg($input, value)
            if ($.isArray(_msg)) msg = _msg[0]
          }
        }
        this.showError($input, msg.replace('$0', value), name);
        break;
      }
    }

    return error;
  };
  var showError = function($input, errorMsg, errorName) {
    errorName = errorName || "anonymous"  //匿名的，一般是手动调用showError并且没有指定一个名称时候会显示一个匿名的错误
    if (typeof $input === typeof "a") $input = this.$form.find("[name='"+$input+"']");
    $input = $($input);
    var inputName = $input.attr("name")
    var $errors = this.errors[inputName] || (this.errors[inputName] = {});
    var $currentError = $errors[errorName]
    if (!$currentError) {
      $currentError = ($errors[errorName] = $(this.options.errorTpl.replace("$errorMsg", errorMsg)));
      this.options.placeError.call(this, $input, $currentError);
    }
    for (var k in $errors) {
      if (k !== errorName) $errors[k].hide()
    }
    this.options.highlight.call(this, $input, $currentError, this.options.inputErrorClass)
    $input.trigger("highlight");
  };
  var hideError = function($input, errorName) {
    var self = this;
    var hideInputAllError = function($input) {
      var $errors = self.errors[$input.attr('name')];
      for(var k in $errors) {
        self.options.unhighlight.call(self, $input, $errors[k], self.options.inputErrorClass);
      }
    }
    if(!$input) { //没有任何参数，则隐藏所有的错误
      this.$form.find('input, select, textarea').each(function() {
        var $this = $(this);
        if ($this.attr("disabled")) return;
        hideInputAllError($this);
      });
    }
    if (typeof $input === typeof "a") $input = this.$form.find("[name='"+$input+"']");
    $input = $($input);
    var $errors = this.errors[$input.attr('name')];
    if (!$errors) return;
    if (!errorName) {
      //未指定errorName则隐藏所有ErrorMsg
      hideInputAllError($input);
      return;
    }
    var $error = $errors[errorName];
    if (!$error) return;
    this.options.unhighlight.call(this, $input, $error, this.options.inputErrorClass)
    $input.trigger("unhighlight");
  };

  //根据不同的input类型来取值
  var val = function(input) {
    var $input = $(input);
    if (!$input[0]) return undefined;
    var tagName = $input[0].tagName.toUpperCase();
    var type = ($input.attr("type") || 'text').toUpperCase()
    var name = $input.attr("name")
    var $form = $input.parents("form")
    switch(tagName) {
      case 'INPUT':
        switch(type) {
          case 'CHECKBOX':
          case 'RADIO':
            return $form.find("[name='"+name+"']:checked").val()
          default:
            return $input.val()
        }
        break;
      case 'TEXTAREA':
        return $input.val()
        break;
      default:
        return $input.val()
    }
  }

  var old = $.fn.validate;
  
  $.fn.extend({
    validate: function (options) {
      var args = arguments;
      return this.each(function() {
        var $this = $(this),
            data = $this.data("validate")
        if (!data) $this.data('validate', (data = new Validate(this, options)))
        if (typeof options == 'string') data[options].apply(data, Array.prototype.slice.call(args, 1));
      })
    }
  })
  $.fn.validate.Constructor = Validate

  $.fn.validate.defaults = {
    errorTpl: '<div class="sui-msg msg-error help-inline">\n  <div class="msg-con">\n    <span>$errorMsg</span>\n </div>   <i class="msg-icon"></i>\n  \n</div>',
    inputErrorClass: 'input-error',
    placeError: function($input, $error) {
      $input = $($input);
      var $wrap = $input.parents(".controls-wrap");
      if (!$wrap[0]) {
        $wrap = $input.parents(".controls");
      }
      if(!$wrap[0]) {
        $wrap = $input.parent();
      }
      $error.appendTo($wrap[0]);
    },
    highlight: function($input, $error, inputErrorClass) {
      $input.addClass(inputErrorClass)
      //使多控件校验规则错误框可以自动定位出错的控件位置，先将自身移动去该位置附近显示
      //对单体校验控件，因为是自身append到自身的位置，native不会有行为
      $.fn.validate.defaults.placeError($input, $error);
      $error.show()
    },
    unhighlight: function($input, $error, inputErrorClass) {
      if(!$error.is(":visible")) return;
      $input.removeClass(inputErrorClass)
      $error.hide()
    },
    rules: undefined,
    messages: undefined,
    success: $.noop,
    fail: $.noop
  };

  $.fn.validate.noConflict = function () {
    $.fn.validate = old
    return this
  }

  $.validate = Validate;

  //自动加载
  $(function() {
    $(".sui-validate").validate()
  })
}(window.jQuery);

/**
 * Created by huazhi.chz on 14-4-27.
 * tree 2.0.0
 * 由原来的一次性读取数据改为事件性获取数据
 */

!(function($) {"use strict";

    // 数据缓存处理
    var Redis = function() {
        this.data = {};
    };

    Redis.prototype = {
        constructor : Redis,

        query : function(key) {
            return this.data[key];
        },

        insert : function(key, value) {
            this.data[key] = value;
        },

        clear : function() {
            this.data = {};
        }
    };

    var Tree = function(element, options) {
        this.$element = $(element);
        this.options = options;
        this.redis = new Redis();
    };

    // private methods
    var methods = {
        init : function() {
            this.destory();
            methods.bindChange.call(this);
            methods.bindUpdate.call(this);
            this.$element.trigger('tree:update'); // 触发第一次更新
        },

        getData : function(id, index) {
            var that = this, data = that.redis.query(id); // 先获取缓存数据
            if (!that.options.src) return;
            // 先取缓存数据
            if (data) {
                methods.createDom.apply(that, [data, index])
            } else { // 如果没有就重新获取
                $.ajax(that.options.src, {
                    data : that.options.key + '=' + id,
                    cache : true,
                    dataType : that.options.jsonp ? 'jsonp' : 'json'
                }).success(function(json) {
                    if (json.code == 200 && json.data && json.data.length) {
                        data = json.data;
                        that.redis.insert(id, data); // 将值存放缓存中
                        methods.createDom.apply(that, [data, index]);
                    }
                })
            }
        },

        createDom : function(list, index) {
            var dom = ['<select>'],
                placeholder = this.options.placeholder,
                val = this.options.val[index];
            placeholder && dom.push('<option value="">' + placeholder + '</option>');
            $.each(list, function(i, n) {
                dom.push('<option data-isleaf="' + n.isleaf + '" value="' + n.id + '" ' + (n.id == val ? 'selected' : '') + '>' + n.value + '</option>')
            });
            dom.push('</select>');
            //return dom.join('');
            dom = $(dom.join('')).appendTo(this.$element).trigger('change');
        },

        bindChange : function() {
            var that = this;
            this.$element.on('change.sui.tree', 'select', function(e) {
                var $this = $(this), v = $this.val();
                $this.nextAll().remove();
                methods.saveValue.call(that);
                if (!v) return; // 选择了placeholder
                if (!$this.find('option:selected').data('isleaf')) methods.getData.apply(that, [v, $this.index() + 1]);
                else that.options.val = []; // 清空初始化的时候设置的值
            })
        },

        bindUpdate : function() {
            var that = this;
            this.$element.on('tree:update', function(e) {
                var $this = $(this);
                $this.empty();
                methods.getData.apply(that, [0, 0]); // 每次重新获取数据的id都为0
            })
        },

        saveValue : function() {
            var _val = [], _opt = [];
            this.$element.find('select').each(function() {
                _val.push(this.value);
                _opt.push($(this).find('option:selected').text());
            });
            this.datas = {text : _opt, value : _val};
        }
    };

    Tree.prototype = {
        constructor : Tree,

        getValue : $.noop, // how ?

        setValue : function(ary) {
            this.options.val = ary;
            this.$element.trigger('tree:update');
        },

        destory : function() {
            this.$element.off('change.sui.tree').empty();
        }
    };

    var old = $.fn.tree;

    $.fn.extend({
        tree : function() {
            var args = Array.prototype.slice.call(arguments),
                arg0 = args.shift();

            return this.each(function() {
                var $this = $(this),
                    data = $this.data('tree'),
                    options = $.extend({}, $.fn.tree.defaults, $this.data(), typeof arg0 === 'object' && arg0);
                if (!data) $this.data('tree', (data = new Tree(this, options))); // 在每个元素上只保存一个实例
                if (typeof arg0 === 'string' && typeof data[arg0] === 'function') data[arg0].apply(data, args);
                else methods.init.call(data);
            });
        }
    });

    $.fn.tree.Constructor = Tree;

    $.fn.tree.defaults = {
        src : '', // 数据源，json或jsonp
        treeType : 'select', // TODO tree的类型，select或list
        placeholder : '请选择',
        val : [], // update时取的值
        key : 'id' // 默认的参数名
    };

    // NO CONFLICT
    $.fn.tree.noConflict = function () {
        $.fn.tree = old;
        return this;
    };

    // auto handle
    $(function() {
        $('[data-toggle="tree"]').tree();
    });

})(jQuery);

!function ($) {

  "use strict";

  var CHECKED_CLASS = 'checked';
  var HALF_CHECKED_CLASS = 'halfchecked';
  var DISABLED_CLASS= 'disabled';

  var Checkbox = function (element, options) {
    this.$element = $(element)
    //this.options = $.extend({}, $.fn.checkbox.defaults, options)
    this.$checkbox = this.$element.find("input")
  }

  var old = $.fn.checkbox

  $.fn.checkbox = function (option) {
    return this.each(function () {
      var $this = $(this)
        , data = $this.data('checkbox')
        , options = typeof option == 'object' && option
      if (!data) $this.data('checkbox', (data = new Checkbox(this, options)))
      else if (option) data[option]()
    })
  }
  
  Checkbox.prototype.toggle = function () {
    if(this.$checkbox.prop("checked")) this.uncheck()
    else this.check()
    this.$checkbox.trigger("change")
  }

  Checkbox.prototype.check = function () {
    if(this.$checkbox.prop("disabled")) return
    this.$checkbox.prop('checked', true)
    this.$checkbox.trigger("change")
  }
  Checkbox.prototype.uncheck = function () {
    if(this.$checkbox.prop("disabled")) return
    this.$checkbox.prop('checked', false)
    this.$checkbox.trigger("change")
  }
  Checkbox.prototype.halfcheck = function () {
    if(this.$checkbox.prop("disabled")) return
    this.$checkbox.prop('checked', false)
    this.$element.removeClass(CHECKED_CLASS).addClass("halfchecked")
  }

  Checkbox.prototype.disable = function () {
    this.$checkbox.prop('disabled', true)
    this.$checkbox.trigger("change")
  }
  Checkbox.prototype.enable = function () {
    this.$checkbox.prop('disabled', false)
    this.$checkbox.trigger("change")
  }

  $.fn.checkbox.defaults = {
    loadingText: 'loading...'
  }

  $.fn.checkbox.Constructor = Checkbox


 /* NO CONFLICT
  * ================== */

  $.fn.checkbox.noConflict = function () {
    $.fn.checkbox = old
    return this
  }

  $.fn.radio = $.fn.checkbox;


  // update status on document;
  $(document).on("change", "input[type='checkbox'], input[type='radio']", function(e) {
    var $checkbox= $(e.currentTarget);
    var $container = $checkbox.parent();
    var update = function($checkbox) {
      var $container = $checkbox.parent();
      if($checkbox.prop("checked")) $container.removeClass(HALF_CHECKED_CLASS).addClass(CHECKED_CLASS)
      else $container.removeClass(CHECKED_CLASS).removeClass(HALF_CHECKED_CLASS)
      if($checkbox.prop('disabled')) $container.addClass(DISABLED_CLASS)
      else $container.removeClass(DISABLED_CLASS)
    }
    if($container.hasClass("checkbox-pretty") || $container.hasClass("radio-pretty")) {
      update($checkbox);
    }
    if($checkbox.attr('type').toLowerCase() === 'radio') {
      var name = $checkbox.attr("name");
      $("input[name='"+name+"']").each(function() {
        update($(this));
      });
    }
  });
}(window.jQuery);

/**
*  Ajax Autocomplete for jQuery, version 1.2.9
*  (c) 2013 Tomas Kirda
*
*  Ajax Autocomplete for jQuery is freely distributable under the terms of an MIT-style license.
*  For details, see the web site: https://github.com/devbridge/jQuery-Autocomplete
*
*/

/*jslint  browser: true, white: true, plusplus: true */
/*global define, window, document, jQuery */

// Expose plugin as an AMD module if AMD loader is present:
!function ($) {
    'use strict';
    var
        utils = (function () {
            return {
                escapeRegExChars: function (value) {
                    return value.replace(/[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g, "\\$&");
                },
                createNode: function (containerClass) {
                    var ul = document.createElement('ul');
                    ul.className = containerClass;
                    ul.style.position = 'absolute';
                    ul.style.display = 'none';
                    return ul;
                }
            };
        }()),

        keys = {
            ESC: 27,
            TAB: 9,
            RETURN: 13,
            LEFT: 37,
            UP: 38,
            RIGHT: 39,
            DOWN: 40
        };

    function Autocomplete(el, options) {
        var that = this;   

        // Shared variables:
        that.element = el;
        that.el = $(el);
        that.suggestions = [];
        that.badQueries = [];
        that.selectedIndex = -1;
        that.currentValue = that.element.value;
        that.intervalId = 0;
        that.cachedResponse = {};
        that.onChangeInterval = null;
        that.onChange = null;
        that.isLocal = false;
        that.suggestionsContainer = null;
        that.options = that.getOptions(options);
        that.classes = {
            selected: 'active',
            suggestion: 'autocomplete-suggestion'
        };
        that.hint = null;
        that.hintValue = '';
        that.selection = null;

        // Initialize and set options:
        that.initialize();
        that.setOptions(options);
    }

    Autocomplete.utils = utils;

    $.Autocomplete = Autocomplete;

    Autocomplete.formatResult = function (suggestion, currentValue) {
        var pattern = '(' + utils.escapeRegExChars(currentValue) + ')';

        return suggestion.value.replace(new RegExp(pattern, 'gi'), '<strong>$1<\/strong>');
    };

    Autocomplete.prototype = {

        killerFn: null,

        initialize: function () {
            var that = this,
                suggestionSelector = '.' + that.classes.suggestion,
                selected = that.classes.selected,
                options = that.options,
                container;

            // Remove autocomplete attribute to prevent native suggestions:
            that.element.setAttribute('autocomplete', 'off');

            that.killerFn = function (e) {
                if ($(e.target).closest('.' + that.options.containerClass).length === 0) {
                    that.killSuggestions();
                    that.disableKillerFn();
                }
            };

            that.suggestionsContainer = Autocomplete.utils.createNode(options.containerClass);

            container = $(that.suggestionsContainer);

            container.appendTo(options.appendTo);

            // Only set width if it was provided:
            if (options.width !== 'auto') {
                container.width(options.width);
            }

            // Listen for mouse over event on suggestions list:
            container.on('mouseover.autocomplete', suggestionSelector, function () {
                that.activate($(this).data('index'));
            });

            // Deselect active element when mouse leaves suggestions container:
            container.on('mouseout.autocomplete', function () {
                that.selectedIndex = -1;
                container.children('.' + selected).removeClass(selected);
            });

            // Listen for click event on suggestions list:
            container.on('click.autocomplete', suggestionSelector, function () {
                that.select($(this).data('index'));
            });

            that.fixPosition();

            that.fixPositionCapture = function () {
                if (that.visible) {
                    that.fixPosition();
                }
            };

            $(window).on('resize.autocomplete', that.fixPositionCapture);

            that.el.on('keydown.autocomplete', function (e) { that.onKeyPress(e); });
            that.el.on('keyup.autocomplete', function (e) { that.onKeyUp(e); });
            that.el.on('blur.autocomplete', function () { that.onBlur(); });
            that.el.on('focus.autocomplete', function () { that.onFocus(); });
            that.el.on('change.autocomplete', function (e) { that.onKeyUp(e); });
        },

        onFocus: function () {
            var that = this;
            that.fixPosition();
            if (that.options.minChars <= that.el.val().length) {
                that.onValueChange();
            }
        },

        onBlur: function () {
            this.enableKillerFn();
        },

        setOptions: function (suppliedOptions) {
            var that = this,
                options = that.options;

            $.extend(options, suppliedOptions);

            that.isLocal = $.isArray(options.lookup);

            if (that.isLocal) {
                options.lookup = that.verifySuggestionsFormat(options.lookup);
            }

            // Adjust height, width and z-index:
            $(that.suggestionsContainer).css({
                'max-height': options.maxHeight + 'px',
                'width': options.width + 'px',
                'z-index': options.zIndex
            });
        },

        clearCache: function () {
            this.cachedResponse = {};
            this.badQueries = [];
        },

        clear: function () {
            this.clearCache();
            this.currentValue = '';
            this.suggestions = [];
        },

        disable: function () {
            var that = this;
            that.disabled = true;
            if (that.currentRequest) {
                that.currentRequest.abort();
            }
        },

        enable: function () {
            this.disabled = false;
        },

        fixPosition: function () {
            var that = this,
                offset,
                styles;

            // Don't adjsut position if custom container has been specified:
            if (that.options.appendTo !== 'body') {
                return;
            }

            offset = that.el.offset();

            styles = {
                top: (offset.top + that.el.outerHeight()) + 'px',
                left: offset.left + 'px'
            };

            if (that.options.width === 'auto') {
                styles.width = (that.el.outerWidth() - 2) + 'px';
            }

            $(that.suggestionsContainer).css(styles);
        },

        enableKillerFn: function () {
            var that = this;
            $(document).on('click.autocomplete', that.killerFn);
        },

        disableKillerFn: function () {
            var that = this;
            $(document).off('click.autocomplete', that.killerFn);
        },

        killSuggestions: function () {
            var that = this;
            that.stopKillSuggestions();
            that.intervalId = window.setInterval(function () {
                that.hide();
                that.stopKillSuggestions();
            }, 50);
        },

        stopKillSuggestions: function () {
            window.clearInterval(this.intervalId);
        },

        isCursorAtEnd: function () {
            var that = this,
                valLength = that.el.val().length,
                selectionStart = that.element.selectionStart,
                range;

            if (typeof selectionStart === 'number') {
                return selectionStart === valLength;
            }
            if (document.selection) {
                range = document.selection.createRange();
                range.moveStart('character', -valLength);
                return valLength === range.text.length;
            }
            return true;
        },

        onKeyPress: function (e) {
            var that = this;

            // If suggestions are hidden and user presses arrow down, display suggestions:
            if (!that.disabled && !that.visible && e.which === keys.DOWN && that.currentValue) {
                that.suggest();
                return;
            }

            if (that.disabled || !that.visible) {
                return;
            }

            switch (e.which) {
                case keys.ESC:
                    that.el.val(that.currentValue);
                    that.hide();
                    break;
                case keys.RIGHT:
                    if (that.hint && that.options.onHint && that.isCursorAtEnd()) {
                        that.selectHint();
                         return;
                    }
                    break;
                case keys.TAB:
                    if (that.hint && that.options.onHint) {
                        that.selectHint();
                        return;
                    }
                    // Fall through to RETURN
                    break;
                case keys.RETURN:
                    if (that.selectedIndex === -1) {
                        that.hide();
                        return;
                    }
                    that.select(that.selectedIndex);
                    if (e.which === keys.TAB && that.options.tabDisabled === false) {
                        return;
                    }
                    break;
                case keys.UP:
                    that.moveUp();
                    break;
                case keys.DOWN:
                    that.moveDown();
                    break;
                default:
                    return;
            }

            // Cancel event if function did not return:
            e.stopImmediatePropagation();
            e.preventDefault();
        },

        onKeyUp: function (e) {
            var that = this;

            if (that.disabled) {
                return;
            }

            switch (e.which) {
                case keys.UP:
                case keys.DOWN:
                    return;
            }

            clearInterval(that.onChangeInterval);

            if (that.currentValue !== that.el.val()) {
                that.findBestHint();
                if (that.options.deferRequestBy > 0) {
                    // Defer lookup in case when value changes very quickly:
                    that.onChangeInterval = setInterval(function () {
                        that.onValueChange();
                    }, that.options.deferRequestBy);
                } else {
                    that.onValueChange();
                }
            }
        },

        onValueChange: function () {
            var that = this,
                options = that.options,
                value = that.el.val(),
                query = that.getQuery(value),
                index;

            if (that.selection) {
                that.selection = null;
                (options.onInvalidateSelection || $.noop).call(that.element);
            }

            clearInterval(that.onChangeInterval);
            that.currentValue = value;
            that.selectedIndex = -1;

            // Check existing suggestion for the match before proceeding:
            if (options.triggerSelectOnValidInput) {
                index = that.findSuggestionIndex(query);
                if (index !== -1) {
                    that.select(index);
                    return;
                }
            }

            if (query.length < options.minChars) {
                that.hide();
            } else {
                that.getSuggestions(query);
            }
        },

        findSuggestionIndex: function (query) {
            var that = this,
                index = -1,
                queryLowerCase = query.toLowerCase();

            $.each(that.suggestions, function (i, suggestion) {
                if (suggestion.value.toLowerCase() === queryLowerCase) {
                    index = i;
                    return false;
                }
            });

            return index;
        },

        getQuery: function (value) {
            var delimiter = this.options.delimiter,
                parts;

            if (!delimiter) {
                return value;
            }
            parts = value.split(delimiter);
            return $.trim(parts[parts.length - 1]);
        },

        getSuggestionsLocal: function (query) {
            var that = this,
                options = that.options,
                queryLowerCase = query.toLowerCase(),
                filter = options.lookupFilter,
                limit = parseInt(options.lookupLimit, 10),
                data;

            data = {
                suggestions: $.grep(options.lookup, function (suggestion) {
                    return filter(suggestion, query, queryLowerCase);
                })
            };

            if (limit && data.suggestions.length > limit) {
                data.suggestions = data.suggestions.slice(0, limit);
            }

            return data;
        },

        getSuggestions: function (q) {
            var response,
                that = this,
                options = that.options,
                serviceUrl = options.serviceUrl,
                params,
                cacheKey;

            options.params[options.paramName] = q;
            params = options.ignoreParams ? null : options.params;

            if (that.isLocal) {
                response = that.getSuggestionsLocal(q);
            } else {
                if ($.isFunction(serviceUrl)) {
                    serviceUrl = serviceUrl.call(that.element, q);
                }
                cacheKey = serviceUrl + '?' + $.param(params || {});
                response = that.cachedResponse[cacheKey];
            }

            if (response && $.isArray(response.suggestions)) {
                that.suggestions = response.suggestions;
                that.suggest();
            } else if (!that.isBadQuery(q)) {
                if (options.onSearchStart.call(that.element, options.params) === false) {
                    return;
                }
                if (that.currentRequest) {
                    that.currentRequest.abort();
                }
                that.currentRequest = $.ajax({
                    url: serviceUrl,
                    data: params,
                    type: options.type,
                    dataType: options.dataType
                }).done(function (data) {
                    var result;
                    that.currentRequest = null;
                    result = options.transformResult(data);
                    that.processResponse(result, q, cacheKey);
                    options.onSearchComplete.call(that.element, q, result.suggestions);
                }).fail(function (jqXHR, textStatus, errorThrown) {
                    options.onSearchError.call(that.element, q, jqXHR, textStatus, errorThrown);
                });
            }
        },

        isBadQuery: function (q) {
            if (!this.options.preventBadQueries){
                return false;
            }

            var badQueries = this.badQueries,
                i = badQueries.length;

            while (i--) {
                if (q.indexOf(badQueries[i]) === 0) {
                    return true;
                }
            }

            return false;
        },

        hide: function () {
            var that = this;
            that.visible = false;
            that.selectedIndex = -1;
            $(that.suggestionsContainer).hide();
            that.signalHint(null);
        },

        suggest: function () {
            if (this.suggestions.length === 0) {
                this.hide();
                return;
            }

            var that = this,
                options = that.options,
                formatResult = options.formatResult,
                value = that.getQuery(that.currentValue),
                className = that.classes.suggestion,
                classSelected = that.classes.selected,
                container = $(that.suggestionsContainer),
                beforeRender = options.beforeRender,
                html = '',
                index,
                width;

            if (options.triggerSelectOnValidInput) {
                index = that.findSuggestionIndex(value);
                if (index !== -1) {
                    that.select(index);
                    return;
                }
            }

            // Build suggestions inner HTML:
            $.each(that.suggestions, function (i, suggestion) {
                html += '<li class="' + className + '" data-index="' + i + '"><a>' + formatResult(suggestion, value) + '</a></li>';
            });

            // If width is auto, adjust width before displaying suggestions,
            // because if instance was created before input had width, it will be zero.
            // Also it adjusts if input width has changed.
            // -2px to account for suggestions border.
            if (options.width === 'auto') {
                width = that.el.outerWidth() - 2;
                container.width(width > 0 ? width : 300);
            }

            container.html(html);

            // Select first value by default:
            if (options.autoSelectFirst) {
                that.selectedIndex = 0;
                container.children().first().addClass(classSelected);
            }

            if ($.isFunction(beforeRender)) {
                beforeRender.call(that.element, container);
            }

            container.show();
            that.visible = true;

            that.findBestHint();
        },

        findBestHint: function () {
            var that = this,
                value = that.el.val().toLowerCase(),
                bestMatch = null;

            if (!value) {
                return;
            }

            $.each(that.suggestions, function (i, suggestion) {
                var foundMatch = suggestion.value.toLowerCase().indexOf(value) === 0;
                if (foundMatch) {
                    bestMatch = suggestion;
                }
                return !foundMatch;
            });

            that.signalHint(bestMatch);
        },

        signalHint: function (suggestion) {
            var hintValue = '',
                that = this;
            if (suggestion) {
                hintValue = that.currentValue + suggestion.value.substr(that.currentValue.length);
            }
            if (that.hintValue !== hintValue) {
                that.hintValue = hintValue;
                that.hint = suggestion;
                (this.options.onHint || $.noop)(hintValue);
            }
        },

        verifySuggestionsFormat: function (suggestions) {
            // If suggestions is string array, convert them to supported format:
            if (suggestions.length && typeof suggestions[0] === 'string') {
                return $.map(suggestions, function (value) {
                    return { value: value, data: null };
                });
            }

            return suggestions;
        },

        processResponse: function (result, originalQuery, cacheKey) {
            var that = this,
                options = that.options;

            result.suggestions = that.verifySuggestionsFormat(result.suggestions);

            // Cache results if cache is not disabled:
            if (!options.noCache) {
                that.cachedResponse[cacheKey] = result;
                if (options.preventBadQueries && result.suggestions.length === 0) {
                    that.badQueries.push(originalQuery);
                }
            }

            // Return if originalQuery is not matching current query:
            if (originalQuery !== that.getQuery(that.currentValue)) {
                return;
            }

            that.suggestions = result.suggestions;
            that.suggest();
        },

        activate: function (index) {
            var that = this,
                activeItem,
                selected = that.classes.selected,
                container = $(that.suggestionsContainer),
                children = container.children();

            container.children('.' + selected).removeClass(selected);

            that.selectedIndex = index;

            if (that.selectedIndex !== -1 && children.length > that.selectedIndex) {
                activeItem = children.get(that.selectedIndex);
                $(activeItem).addClass(selected);
                return activeItem;
            }

            return null;
        },

        selectHint: function () {
            var that = this,
                i = $.inArray(that.hint, that.suggestions);

            that.select(i);
        },

        select: function (i) {
            var that = this;
            that.hide();
            that.onSelect(i);
        },

        moveUp: function () {
            var that = this;

            if (that.selectedIndex === -1) {
                return;
            }

            if (that.selectedIndex === 0) {
                $(that.suggestionsContainer).children().first().removeClass(that.classes.selected);
                that.selectedIndex = -1;
                that.el.val(that.currentValue);
                that.findBestHint();
                return;
            }

            that.adjustScroll(that.selectedIndex - 1);
        },

        moveDown: function () {
            var that = this;

            if (that.selectedIndex === (that.suggestions.length - 1)) {
                return;
            }

            that.adjustScroll(that.selectedIndex + 1);
        },

        adjustScroll: function (index) {
            var that = this,
                activeItem = that.activate(index),
                offsetTop,
                upperBound,
                lowerBound,
                heightDelta = 25;

            if (!activeItem) {
                return;
            }

            offsetTop = activeItem.offsetTop;
            upperBound = $(that.suggestionsContainer).scrollTop();
            lowerBound = upperBound + that.options.maxHeight - heightDelta;

            if (offsetTop < upperBound) {
                $(that.suggestionsContainer).scrollTop(offsetTop);
            } else if (offsetTop > lowerBound) {
                $(that.suggestionsContainer).scrollTop(offsetTop - that.options.maxHeight + heightDelta);
            }

            that.el.val(that.getValue(that.suggestions[index].value));
            that.signalHint(null);
        },

        onSelect: function (index) {
            var that = this,
                onSelectCallback = that.options.onSelect,
                suggestion = that.suggestions[index];

            that.currentValue = that.getValue(suggestion.value);

            if (that.currentValue !== that.el.val()) {
                that.el.val(that.currentValue);
            }

            that.signalHint(null);
            that.suggestions = [];
            that.selection = suggestion;

            if ($.isFunction(onSelectCallback)) {
                onSelectCallback.call(that.element, suggestion);
            }
        },

        getValue: function (value) {
            var that = this,
                delimiter = that.options.delimiter,
                currentValue,
                parts;

            if (!delimiter) {
                return value;
            }

            currentValue = that.currentValue;
            parts = currentValue.split(delimiter);

            if (parts.length === 1) {
                return value;
            }

            return currentValue.substr(0, currentValue.length - parts[parts.length - 1].length) + value;
        },

        dispose: function () {
            var that = this;
            that.el.off('.autocomplete').removeData('autocomplete');
            that.disableKillerFn();
            $(window).off('resize.autocomplete', that.fixPositionCapture);
            $(that.suggestionsContainer).remove();
        },
        getOptions: function (options) {
          return options = $.extend({}, $.fn.autocomplete.defaults, this.el.data(), options);
        }
    };



    // Create chainable jQuery plugin:
    $.fn.autocomplete = function (option, args) {
        var dataKey = 'autocomplete';
        return this.each(function () {
          var $this = $(this)
            , data = $this.data(dataKey)
            , options = typeof option == 'object' && option
          if (!data) $this.data(dataKey, (data = new Autocomplete(this, options)))
            if (typeof option == 'string') data[option]()
        });
    };

    $.fn.autocomplete.defaults = {
      autoSelectFirst: false,
      appendTo: 'body',
      serviceUrl: null,
      lookup: null,
      onSelect: null,
      width: 'auto',
      minChars: 1,
      maxHeight: 300,
      deferRequestBy: 0,
      params: {},
      formatResult: Autocomplete.formatResult,
      delimiter: null,
      zIndex: 9999,
      type: 'GET',
      noCache: false,
      onSearchStart: $.noop,
      onSearchComplete: $.noop,
      onSearchError: $.noop,
      containerClass: 'sui-dropdown-menu sui-suggestion-container',
      tabDisabled: false,
      dataType: 'text',
      currentRequest: null,
      triggerSelectOnValidInput: true,
      preventBadQueries: true,
      lookupFilter: function (suggestion, originalQuery, queryLowerCase) {
        return suggestion.value.toLowerCase().indexOf(queryLowerCase) !== -1;
      },
      paramName: 'query',
      transformResult: function (response) {
        return typeof response === 'string' ? $.parseJSON(response) : response;
      }
    };

    $(function() {
      $("[data-toggle='autocomplete']").autocomplete();
    });
}(window.jQuery);

 /*jshint scripturl:true */
 /*jshint funcscope:true */
 /*jshint -W004 */
/**
 * Intro.js v0.9.0
 * https://github.com/usablica/intro.js
 * MIT licensed
 *
 * Copyright (C) 2013 usabli.ca - A weekend project by Afshin Mehrabani (@afshinmeh)
 */

!function ($) {
  //Default config/variables
  var VERSION = '0.9.0';

  /**
   * IntroJs main class
   *
   * @class IntroJs
   */

  function IntroJs(obj,options) {
    this._targetElement = obj;

    this._options = getOptions(options);
    
  }
  function  getOptions(options) {
      return options = $.extend({}, IntroJs.prototype.defaults, options);
  }
  /**
   * Initiate a new introduction/guide from an element in the page
   *
   * @api private
   * @method _introForElement
   * @param {Object} targetElm
   * @returns {Boolean} Success or not?
   */
  function _introForElement(targetElm) {
    var introItems = [],
        self = this;
        var allIntroSteps=[];
    if (this._options.steps) {
      //use steps passed programmatically
      

      for (var i = 0, stepsLength = this._options.steps.length; i < stepsLength; i++) {
        var currentItem = _cloneObject(this._options.steps[i]);
        //set the step
        currentItem.step = introItems.length + 1;
        //use querySelector function only when developer used CSS selector
        if (typeof(currentItem.element) === 'string') {
          //grab the element with given selector from the page
          currentItem.element = document.querySelector(currentItem.element);
        }

        //intro without element
        if (typeof(currentItem.element) === 'undefined' || currentItem.element === null) {
          var floatingElementQuery = document.querySelector(".introjsFloatingElement");

          if (floatingElementQuery === null) {
            floatingElementQuery = document.createElement('div');
            floatingElementQuery.className = 'introjsFloatingElement';

            document.body.appendChild(floatingElementQuery);
          }

          currentItem.element  = floatingElementQuery;
          currentItem.position = 'floating';
        }

        if (currentItem.element !== null) {
          introItems.push(currentItem);
        }
      }

    } else {
       //use steps from data-* annotations
      allIntroSteps = targetElm.querySelectorAll('*[data-intro]');
      //if there's no element to intro
      if (allIntroSteps.length < 1) {
        return false;
      }

      //first add intro items with data-step
      for (var i = 0, elmsLength = allIntroSteps.length; i < elmsLength; i++) {
        var currentElement = allIntroSteps[i];
        var step = parseInt(currentElement.getAttribute('data-step'), 10);

        if (step > 0) {
          introItems[step - 1] = {
            element: currentElement,
            intro: currentElement.getAttribute('data-intro'),
            step: parseInt(currentElement.getAttribute('data-step'), 10),
            tooltipClass: currentElement.getAttribute('data-tooltipClass'),
            position: currentElement.getAttribute('data-position') || this._options.tooltipPosition
          };
        }
      }

      //next add intro items without data-step
      //todo: we need a cleanup here, two loops are redundant
      var nextStep = 0;
      for (var i = 0, elmsLength = allIntroSteps.length; i < elmsLength; i++) {
        var currentElement = allIntroSteps[i];

        if (currentElement.getAttribute('data-step') === null) {

          while (true) {
            if (typeof introItems[nextStep] === 'undefined') {
              break;
            } else {
              nextStep++;
            }
          }

          introItems[nextStep] = {
            element: currentElement,
            intro: currentElement.getAttribute('data-intro'),
            step: nextStep + 1,
            tooltipClass: currentElement.getAttribute('data-tooltipClass'),
            position: currentElement.getAttribute('data-position') || this._options.tooltipPosition
          };
        }
      }
    }

    //removing undefined/null elements
    var tempIntroItems = [];
    for (var z = 0; z < introItems.length; z++) {
      introItems[z] && tempIntroItems.push(introItems[z]);  // copy non-empty values to the end of the array
    }

    introItems = tempIntroItems;

    //Ok, sort all items with given steps
    introItems.sort(function (a, b) {
      return a.step - b.step;
    });

    //set it to the introJs object
    self._introItems = introItems;

    //add overlay layer to the page
    if(_addOverlayLayer.call(self, targetElm)) {
      //then, start the show
      _nextStep.call(self);

      var skipButton     = targetElm.querySelector('.introjs-skipbutton'),
          nextStepButton = targetElm.querySelector('.introjs-nextbutton');

      self._onKeyDown = function(e) {
        if (e.keyCode === 27 && self._options.exitOnEsc === true) {
          //escape key pressed, exit the intro
          _exitIntro.call(self, targetElm);
          //check if any callback is defined
          if (self._introExitCallback !== undefined) {
            self._introExitCallback.call(self);
          }
        } else if(e.keyCode === 37) {
          //left arrow
          _previousStep.call(self);
        } else if (e.keyCode === 39 || e.keyCode === 13) {
          //right arrow or enter
          _nextStep.call(self);
          //prevent default behaviour on hitting Enter, to prevent steps being skipped in some browsers
          if(e.preventDefault) {
            e.preventDefault();
          } else {
            e.returnValue = false;
          }
        }
      };

      self._onResize = function(e) {
        _setHelperLayerPosition.call(self, document.querySelector('.sui-introjs-helperLayer'));
      };

      if (window.addEventListener) {
        if (this._options.keyboardNavigation) {
          window.addEventListener('keydown', self._onKeyDown, true);
        }
        //for window resize
        window.addEventListener("resize", self._onResize, true);
      } else if (document.attachEvent) { //IE
        if (this._options.keyboardNavigation) {
          document.attachEvent('onkeydown', self._onKeyDown);
        }
        //for window resize
        document.attachEvent("onresize", self._onResize);
      }
    }
    return false;
  }

 /*
   * makes a copy of the object
   * @api private
   * @method _cloneObject
  */
  function _cloneObject(object) {
      if (object === null || typeof (object) !== 'object' || typeof (object.nodeType) !== 'undefined') {
          return object;
      }
      var temp = {};
      for (var key in object) {
          temp[key] = _cloneObject(object[key]);
      }
      return temp;
  }
  /**
   * Go to specific step of introduction
   *
   * @api private
   * @method _goToStep
   */
  function _goToStep(step) {
    //because steps starts with zero
    this._currentStep = step - 2;
    if (typeof (this._introItems) !== 'undefined') {
      _nextStep.call(this);
    }
  }

  /**
   * Go to next step on intro
   *
   * @api private
   * @method _nextStep
   */
  function _nextStep() {
    this._direction = 'forward';

    if (typeof (this._currentStep) === 'undefined') {
      this._currentStep = 0;
    } else {
      ++this._currentStep;
    }

    if ((this._introItems.length) <= this._currentStep) {
      //end of the intro
      //check if any callback is defined
      if (typeof (this._introCompleteCallback) === 'function') {
        this._introCompleteCallback.call(this);
      }
      _exitIntro.call(this, this._targetElement);
      return;
    }

    var nextStep = this._introItems[this._currentStep];
    if (typeof (this._introBeforeChangeCallback) !== 'undefined') {
      this._introBeforeChangeCallback.call(this, nextStep.element);
    }

    _showElement.call(this, nextStep);
  }

  /**
   * Go to previous step on intro
   *
   * @api private
   * @method _nextStep
   */
  function _previousStep() {
    this._direction = 'backward';

    if (this._currentStep === 0) {
      return false;
    }

    var nextStep = this._introItems[--this._currentStep];
    if (typeof (this._introBeforeChangeCallback) !== 'undefined') {
      this._introBeforeChangeCallback.call(this, nextStep.element);
    }

    _showElement.call(this, nextStep);
  }

  /**
   * Exit from intro
   *
   * @api private
   * @method _exitIntro
   * @param {Object} targetElement
   */
  function _exitIntro(targetElement) {
    //remove overlay layer from the page
    var overlayLayer = targetElement.querySelector('.sui-introjs-overlay');

    //return if intro already completed or skipped
    if (overlayLayer === null) {
      return;
    }

    //for fade-out animation
    overlayLayer.style.opacity = 0;
    setTimeout(function () {
      if (overlayLayer.parentNode) {
        overlayLayer.parentNode.removeChild(overlayLayer);
      }
    }, 500);

    //remove all helper layers
    var helperLayer = targetElement.querySelector('.sui-introjs-helperLayer');
    if (helperLayer) {
      helperLayer.parentNode.removeChild(helperLayer);
    }

    //remove intro floating element
    var floatingElement = document.querySelector('.introjsFloatingElement');
    if (floatingElement) {
      floatingElement.parentNode.removeChild(floatingElement);
    }

    //remove `introjs-showElement` class from the element
    var showElement = document.querySelector('.introjs-showElement');
    if (showElement) {
      showElement.className = showElement.className.replace(/introjs-[a-zA-Z]+/g, '').replace(/^\s+|\s+$/g, ''); // This is a manual trim.
    }

    //remove `introjs-fixParent` class from the elements
    var fixParents = document.querySelectorAll('.introjs-fixParent');
    if (fixParents && fixParents.length > 0) {
      for (var i = fixParents.length - 1; i >= 0; i--) {
        fixParents[i].className = fixParents[i].className.replace(/introjs-fixParent/g, '').replace(/^\s+|\s+$/g, '');
      }
    }

    //clean listeners
    if (window.removeEventListener) {
      window.removeEventListener('keydown', this._onKeyDown, true);
    } else if (document.detachEvent) { //IE
      document.detachEvent('onkeydown', this._onKeyDown);
    }

    //set the step to zero
    this._currentStep = undefined;
  }

  /**
   * Render tooltip box in the page
   *
   * @api private
   * @method _placeTooltip
   * @param {Object} targetElement
   * @param {Object} tooltipLayer
   * @param {Object} arrowLayer
   */
  function _placeTooltip(targetElement, tooltipLayer, arrowLayer, helperNumberLayer) {
    var tooltipCssClass = '',
        currentStepObj,
        tooltipOffset,
        targetElementOffset;

    //reset the old style
    tooltipLayer.style.top        = null;
    tooltipLayer.style.right      = null;
    tooltipLayer.style.bottom     = null;
    tooltipLayer.style.left       = null;
    tooltipLayer.style.marginLeft = null;
    tooltipLayer.style.marginTop  = null;

    arrowLayer.style.display = 'inherit';

    if (typeof(helperNumberLayer) !== 'undefined' && helperNumberLayer !== null) {
      helperNumberLayer.style.top  = null;
      helperNumberLayer.style.left = null;
    }

    //prevent error when `this._currentStep` is undefined
    if (!this._introItems[this._currentStep]) return;

    //if we have a custom css class for each step
    currentStepObj = this._introItems[this._currentStep];
    if (typeof (currentStepObj.tooltipClass) === 'string') {
      tooltipCssClass = currentStepObj.tooltipClass;
    } else {
      tooltipCssClass = this._options.tooltipClass;
    }

    tooltipLayer.className = ('introjs-tooltip ' + tooltipCssClass).replace(/^\s+|\s+$/g, '');

    //custom css class for tooltip boxes
    var tooltipCssClass = this._options.tooltipClass;

    currentTooltipPosition = this._introItems[this._currentStep].position;
    switch (currentTooltipPosition) {
      case 'top':
        tooltipLayer.style.left = '15px';
        tooltipLayer.style.top = '-' + (_getOffset(tooltipLayer).height + 10) + 'px';
        arrowLayer.className = 'introjs-arrow bottom';
        break;
      case 'right':
        tooltipLayer.style.left = (_getOffset(targetElement).width + 20) + 'px';
        arrowLayer.className = 'introjs-arrow left';
        break;
      case 'left':
        if (this._options.showStepNumbers === true) {
          tooltipLayer.style.top = '15px';
        }
        tooltipLayer.style.right = (_getOffset(targetElement).width + 20) + 'px';
        arrowLayer.className = 'introjs-arrow right';
        break;
      case 'floating':
        arrowLayer.style.display = 'none';

        //we have to adjust the top and left of layer manually for intro items without element
        tooltipOffset = _getOffset(tooltipLayer);

        tooltipLayer.style.left   = '50%';
        tooltipLayer.style.top    = '50%';
        tooltipLayer.style.marginLeft = '-' + (tooltipOffset.width / 2)  + 'px';
        tooltipLayer.style.marginTop  = '-' + (tooltipOffset.height / 2) + 'px';

        if (typeof(helperNumberLayer) !==  'undefined' && helperNumberLayer !== null) {
          helperNumberLayer.style.left = '-' + ((tooltipOffset.width / 2) + 18) + 'px';
          helperNumberLayer.style.top  = '-' + ((tooltipOffset.height / 2) + 18) + 'px';
        }

        break;
      case 'bottom-right-aligned':
        arrowLayer.className      = 'introjs-arrow top-right';
        tooltipLayer.style.right  = '0px';
        tooltipLayer.style.bottom = '-' + (_getOffset(tooltipLayer).height + 10) + 'px';
        break;
      case 'bottom-middle-aligned':
        targetElementOffset = _getOffset(targetElement);
        tooltipOffset       = _getOffset(tooltipLayer);

        arrowLayer.className      = 'introjs-arrow top-middle';
        tooltipLayer.style.left   = (targetElementOffset.width / 2 - tooltipOffset.width / 2) + 'px';
        tooltipLayer.style.bottom = '-' + (tooltipOffset.height + 10) + 'px';
        break;
      default:
        tooltipLayer.style.bottom = '-' + (_getOffset(tooltipLayer).height + 10) + 'px';
        arrowLayer.className = 'introjs-arrow top';
        break;
    }
  }

  /**
   * Update the position of the helper layer on the screen
   *
   * @api private
   * @method _setHelperLayerPosition
   * @param {Object} helperLayer
   */
  function _setHelperLayerPosition(helperLayer) {
    if (helperLayer) {
      //prevent error when `this._currentStep` in undefined
      if (!this._introItems[this._currentStep]) return;

      var currentElement  = this._introItems[this._currentStep],
          elementPosition = _getOffset(currentElement.element),
          widthHeightPadding = 10;

      if (currentElement.position === 'floating') {
        widthHeightPadding = 0;
      }

      //set new position to helper layer
      helperLayer.setAttribute('style', 'width: ' + (elementPosition.width  + widthHeightPadding)  + 'px; ' +
                                        'height:' + (elementPosition.height + widthHeightPadding)  + 'px; ' +
                                        'top:'    + (elementPosition.top    - 5)   + 'px;' +
                                        'left: '  + (elementPosition.left   - 5)   + 'px;');
    }
  }

  /**
   * Show an element on the page
   *
   * @api private
   * @method _showElement
   * @param {Object} targetElement
   */
  function _showElement(targetElement) {

    if (typeof (this._introChangeCallback) !== 'undefined') {
        this._introChangeCallback.call(this, targetElement.element);
    }

    var self = this,
        oldHelperLayer = document.querySelector('.sui-introjs-helperLayer'),
        elementPosition = _getOffset(targetElement.element);  

    if (oldHelperLayer !== null) {
      var oldHelperNumberLayer = oldHelperLayer.querySelector('.introjs-helperNumberLayer'),
          oldtooltipLayer      = oldHelperLayer.querySelector('.introjs-tooltiptext'),
          oldArrowLayer        = oldHelperLayer.querySelector('.introjs-arrow'),
          oldtooltipContainer  = oldHelperLayer.querySelector('.introjs-tooltip'),
          skipTooltipButton    = oldHelperLayer.querySelector('.introjs-skipbutton'),
          prevTooltipButton    = oldHelperLayer.querySelector('.introjs-prevbutton'),
          nextTooltipButton    = oldHelperLayer.querySelector('.introjs-nextbutton');

      //hide the tooltip
      oldtooltipContainer.style.opacity = 0;

      if (oldHelperNumberLayer !== null) {
        var lastIntroItem = this._introItems[(targetElement.step - 2 >= 0 ? targetElement.step - 2 : 0)];

        if (lastIntroItem !== null && (this._direction === 'forward' && lastIntroItem.position === 'floating') || (this._direction === 'backward' && targetElement.position === 'floating')) {
          oldHelperNumberLayer.style.opacity = 0;
        }
      }

      //set new position to helper layer
      _setHelperLayerPosition.call(self, oldHelperLayer);

      //remove `introjs-fixParent` class from the elements
      var fixParents = document.querySelectorAll('.introjs-fixParent');
      if (fixParents && fixParents.length > 0) {
        for (var i = fixParents.length - 1; i >= 0; i--) {
          fixParents[i].className = fixParents[i].className.replace(/introjs-fixParent/g, '').replace(/^\s+|\s+$/g, '');
        }
      }

      //remove old classes
      var oldShowElement = document.querySelector('.introjs-showElement');
      oldShowElement.className = oldShowElement.className.replace(/introjs-[a-zA-Z]+/g, '').replace(/^\s+|\s+$/g, '');
      //we should wait until the CSS3 transition is competed (it's 0.3 sec) to prevent incorrect `height` and `width` calculation
      if (self._lastShowElementTimer) {
        clearTimeout(self._lastShowElementTimer);
      }
      self._lastShowElementTimer = setTimeout(function() {
        //set current step to the label
        if (oldHelperNumberLayer !== null) {
          oldHelperNumberLayer.innerHTML = targetElement.step;
        }
        //set current tooltip text
        oldtooltipLayer.innerHTML = targetElement.intro;
        //set the tooltip position
        _placeTooltip.call(self, targetElement.element, oldtooltipContainer, oldArrowLayer, oldHelperNumberLayer);

        //change active bullet
        oldHelperLayer.querySelector('.introjs-bullets li > a.active').className = '';
        oldHelperLayer.querySelector('.introjs-bullets li > a[data-stepnumber="' + targetElement.step + '"]').className = 'active';

        //show the tooltip
        oldtooltipContainer.style.opacity = 1;
        if (oldHelperNumberLayer) oldHelperNumberLayer.style.opacity = 1;
      }, 350);

    } else {
      var helperLayer       = document.createElement('div'),
          arrowLayer        = document.createElement('div'),
          tooltipLayer      = document.createElement('div'),
          tooltipTextLayer  = document.createElement('div'),
          bulletsLayer      = document.createElement('div'),
          buttonsLayer      = document.createElement('div');

      helperLayer.className = 'sui-introjs-helperLayer';

      //set new position to helper layer
      _setHelperLayerPosition.call(self, helperLayer);

      //add helper layer to target element
      this._targetElement.appendChild(helperLayer);

      arrowLayer.className = 'introjs-arrow';

      tooltipTextLayer.className = 'introjs-tooltiptext';
      tooltipTextLayer.innerHTML = targetElement.intro;

      bulletsLayer.className = 'introjs-bullets';

      if (this._options.showBullets === false) {
        bulletsLayer.style.display = 'none';
      }

      var ulContainer = document.createElement('ul');
      var anchorclick = function() {
        self.goToStep(this.getAttribute('data-stepnumber'));
      };

      for (var i = 0, stepsLength = this._introItems.length; i < stepsLength; i++) {
        var innerLi    = document.createElement('li');
        var anchorLink = document.createElement('a');

        anchorLink.onclick = anchorclick;

        if (i === 0) anchorLink.className = "active";

        anchorLink.href = 'javascript:void(0);';
        anchorLink.innerHTML = "&nbsp;";
        anchorLink.setAttribute('data-stepnumber', this._introItems[i].step);

        innerLi.appendChild(anchorLink);
        ulContainer.appendChild(innerLi);
      }

      bulletsLayer.appendChild(ulContainer);

      buttonsLayer.className = 'introjs-tooltipbuttons';
      if (this._options.showButtons === false) {
        buttonsLayer.style.display = 'none';
      }

      tooltipLayer.className = 'introjs-tooltip';
      tooltipLayer.appendChild(tooltipTextLayer);
      tooltipLayer.appendChild(bulletsLayer);

      //add helper layer number
      if (this._options.showStepNumbers === true) {
        var helperNumberLayer = document.createElement('span');
        helperNumberLayer.className = 'introjs-helperNumberLayer';
        helperNumberLayer.innerHTML = targetElement.step;
        helperLayer.appendChild(helperNumberLayer);
      }
      tooltipLayer.appendChild(arrowLayer);
      helperLayer.appendChild(tooltipLayer);

      //next button
      var nextTooltipButton = document.createElement('a');

      nextTooltipButton.onclick = function() {
        if (self._introItems.length - 1 !== self._currentStep) {
          _nextStep.call(self);
        }
      };

      nextTooltipButton.href = 'javascript:void(0);';
      nextTooltipButton.innerHTML = this._options.nextLabel;

      //previous button
      var prevTooltipButton = document.createElement('a');

      prevTooltipButton.onclick = function() {
        if (self._currentStep !== 0) {
          _previousStep.call(self);
        }
      };

      prevTooltipButton.href = 'javascript:void(0);';
      prevTooltipButton.innerHTML = this._options.prevLabel;

      //skip button
      var skipTooltipButton = document.createElement('a');
      skipTooltipButton.className = 'sui-btn introjs-skipbutton';
      skipTooltipButton.href = 'javascript:void(0);';
      skipTooltipButton.innerHTML = this._options.skipLabel;

      skipTooltipButton.onclick = function() {
        if (self._introItems.length - 1 === self._currentStep && typeof (self._introCompleteCallback) === 'function') {
          self._introCompleteCallback.call(self);
        }

        if (self._introItems.length - 1 !== self._currentStep && typeof (self._introExitCallback) === 'function') {
          self._introExitCallback.call(self);
        }

        _exitIntro.call(self, self._targetElement);
      };

      buttonsLayer.appendChild(skipTooltipButton);

      //in order to prevent displaying next/previous button always
      if (this._introItems.length > 1) {
        buttonsLayer.appendChild(prevTooltipButton);
        buttonsLayer.appendChild(nextTooltipButton);
      }

      tooltipLayer.appendChild(buttonsLayer);

      //set proper position
      _placeTooltip.call(self, targetElement.element, tooltipLayer, arrowLayer, helperNumberLayer);
    }

    if (this._currentStep === 0 && this._introItems.length > 1) {
      prevTooltipButton.className = 'sui-btn introjs-prevbutton disabled';
      nextTooltipButton.className = 'sui-btn introjs-nextbutton';
      skipTooltipButton.innerHTML = this._options.skipLabel;
    } else if (this._introItems.length - 1 === this._currentStep || this._introItems.length === 1) {
      skipTooltipButton.innerHTML = this._options.doneLabel;
      prevTooltipButton.className = 'sui-btn introjs-prevbutton';
      nextTooltipButton.className = 'sui-btn introjs-nextbutton disabled';
    } else {
      prevTooltipButton.className = 'sui-btn introjs-prevbutton';
      nextTooltipButton.className = 'sui-btn introjs-nextbutton';
      skipTooltipButton.innerHTML = this._options.skipLabel;
    }

    //Set focus on "next" button, so that hitting Enter always moves you onto the next step
    nextTooltipButton.focus();

    //add target element position style
    targetElement.element.className += ' introjs-showElement';

    var currentElementPosition = _getPropValue(targetElement.element, 'position');
    if (currentElementPosition !== 'absolute' &&
        currentElementPosition !== 'relative') {
      //change to new intro item
      targetElement.element.className += ' introjs-relativePosition';
    }

    var parentElm = targetElement.element.parentNode;
    while (parentElm !== null) {
      if (parentElm.tagName.toLowerCase() === 'body') break;

      //fix The Stacking Contenxt problem.
      //More detail: https://developer.mozilla.org/en-US/docs/Web/Guide/CSS/Understanding_z_index/The_stacking_context
      var zIndex = _getPropValue(parentElm, 'z-index');
      var opacity = parseFloat(_getPropValue(parentElm, 'opacity'));
      if (/[0-9]+/.test(zIndex) || opacity < 1) {
        parentElm.className += ' introjs-fixParent';
      }

      parentElm = parentElm.parentNode;
    }

    if (!_elementInViewport(targetElement.element) && this._options.scrollToElement === true) {
      var rect = targetElement.element.getBoundingClientRect(),
        winHeight=_getWinSize().height,
        top = rect.bottom - (rect.bottom - rect.top),
        bottom = rect.bottom - winHeight;

      //Scroll up
      if (top < 0 || targetElement.element.clientHeight > winHeight) {
        window.scrollBy(0, top - 30); // 30px padding from edge to look nice

      //Scroll down
      } else {
        window.scrollBy(0, bottom + 100); // 70px + 30px padding from edge to look nice
      }
    }

    if (typeof (this._introAfterChangeCallback) !== 'undefined') {
        this._introAfterChangeCallback.call(this, targetElement.element);
    }
  }

  /**
   * Get an element CSS property on the page
   * Thanks to JavaScript Kit: http://www.javascriptkit.com/dhtmltutors/dhtmlcascade4.shtml
   *
   * @api private
   * @method _getPropValue
   * @param {Object} element
   * @param {String} propName
   * @returns Element's property value
   */
  function _getPropValue (element, propName) {
    var propValue = '';
    if (element.currentStyle) { //IE
      propValue = element.currentStyle[propName];
    } else if (document.defaultView && document.defaultView.getComputedStyle) { //Others
      propValue = document.defaultView.getComputedStyle(element, null).getPropertyValue(propName);
    }

    //Prevent exception in IE
    if (propValue && propValue.toLowerCase) {
      return propValue.toLowerCase();
    } else {
      return propValue;
    }
  }

  /**
   * Provides a cross-browser way to get the screen dimensions
   * via: http://stackoverflow.com/questions/5864467/internet-explorer-innerheight
   *
   * @api private
   * @method _getWinSize
   * @returns {Object} width and height attributes
   */
  function _getWinSize() {
    if (window.innerWidth !== undefined) {
      return { width: window.innerWidth, height: window.innerHeight };
    } else {
      var D = document.documentElement;
      return { width: D.clientWidth, height: D.clientHeight };
    }
  }

  /**
   * Add overlay layer to the page
   * http://stackoverflow.com/questions/123999/how-to-tell-if-a-dom-element-is-visible-in-the-current-viewport
   *
   * @api private
   * @method _elementInViewport
   * @param {Object} el
   */
  function _elementInViewport(el) {
    var rect = el.getBoundingClientRect();

    return (
      rect.top >= 0 &&
      rect.left >= 0 &&
      (rect.bottom+80) <= window.innerHeight && // add 80 to get the text right
      rect.right <= window.innerWidth
    );
  }

  /**
   * Add overlay layer to the page
   *
   * @api private
   * @method _addOverlayLayer
   * @param {Object} targetElm
   */
  function _addOverlayLayer(targetElm) {
    var overlayLayer = document.createElement('div'),
        styleText = '',
        self = this;

    //set css class name
    overlayLayer.className = 'sui-introjs-overlay';

    //check if the target element is body, we should calculate the size of overlay layer in a better way
    if (targetElm.tagName.toLowerCase() === 'body') {
      styleText += 'top: 0;bottom: 0; left: 0;right: 0;position: fixed;';
      overlayLayer.setAttribute('style', styleText);
    } else {
      //set overlay layer position
      var elementPosition = _getOffset(targetElm);
      if (elementPosition) {
        styleText += 'width: ' + elementPosition.width + 'px; height:' + elementPosition.height + 'px; top:' + elementPosition.top + 'px;left: ' + elementPosition.left + 'px;';
        overlayLayer.setAttribute('style', styleText);
      }
    }

    targetElm.appendChild(overlayLayer);

    overlayLayer.onclick = function() {
      if (self._options.exitOnOverlayClick === true) {
        _exitIntro.call(self, targetElm);

        //check if any callback is defined
        if (self._introExitCallback !== undefined) {
          self._introExitCallback.call(self);
        }
      }
    };

    setTimeout(function() {
      styleText += 'opacity: ' + self._options.overlayOpacity.toString() + ';';
      overlayLayer.setAttribute('style', styleText);
    }, 10);

    return true;
  }

  /**
   * Get an element position on the page
   * Thanks to `meouw`: http://stackoverflow.com/a/442474/375966
   *
   * @api private
   * @method _getOffset
   * @param {Object} element
   * @returns Element's position info
   */
  function _getOffset(element) {
    var elementPosition = {};

    //set width
    elementPosition.width = element.offsetWidth;

    //set height
    elementPosition.height = element.offsetHeight;

    //calculate element top and left
    var _x = 0;
    var _y = 0;
    while (element && !isNaN(element.offsetLeft) && !isNaN(element.offsetTop)) {
      _x += element.offsetLeft;
      _y += element.offsetTop;
      element = element.offsetParent;
    }
    //set top
    elementPosition.top = _y;
    //set left
    elementPosition.left = _x;

    return elementPosition;
  }

  /**
   * Overwrites obj1's values with obj2's and adds obj2's if non existent in obj1
   * via: http://stackoverflow.com/questions/171251/how-can-i-merge-properties-of-two-javascript-objects-dynamically
   *
   * @param obj1
   * @param obj2
   * @returns obj3 a new object based on obj1 and obj2
   */
  function _mergeOptions(obj1,obj2) {
    var obj3 = {};
    for (var attrname in obj1) { obj3[attrname] = obj1[attrname]; }
    for (var attrname in obj2) { obj3[attrname] = obj2[attrname]; }
    return obj3;
  }

  var introJs = function (targetElm, options) {
    if ($.isPlainObject(targetElm)||(!targetElm && !options)){
        options = targetElm;
        return new IntroJs(document.body, options);
    } else if (targetElm.tagName) {
      //Ok, create a new instance
      return new IntroJs(targetElm, options);

    } else if (typeof (targetElm) === 'string') {
      //select the target element with query selector
      var targetElement = document.querySelector(targetElm);

      if (targetElement) {
        return new IntroJs(targetElement, options);
      } else {
        throw new Error('There is no element with given selector.');
      }
    }
  };

  /**
   * Current IntroJs version
   *
   * @property version
   * @type String
   */
  introJs.version = VERSION;

  //Prototype
  IntroJs.prototype = {
    defaults: {
      /* Next button label in tooltip box */
      nextLabel: '下一步 <i class="sui-icon icon-double-angle-right"></i> ',
      /* Previous button label in tooltip box */
      prevLabel: '<i class="sui-icon icon-double-angle-left"></i> 上一步',
      /* Skip button label in tooltip box */
      skipLabel: '知道了',
      /* Done button label in tooltip box */
      doneLabel: '知道了',
      /* Default tooltip box position */
      tooltipPosition: 'bottom',
      /* Next CSS class for tooltip boxes */
      tooltipClass: '',
      /* Close introduction when pressing Escape button? */
      exitOnEsc: true,
      /* Close introduction when clicking on overlay layer? */
      exitOnOverlayClick: true,
      /* Show step numbers in introduction? */
      showStepNumbers: true,
      /* Let user use keyboard to navigate the tour? */
      keyboardNavigation: true,
      /* Show tour control buttons? */
      showButtons: true,
      /* Show tour bullets? */
      showBullets: false,
      /* Scroll to highlighted element? */
      scrollToElement: true,
      /* Set the overlay opacity */
      overlayOpacity: 0.8
    },
    clone: function () {
      return new IntroJs(this);
    },
    setOption: function(option, value) {
      this._options[option] = value;
      return this;
    },
    setOptions: function(options) {
      this._options = _mergeOptions(this._options, options);
      return this;
    },
    start: function () {
      _introForElement.call(this, this._targetElement);
      return this;
    },
    goToStep: function(step) {
      _goToStep.call(this, step);
      return this;
    },
    nextStep: function() {
      _nextStep.call(this);
      return this;
    },
    previousStep: function() {
      _previousStep.call(this);
      return this;
    },
    exit: function() {
      _exitIntro.call(this, this._targetElement);
    },
    refresh: function() {
      _setHelperLayerPosition.call(this, document.querySelector('.sui-introjs-helperLayer'));
      return this;
    },
    onbeforechange: function(providedCallback) {
      if (typeof (providedCallback) === 'function') {
        this._introBeforeChangeCallback = providedCallback;
      } else {
        throw new Error('Provided callback for onbeforechange was not a function');
      }
      return this;
    },
    onchange: function(providedCallback) {
      if (typeof (providedCallback) === 'function') {
        this._introChangeCallback = providedCallback;
      } else {
        throw new Error('Provided callback for onchange was not a function.');
      }
      return this;
    },
    onafterchange: function(providedCallback) {
      if (typeof (providedCallback) === 'function') {
        this._introAfterChangeCallback = providedCallback;
      } else {
        throw new Error('Provided callback for onafterchange was not a function');
      }
      return this;
    },
    oncomplete: function(providedCallback) {
      if (typeof (providedCallback) === 'function') {
        this._introCompleteCallback = providedCallback;
      } else {
        throw new Error('Provided callback for oncomplete was not a function.');
      }
      return this;
    },
    onexit: function(providedCallback) {
      if (typeof (providedCallback) === 'function') {
        this._introExitCallback = providedCallback;
      } else {
        throw new Error('Provided callback for onexit was not a function.');
      }
      return this;
    }
  };


  $.introJs = introJs;
}(jQuery);

/* ==========================================================
 * bootstrap-carousel.js v2.3.2
 * http://getbootstrap.com/2.3.2/javascript.html#carousel
 * ==========================================================
 * Copyright 2013 Twitter, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * ========================================================== */


!function ($) {

  "use strict";


 /* CAROUSEL CLASS DEFINITION
  * ========================= */

  var Carousel = function (element, options) {
    this.$element = $(element)
    this.$indicators = this.$element.find('.carousel-indicators')
    this.options = options
    this.options.pause == 'hover' && this.$element
      .on('mouseenter', $.proxy(this.pause, this))
      .on('mouseleave', $.proxy(this.cycle, this))
  }

  Carousel.prototype = {

    cycle: function (e) {
      if (!e) this.paused = false
      if (this.interval) clearInterval(this.interval);
      this.options.interval
        && !this.paused
        && (this.interval = setInterval($.proxy(this.next, this), this.options.interval))
      return this
    }

  , getActiveIndex: function () {
      this.$active = this.$element.find('.item.active')
      this.$items = this.$active.parent().children()
      return this.$items.index(this.$active)
    }

  , to: function (pos) {
      var activeIndex = this.getActiveIndex()
        , that = this

      if (pos > (this.$items.length - 1) || pos < 0) return

      if (this.sliding) {
        return this.$element.one('slid', function () {
          that.to(pos)
        })
      }

      if (activeIndex == pos) {
        return this.pause().cycle()
      }

      return this.slide(pos > activeIndex ? 'next' : 'prev', $(this.$items[pos]))
    }

  , pause: function (e) {
      if (!e) this.paused = true
      if (this.$element.find('.next, .prev').length && $.support.transition.end) {
        this.$element.trigger($.support.transition.end)
        this.cycle(true)
      }
      clearInterval(this.interval)
      this.interval = null
      return this
    }

  , next: function () {
      if (this.sliding) return
      return this.slide('next')
    }

  , prev: function () {
      if (this.sliding) return
      return this.slide('prev')
    }

  , slide: function (type, next) {
      var $active = this.$element.find('.item.active')
        , $next = next || $active[type]()
        , isCycling = this.interval
        , direction = type == 'next' ? 'left' : 'right'
        , fallback  = type == 'next' ? 'first' : 'last'
        , that = this
        , e

      this.sliding = true

      isCycling && this.pause()

      $next = $next.length ? $next : this.$element.find('.item')[fallback]()

      e = $.Event('slide', {
        relatedTarget: $next[0]
      , direction: direction
      })

      if ($next.hasClass('active')) return

      if (this.$indicators.length) {
        this.$indicators.find('.active').removeClass('active')
        this.$element.one('slid', function () {
          var $nextIndicator = $(that.$indicators.children()[that.getActiveIndex()])
          $nextIndicator && $nextIndicator.addClass('active')
        })
      }

      if ($.support.transition && this.$element.hasClass('slide')) {
        this.$element.trigger(e)
        if (e.isDefaultPrevented()) return
        $next.addClass(type)
        $next[0].offsetWidth // force reflow
        $active.addClass(direction)
        $next.addClass(direction)
        this.$element.one($.support.transition.end, function () {
          $next.removeClass([type, direction].join(' ')).addClass('active')
          $active.removeClass(['active', direction].join(' '))
          that.sliding = false
          setTimeout(function () { that.$element.trigger('slid') }, 0)
        })
      } else {
        this.$element.trigger(e)
        if (e.isDefaultPrevented()) return
        $active.removeClass('active')
        $next.addClass('active')
        this.sliding = false
        this.$element.trigger('slid')
      }

      isCycling && this.cycle()

      return this
    }

  }


 /* CAROUSEL PLUGIN DEFINITION
  * ========================== */

  var old = $.fn.carousel

  $.fn.carousel = function (option) {
    return this.each(function () {
      var $this = $(this)
        , data = $this.data('carousel')
        , options = $.extend({}, $.fn.carousel.defaults, $this.data(), typeof option == 'object' && option)
        , action = typeof option == 'string' ? option : options.slide
      if (!data) $this.data('carousel', (data = new Carousel(this, options)))
      if (typeof option == 'number') data.to(option)
      else if (action) data[action]()
      else if (options.autoStart) data.pause().cycle()
    })
  }

  $.fn.carousel.defaults = {
    interval: 5000
  , pause: 'hover'
  , autoStart: true
  }

  $.fn.carousel.Constructor = Carousel


 /* CAROUSEL NO CONFLICT
  * ==================== */

  $.fn.carousel.noConflict = function () {
    $.fn.carousel = old
    return this
  }

 /* CAROUSEL DATA-API
  * ================= */

  $(document).on('click.sui-carousel.data-api', '[data-slide], [data-slide-to]', function (e) {
    var $this = $(this), href
      , $target = $($this.attr('data-target') || (href = $this.attr('href')) && href.replace(/.*(?=#[^\s]+$)/, '')) //strip for ie7
      , options = $.extend({}, $target.data(), $this.data())
      , slideIndex

    $target.carousel(options)

    if (slideIndex = $this.attr('data-slide-to')) {
      $target.data('carousel').pause().to(slideIndex).cycle()
    }

    e.preventDefault()
  })

  $(function() {
    $("[data-ride='carousel']").carousel();
  });

}(window.jQuery);

/**
 * Sea.js 3.0.0 | seajs.org/LICENSE.md
 */
(function(global, undefined) {

// Avoid conflicting when `sea.js` is loaded multiple times
if (global.seajs) {
  return
}

var seajs = global.seajs = {
  // The current version of Sea.js being used
  version: "3.0.0"
}

var data = seajs.data = {}


/**
 * util-lang.js - The minimal language enhancement
 */

function isType(type) {
  return function(obj) {
    return {}.toString.call(obj) == "[object " + type + "]"
  }
}

var isObject = isType("Object")
var isString = isType("String")
var isArray = Array.isArray || isType("Array")
var isFunction = isType("Function")

var _cid = 0
function cid() {
  return _cid++
}


/**
 * util-events.js - The minimal events support
 */

var events = data.events = {}

// Bind event
seajs.on = function(name, callback) {
  var list = events[name] || (events[name] = [])
  list.push(callback)
  return seajs
}

// Remove event. If `callback` is undefined, remove all callbacks for the
// event. If `event` and `callback` are both undefined, remove all callbacks
// for all events
seajs.off = function(name, callback) {
  // Remove *all* events
  if (!(name || callback)) {
    events = data.events = {}
    return seajs
  }

  var list = events[name]
  if (list) {
    if (callback) {
      for (var i = list.length - 1; i >= 0; i--) {
        if (list[i] === callback) {
          list.splice(i, 1)
        }
      }
    }
    else {
      delete events[name]
    }
  }

  return seajs
}

// Emit event, firing all bound callbacks. Callbacks receive the same
// arguments as `emit` does, apart from the event name
var emit = seajs.emit = function(name, data) {
  var list = events[name]

  if (list) {
    // Copy callback lists to prevent modification
    list = list.slice()

    // Execute event callbacks, use index because it's the faster.
    for(var i = 0, len = list.length; i < len; i++) {
      list[i](data)
    }
  }

  return seajs
}

/**
 * util-path.js - The utilities for operating path such as id, uri
 */

var DIRNAME_RE = /[^?#]*\//

var DOT_RE = /\/\.\//g
var DOUBLE_DOT_RE = /\/[^/]+\/\.\.\//
var MULTI_SLASH_RE = /([^:/])\/+\//g

// Extract the directory portion of a path
// dirname("a/b/c.js?t=123#xx/zz") ==> "a/b/"
// ref: http://jsperf.com/regex-vs-split/2
function dirname(path) {
  return path.match(DIRNAME_RE)[0]
}

// Canonicalize a path
// realpath("http://test.com/a//./b/../c") ==> "http://test.com/a/c"
function realpath(path) {
  // /a/b/./c/./d ==> /a/b/c/d
  path = path.replace(DOT_RE, "/")

  /*
    @author wh1100717
    a//b/c ==> a/b/c
    a///b/////c ==> a/b/c
    DOUBLE_DOT_RE matches a/b/c//../d path correctly only if replace // with / first
  */
  path = path.replace(MULTI_SLASH_RE, "$1/")

  // a/b/c/../../d  ==>  a/b/../d  ==>  a/d
  while (path.match(DOUBLE_DOT_RE)) {
    path = path.replace(DOUBLE_DOT_RE, "/")
  }

  return path
}

// Normalize an id
// normalize("path/to/a") ==> "path/to/a.js"
// NOTICE: substring is faster than negative slice and RegExp
function normalize(path) {
  var last = path.length - 1
  var lastC = path.charCodeAt(last)

  // If the uri ends with `#`, just return it without '#'
  if (lastC === 35 /* "#" */) {
    return path.substring(0, last)
  }

  return (path.substring(last - 2) === ".js" ||
      path.indexOf("?") > 0 ||
      lastC === 47 /* "/" */) ? path : path + ".js"
}


var PATHS_RE = /^([^/:]+)(\/.+)$/
var VARS_RE = /{([^{]+)}/g

function parseAlias(id) {
  var alias = data.alias
  return alias && isString(alias[id]) ? alias[id] : id
}

function parsePaths(id) {
  var paths = data.paths
  var m

  if (paths && (m = id.match(PATHS_RE)) && isString(paths[m[1]])) {
    id = paths[m[1]] + m[2]
  }

  return id
}

function parseVars(id) {
  var vars = data.vars

  if (vars && id.indexOf("{") > -1) {
    id = id.replace(VARS_RE, function(m, key) {
      return isString(vars[key]) ? vars[key] : m
    })
  }

  return id
}

function parseMap(uri) {
  var map = data.map
  var ret = uri

  if (map) {
    for (var i = 0, len = map.length; i < len; i++) {
      var rule = map[i]

      ret = isFunction(rule) ?
          (rule(uri) || uri) :
          uri.replace(rule[0], rule[1])

      // Only apply the first matched rule
      if (ret !== uri) break
    }
  }

  return ret
}


var ABSOLUTE_RE = /^\/\/.|:\//
var ROOT_DIR_RE = /^.*?\/\/.*?\//

function addBase(id, refUri) {
  var ret
  var first = id.charCodeAt(0)

  // Absolute
  if (ABSOLUTE_RE.test(id)) {
    ret = id
  }
  // Relative
  else if (first === 46 /* "." */) {
    ret = (refUri ? dirname(refUri) : data.cwd) + id
  }
  // Root
  else if (first === 47 /* "/" */) {
    var m = data.cwd.match(ROOT_DIR_RE)
    ret = m ? m[0] + id.substring(1) : id
  }
  // Top-level
  else {
    ret = data.base + id
  }

  // Add default protocol when uri begins with "//"
  if (ret.indexOf("//") === 0) {
    ret = location.protocol + ret
  }

  return realpath(ret)
}

function id2Uri(id, refUri) {
  if (!id) return ""

  id = parseAlias(id)
  id = parsePaths(id)
  id = parseAlias(id)
  id = parseVars(id)
  id = parseAlias(id)
  id = normalize(id)
  id = parseAlias(id)

  var uri = addBase(id, refUri)
  uri = parseAlias(uri)
  uri = parseMap(uri)

  return uri
}

// For Developers
seajs.resolve = id2Uri;

// Check environment
var isWebWorker = typeof window === 'undefined' && typeof importScripts !== 'undefined' && isFunction(importScripts);

// Ignore about:xxx and blob:xxx
var IGNORE_LOCATION_RE = /^(about|blob):/;
var loaderDir;
// Sea.js's full path
var loaderPath;
// Location is read-only from web worker, should be ok though
var cwd = (!location.href || IGNORE_LOCATION_RE.test(location.href)) ? '' : dirname(location.href);

if (isWebWorker) {
  // Web worker doesn't create DOM object when loading scripts
  // Get sea.js's path by stack trace.
  var stack;
  try {
    var up = new Error();
    throw up;
  } catch (e) {
    // IE won't set Error.stack until thrown
    stack = e.stack.split('\n');
  }
  // First line is 'Error'
  stack.shift();

  var m;
  // Try match `url:row:col` from stack trace line. Known formats:
  // Chrome:  '    at http://localhost:8000/script/sea-worker-debug.js:294:25'
  // FireFox: '@http://localhost:8000/script/sea-worker-debug.js:1082:1'
  // IE11:    '   at Anonymous function (http://localhost:8000/script/sea-worker-debug.js:295:5)'
  // Don't care about older browsers since web worker is an HTML5 feature
  var TRACE_RE = /.*?((?:http|https|file)(?::\/{2}[\w]+)(?:[\/|\.]?)(?:[^\s"]*)).*?/i
  // Try match `url` (Note: in IE there will be a tailing ')')
  var URL_RE = /(.*?):\d+:\d+\)?$/;
  // Find url of from stack trace.
  // Cannot simply read the first one because sometimes we will get:
  // Error
  //  at Error (native) <- Here's your problem
  //  at http://localhost:8000/_site/dist/sea.js:2:4334 <- What we want
  //  at http://localhost:8000/_site/dist/sea.js:2:8386
  //  at http://localhost:8000/_site/tests/specs/web-worker/worker.js:3:1
  while (stack.length > 0) {
    var top = stack.shift();
    m = TRACE_RE.exec(top);
    if (m != null) {
      break;
    }
  }
  var url;
  if (m != null) {
    // Remove line number and column number
    // No need to check, can't be wrong at this point
    var url = URL_RE.exec(m[1])[1];
  }
  // Set
  loaderPath = url
  // Set loaderDir
  loaderDir = dirname(url || cwd);
  // This happens with inline worker.
  // When entrance script's location.href is a blob url,
  // cwd will not be available.
  // Fall back to loaderDir.
  if (cwd === '') {
    cwd = loaderDir;
  }
}
else {
  var doc = document
  var scripts = doc.scripts

  // Recommend to add `seajsnode` id for the `sea.js` script element
  var loaderScript = doc.getElementById("seajsnode") ||
    scripts[scripts.length - 1]

  function getScriptAbsoluteSrc(node) {
    return node.hasAttribute ? // non-IE6/7
      node.src :
      // see http://msdn.microsoft.com/en-us/library/ms536429(VS.85).aspx
      node.getAttribute("src", 4)
  }
  loaderPath = getScriptAbsoluteSrc(loaderScript)
  // When `sea.js` is inline, set loaderDir to current working directory
  loaderDir = dirname(loaderPath || cwd)
}

/**
 * util-request.js - The utilities for requesting script and style files
 * ref: tests/research/load-js-css/test.html
 */
if (isWebWorker) {
  function requestFromWebWorker(url, callback, charset) {
    // Load with importScripts
    var error;
    try {
      importScripts(url);
    } catch (e) {
      error = e;
    }
    callback(error);
  }
  // For Developers
  seajs.request = requestFromWebWorker;
}
else {
  var doc = document
  var head = doc.head || doc.getElementsByTagName("head")[0] || doc.documentElement
  var baseElement = head.getElementsByTagName("base")[0]

  var currentlyAddingScript

  function request(url, callback, charset) {
    var node = doc.createElement("script")

    if (charset) {
      var cs = isFunction(charset) ? charset(url) : charset
      if (cs) {
        node.charset = cs
      }
    }

    addOnload(node, callback, url)

    node.async = true
    node.src = url

    // For some cache cases in IE 6-8, the script executes IMMEDIATELY after
    // the end of the insert execution, so use `currentlyAddingScript` to
    // hold current node, for deriving url in `define` call
    currentlyAddingScript = node

    // ref: #185 & http://dev.jquery.com/ticket/2709
    baseElement ?
        head.insertBefore(node, baseElement) :
        head.appendChild(node)

    currentlyAddingScript = null
  }

  function addOnload(node, callback, url) {
    var supportOnload = "onload" in node

    if (supportOnload) {
      node.onload = onload
      node.onerror = function() {
        emit("error", { uri: url, node: node })
        onload(true)
      }
    }
    else {
      node.onreadystatechange = function() {
        if (/loaded|complete/.test(node.readyState)) {
          onload()
        }
      }
    }

    function onload(error) {
      // Ensure only run once and handle memory leak in IE
      node.onload = node.onerror = node.onreadystatechange = null

      // Remove the script to reduce memory leak
      if (!data.debug) {
        head.removeChild(node)
      }

      // Dereference the node
      node = null

      callback(error)
    }
  }

  // For Developers
  seajs.request = request

}
var interactiveScript

function getCurrentScript() {
  if (currentlyAddingScript) {
    return currentlyAddingScript
  }

  // For IE6-9 browsers, the script onload event may not fire right
  // after the script is evaluated. Kris Zyp found that it
  // could query the script nodes and the one that is in "interactive"
  // mode indicates the current script
  // ref: http://goo.gl/JHfFW
  if (interactiveScript && interactiveScript.readyState === "interactive") {
    return interactiveScript
  }

  var scripts = head.getElementsByTagName("script")

  for (var i = scripts.length - 1; i >= 0; i--) {
    var script = scripts[i]
    if (script.readyState === "interactive") {
      interactiveScript = script
      return interactiveScript
    }
  }
}

/**
 * util-deps.js - The parser for dependencies
 * ref: tests/research/parse-dependencies/test.html
 * ref: https://github.com/seajs/searequire
 */

function parseDependencies(s) {
  if(s.indexOf('require') == -1) {
    return []
  }
  var index = 0, peek, length = s.length, isReg = 1, modName = 0, parentheseState = 0, parentheseStack = [], res = []
  while(index < length) {
    readch()
    if(isBlank()) {
    }
    else if(isQuote()) {
      dealQuote()
      isReg = 1
    }
    else if(peek == '/') {
      readch()
      if(peek == '/') {
        index = s.indexOf('\n', index)
        if(index == -1) {
          index = s.length
        }
      }
      else if(peek == '*') {
        index = s.indexOf('*/', index)
        if(index == -1) {
          index = length
        }
        else {
          index += 2
        }
      }
      else if(isReg) {
        dealReg()
        isReg = 0
      }
      else {
        index--
        isReg = 1
      }
    }
    else if(isWord()) {
      dealWord()
    }
    else if(isNumber()) {
      dealNumber()
    }
    else if(peek == '(') {
      parentheseStack.push(parentheseState)
      isReg = 1
    }
    else if(peek == ')') {
      isReg = parentheseStack.pop()
    }
    else {
      isReg = peek != ']'
      modName = 0
    }
  }
  return res
  function readch() {
    peek = s.charAt(index++)
  }
  function isBlank() {
    return /\s/.test(peek)
  }
  function isQuote() {
    return peek == '"' || peek == "'"
  }
  function dealQuote() {
    var start = index
    var c = peek
    var end = s.indexOf(c, start)
    if(end == -1) {
      index = length
    }
    else if(s.charAt(end - 1) != '\\') {
      index = end + 1
    }
    else {
      while(index < length) {
        readch()
        if(peek == '\\') {
          index++
        }
        else if(peek == c) {
          break
        }
      }
    }
    if(modName) {
      res.push(s.slice(start, index - 1))
      modName = 0
    }
  }
  function dealReg() {
    index--
    while(index < length) {
      readch()
      if(peek == '\\') {
        index++
      }
      else if(peek == '/') {
        break
      }
      else if(peek == '[') {
        while(index < length) {
          readch()
          if(peek == '\\') {
            index++
          }
          else if(peek == ']') {
            break
          }
        }
      }
    }
  }
  function isWord() {
    return /[a-z_$]/i.test(peek)
  }
  function dealWord() {
    var s2 = s.slice(index - 1)
    var r = /^[\w$]+/.exec(s2)[0]
    parentheseState = {
      'if': 1,
      'for': 1,
      'while': 1,
      'with': 1
    }[r]
    isReg = {
      'break': 1,
      'case': 1,
      'continue': 1,
      'debugger': 1,
      'delete': 1,
      'do': 1,
      'else': 1,
      'false': 1,
      'if': 1,
      'in': 1,
      'instanceof': 1,
      'return': 1,
      'typeof': 1,
      'void': 1
    }[r]
    modName = /^require\s*\(\s*(['"]).+?\1\s*\)/.test(s2)
    if(modName) {
      r = /^require\s*\(\s*['"]/.exec(s2)[0]
      index += r.length - 2
    }
    else {
      index += /^[\w$]+(?:\s*\.\s*[\w$]+)*/.exec(s2)[0].length - 1
    }
  }
  function isNumber() {
    return /\d/.test(peek)
      || peek == '.' && /\d/.test(s.charAt(index))
  }
  function dealNumber() {
    var s2 = s.slice(index - 1)
    var r
    if(peek == '.') {
      r = /^\.\d+(?:E[+-]?\d*)?\s*/i.exec(s2)[0]
    }
    else if(/^0x[\da-f]*/i.test(s2)) {
      r = /^0x[\da-f]*\s*/i.exec(s2)[0]
    }
    else {
      r = /^\d+\.?\d*(?:E[+-]?\d*)?\s*/i.exec(s2)[0]
    }
    index += r.length - 1
    isReg = 0
  }
}
/**
 * module.js - The core of module loader
 */

var cachedMods = seajs.cache = {}
var anonymousMeta

var fetchingList = {}
var fetchedList = {}
var callbackList = {}

var STATUS = Module.STATUS = {
  // 1 - The `module.uri` is being fetched
  FETCHING: 1,
  // 2 - The meta data has been saved to cachedMods
  SAVED: 2,
  // 3 - The `module.dependencies` are being loaded
  LOADING: 3,
  // 4 - The module are ready to execute
  LOADED: 4,
  // 5 - The module is being executed
  EXECUTING: 5,
  // 6 - The `module.exports` is available
  EXECUTED: 6,
  // 7 - 404
  ERROR: 7
}


function Module(uri, deps) {
  this.uri = uri
  this.dependencies = deps || []
  this.deps = {} // Ref the dependence modules
  this.status = 0

  this._entry = []
}

// Resolve module.dependencies
Module.prototype.resolve = function() {
  var mod = this
  var ids = mod.dependencies
  var uris = []

  for (var i = 0, len = ids.length; i < len; i++) {
    uris[i] = Module.resolve(ids[i], mod.uri)
  }
  return uris
}

Module.prototype.pass = function() {
  var mod = this

  var len = mod.dependencies.length

  for (var i = 0; i < mod._entry.length; i++) {
    var entry = mod._entry[i]
    var count = 0
    for (var j = 0; j < len; j++) {
      var m = mod.deps[mod.dependencies[j]]
      // If the module is unload and unused in the entry, pass entry to it
      if (m.status < STATUS.LOADED && !entry.history.hasOwnProperty(m.uri)) {
        entry.history[m.uri] = true
        count++
        m._entry.push(entry)
        if(m.status === STATUS.LOADING) {
          m.pass()
        }
      }
    }
    // If has passed the entry to it's dependencies, modify the entry's count and del it in the module
    if (count > 0) {
      entry.remain += count - 1
      mod._entry.shift()
      i--
    }
  }
}

// Load module.dependencies and fire onload when all done
Module.prototype.load = function() {
  var mod = this

  // If the module is being loaded, just wait it onload call
  if (mod.status >= STATUS.LOADING) {
    return
  }

  mod.status = STATUS.LOADING

  // Emit `load` event for plugins such as combo plugin
  var uris = mod.resolve()
  emit("load", uris)

  for (var i = 0, len = uris.length; i < len; i++) {
    mod.deps[mod.dependencies[i]] = Module.get(uris[i])
  }

  // Pass entry to it's dependencies
  mod.pass()

  // If module has entries not be passed, call onload
  if (mod._entry.length) {
    mod.onload()
    return
  }

  // Begin parallel loading
  var requestCache = {}
  var m

  for (i = 0; i < len; i++) {
    m = cachedMods[uris[i]]

    if (m.status < STATUS.FETCHING) {
      m.fetch(requestCache)
    }
    else if (m.status === STATUS.SAVED) {
      m.load()
    }
  }

  // Send all requests at last to avoid cache bug in IE6-9. Issues#808
  for (var requestUri in requestCache) {
    if (requestCache.hasOwnProperty(requestUri)) {
      requestCache[requestUri]()
    }
  }
}

// Call this method when module is loaded
Module.prototype.onload = function() {
  var mod = this
  mod.status = STATUS.LOADED

  // When sometimes cached in IE, exec will occur before onload, make sure len is an number
  for (var i = 0, len = (mod._entry || []).length; i < len; i++) {
    var entry = mod._entry[i]
    if (--entry.remain === 0) {
      entry.callback()
    }
  }

  delete mod._entry
}

// Call this method when module is 404
Module.prototype.error = function() {
  var mod = this
  mod.onload()
  mod.status = STATUS.ERROR
}

// Execute a module
Module.prototype.exec = function () {
  var mod = this

  // When module is executed, DO NOT execute it again. When module
  // is being executed, just return `module.exports` too, for avoiding
  // circularly calling
  if (mod.status >= STATUS.EXECUTING) {
    return mod.exports
  }

  mod.status = STATUS.EXECUTING

  if (mod._entry && !mod._entry.length) {
    delete mod._entry
  }

  //non-cmd module has no property factory and exports
  if (!mod.hasOwnProperty('factory')) {
    mod.non = true
    return
  }

  // Create require
  var uri = mod.uri

  function require(id) {
    var m = mod.deps[id] || Module.get(require.resolve(id))
    if (m.status == STATUS.ERROR) {
      throw new Error('module was broken: ' + m.uri);
    }
    return m.exec()
  }

  require.resolve = function(id) {
    return Module.resolve(id, uri)
  }

  require.async = function(ids, callback) {
    Module.use(ids, callback, uri + "_async_" + cid())
    return require
  }

  // Exec factory
  var factory = mod.factory

  var exports = isFunction(factory) ?
    factory(require, mod.exports = {}, mod) :
    factory

  if (exports === undefined) {
    exports = mod.exports
  }

  // Reduce memory leak
  delete mod.factory

  mod.exports = exports
  mod.status = STATUS.EXECUTED

  // Emit `exec` event
  emit("exec", mod)

  return mod.exports
}

// Fetch a module
Module.prototype.fetch = function(requestCache) {
  var mod = this
  var uri = mod.uri

  mod.status = STATUS.FETCHING

  // Emit `fetch` event for plugins such as combo plugin
  var emitData = { uri: uri }
  emit("fetch", emitData)
  var requestUri = emitData.requestUri || uri

  // Empty uri or a non-CMD module
  if (!requestUri || fetchedList.hasOwnProperty(requestUri)) {
    mod.load()
    return
  }

  if (fetchingList.hasOwnProperty(requestUri)) {
    callbackList[requestUri].push(mod)
    return
  }

  fetchingList[requestUri] = true
  callbackList[requestUri] = [mod]

  // Emit `request` event for plugins such as text plugin
  emit("request", emitData = {
    uri: uri,
    requestUri: requestUri,
    onRequest: onRequest,
    charset: isFunction(data.charset) ? data.charset(requestUri) || 'utf-8' : data.charset
  })

  if (!emitData.requested) {
    requestCache ?
      requestCache[emitData.requestUri] = sendRequest :
      sendRequest()
  }

  function sendRequest() {
    seajs.request(emitData.requestUri, emitData.onRequest, emitData.charset)
  }

  function onRequest(error) {
    delete fetchingList[requestUri]
    fetchedList[requestUri] = true

    // Save meta data of anonymous module
    if (anonymousMeta) {
      Module.save(uri, anonymousMeta)
      anonymousMeta = null
    }

    // Call callbacks
    var m, mods = callbackList[requestUri]
    delete callbackList[requestUri]
    while ((m = mods.shift())) {
      // When 404 occurs, the params error will be true
      if(error === true) {
        m.error()
      }
      else {
        m.load()
      }
    }
  }
}

// Resolve id to uri
Module.resolve = function(id, refUri) {
  // Emit `resolve` event for plugins such as text plugin
  var emitData = { id: id, refUri: refUri }
  emit("resolve", emitData)

  return emitData.uri || seajs.resolve(emitData.id, refUri)
}

// Define a module
Module.define = function (id, deps, factory) {
  var argsLen = arguments.length

  // define(factory)
  if (argsLen === 1) {
    factory = id
    id = undefined
  }
  else if (argsLen === 2) {
    factory = deps

    // define(deps, factory)
    if (isArray(id)) {
      deps = id
      id = undefined
    }
    // define(id, factory)
    else {
      deps = undefined
    }
  }

  // Parse dependencies according to the module factory code
  if (!isArray(deps) && isFunction(factory)) {
    deps = typeof parseDependencies === "undefined" ? [] : parseDependencies(factory.toString())
  }

  var meta = {
    id: id,
    uri: Module.resolve(id),
    deps: deps,
    factory: factory
  }

  // Try to derive uri in IE6-9 for anonymous modules
  if (!isWebWorker && !meta.uri && doc.attachEvent && typeof getCurrentScript !== "undefined") {
    var script = getCurrentScript()

    if (script) {
      meta.uri = script.src
    }

    // NOTE: If the id-deriving methods above is failed, then falls back
    // to use onload event to get the uri
  }

  // Emit `define` event, used in nocache plugin, seajs node version etc
  emit("define", meta)

  meta.uri ? Module.save(meta.uri, meta) :
    // Save information for "saving" work in the script onload event
    anonymousMeta = meta
}

// Save meta data to cachedMods
Module.save = function(uri, meta) {
  var mod = Module.get(uri)

  // Do NOT override already saved modules
  if (mod.status < STATUS.SAVED) {
    mod.id = meta.id || uri
    mod.dependencies = meta.deps || []
    mod.factory = meta.factory
    mod.status = STATUS.SAVED

    emit("save", mod)
  }
}

// Get an existed module or create a new one
Module.get = function(uri, deps) {
  return cachedMods[uri] || (cachedMods[uri] = new Module(uri, deps))
}

// Use function is equal to load a anonymous module
Module.use = function (ids, callback, uri) {
  var mod = Module.get(uri, isArray(ids) ? ids : [ids])

  mod._entry.push(mod)
  mod.history = {}
  mod.remain = 1

  mod.callback = function() {
    var exports = []
    var uris = mod.resolve()

    for (var i = 0, len = uris.length; i < len; i++) {
      exports[i] = cachedMods[uris[i]].exec()
    }

    if (callback) {
      callback.apply(global, exports)
    }

    delete mod.callback
    delete mod.history
    delete mod.remain
    delete mod._entry
  }

  mod.load()
}


// Public API

seajs.use = function(ids, callback) {
  Module.use(ids, callback, data.cwd + "_use_" + cid())
  return seajs
}

Module.define.cmd = {}
global.define = Module.define


// For Developers

seajs.Module = Module
data.fetchedList = fetchedList
data.cid = cid

seajs.require = function(id) {
  var mod = Module.get(Module.resolve(id))
  if (mod.status < STATUS.EXECUTING) {
    mod.onload()
    mod.exec()
  }
  return mod.exports
}

/**
 * config.js - The configuration for the loader
 */

// The root path to use for id2uri parsing
data.base = loaderDir

// The loader directory
data.dir = loaderDir

// The loader's full path
data.loader = loaderPath

// The current working directory
data.cwd = cwd

// The charset for requesting files
data.charset = "utf-8"

// data.alias - An object containing shorthands of module id
// data.paths - An object containing path shorthands in module id
// data.vars - The {xxx} variables in module id
// data.map - An array containing rules to map module uri
// data.debug - Debug mode. The default value is false

seajs.config = function(configData) {

  for (var key in configData) {
    var curr = configData[key]
    var prev = data[key]

    // Merge object config such as alias, vars
    if (prev && isObject(prev)) {
      for (var k in curr) {
        prev[k] = curr[k]
      }
    }
    else {
      // Concat array config such as map
      if (isArray(prev)) {
        curr = prev.concat(curr)
      }
      // Make sure that `data.base` is an absolute path
      else if (key === "base") {
        // Make sure end with "/"
        if (curr.slice(-1) !== "/") {
          curr += "/"
        }
        curr = addBase(curr)
      }

      // Set config
      data[key] = curr
    }
  }

  emit("config", configData)
  return seajs
}

})(this);

define('app/config',[],function () {
    "use strict";

    var config = {};
    config.imgCdnUrl = "https://cdn1.meijiabang.cn/";
    config.plugins = ['plugin/image-picker','plugin/component-picker','plugin/app-route-picker','plugin/datetime-picker','plugin/beautify','plugin/beautify-html','plugin/beautify-css'];
    config.api = "http://api.meijiabang.cn/";
    config.apiStatic = "http://static.api.meijialove.com/";
    return config;
});
define('common/util', ['app/config'], function (require) {
    "use strict";

    var config = require('app/config');

    var Util = {};

    //修复135图片
    Util.restoreWx135Image = function(val){
        var imgProxy = [{"scheme":"http","host":"img03.store.sogou.com","path":"/net/a/04/link","query":"url"},{"scheme":"http","host":"remote.wx135.com","path":"/oss/view","query":"d"}];
        var reg = /(?:<img[^>]+src=|url)("|'|\((?:&quot;)?)?(https?:\/\/[^\s]+)(\1|(?:&quot;)+\))/gi;
        function parse_url(str, component) {
            //       discuss at: http://phpjs.org/functions/parse_url/
            //      original by: Steven Levithan (http://blog.stevenlevithan.com)
            // reimplemented by: Brett Zamir (http://brett-zamir.me)
            //         input by: Lorenzo Pisani
            //         input by: Tony
            //      improved by: Brett Zamir (http://brett-zamir.me)
            //             note: original by http://stevenlevithan.com/demo/parseuri/js/assets/parseuri.js
            //             note: blog post at http://blog.stevenlevithan.com/archives/parseuri
            //             note: demo at http://stevenlevithan.com/demo/parseuri/js/assets/parseuri.js
            //             note: Does not replace invalid characters with '_' as in PHP, nor does it return false with
            //             note: a seriously malformed URL.
            //             note: Besides function name, is essentially the same as parseUri as well as our allowing
            //             note: an extra slash after the scheme/protocol (to allow file:/// as in PHP)
            //        example 1: parse_url('http://username:password@hostname/path?arg=value#anchor');
            //        returns 1: {scheme: 'http', host: 'hostname', user: 'username', pass: 'password', path: '/path', query: 'arg=value', fragment: 'anchor'}

            var query, key = ['source', 'scheme', 'authority', 'userInfo', 'user', 'pass', 'host', 'port',
                    'relative', 'path', 'directory', 'file', 'query', 'fragment'
                ],
                ini = {},
                mode = (ini['phpjs.parse_url.mode'] &&
                    ini['phpjs.parse_url.mode'].local_value) || 'php',
                parser = {
                    php: /^(?:([^:\/?#]+):)?(?:\/\/()(?:(?:()(?:([^:@]*):?([^:@]*))?@)?([^:\/?#]*)(?::(\d*))?))?()(?:(()(?:(?:[^?#\/]*\/)*)()(?:[^?#]*))(?:\?([^#]*))?(?:#(.*))?)/,
                    strict: /^(?:([^:\/?#]+):)?(?:\/\/((?:(([^:@]*):?([^:@]*))?@)?([^:\/?#]*)(?::(\d*))?))?((((?:[^?#\/]*\/)*)([^?#]*))(?:\?([^#]*))?(?:#(.*))?)/,
                    loose: /^(?:(?![^:@]+:[^:@\/]*@)([^:\/?#.]+):)?(?:\/\/\/?)?((?:(([^:@]*):?([^:@]*))?@)?([^:\/?#]*)(?::(\d*))?)(((\/(?:[^?#](?![^?#\/]*\.[^?#\/.]+(?:[?#]|$)))*\/?)?([^?#\/]*))(?:\?([^#]*))?(?:#(.*))?)/ // Added one optional slash to post-scheme to catch file:/// (should restrict this)
                };

            var m = parser[mode].exec(str),
                uri = {},
                i = 14;
            while (i--) {
                if (m[i]) {
                    uri[key[i]] = m[i];
                }
            }

            if (component) {
                return uri[component.replace('PHP_URL_', '')
                    .toLowerCase()];
            }
            if (mode !== 'php') {
                var name = (ini['phpjs.parse_url.queryKey'] &&
                    ini['phpjs.parse_url.queryKey'].local_value) || 'queryKey';
                parser = /(?:^|&)([^&=]*)=?([^&]*)/g;
                uri[name] = {};
                query = uri[key[12]] || '';
                query.replace(parser, function($0, $1, $2) {
                    if ($1) {
                        uri[name][$1] = $2;
                    }
                });
            }
            delete uri.source;
            return uri;
        }
        function parse_str(str, array) {
            //       discuss at: http://phpjs.org/functions/parse_str/
            //      original by: Cagri Ekin
            //      improved by: Michael White (http://getsprink.com)
            //      improved by: Jack
            //      improved by: Brett Zamir (http://brett-zamir.me)
            //      bugfixed by: Onno Marsman
            //      bugfixed by: Brett Zamir (http://brett-zamir.me)
            //      bugfixed by: stag019
            //      bugfixed by: Brett Zamir (http://brett-zamir.me)
            //      bugfixed by: MIO_KODUKI (http://mio-koduki.blogspot.com/)
            // reimplemented by: stag019
            //         input by: Dreamer
            //         input by: Zaide (http://zaidesthings.com/)
            //         input by: David Pesta (http://davidpesta.com/)
            //         input by: jeicquest
            //             note: When no argument is specified, will put variables in global scope.
            //             note: When a particular argument has been passed, and the returned value is different parse_str of PHP. For example, a=b=c&d====c
            //             test: skip
            //        example 1: var arr = {};
            //        example 1: parse_str('first=foo&second=bar', arr);
            //        example 1: $result = arr
            //        returns 1: { first: 'foo', second: 'bar' }
            //        example 2: var arr = {};
            //        example 2: parse_str('str_a=Jack+and+Jill+didn%27t+see+the+well.', arr);
            //        example 2: $result = arr
            //        returns 2: { str_a: "Jack and Jill didn't see the well." }
            //        example 3: var abc = {3:'a'};
            //        example 3: parse_str('abc[a][b]["c"]=def&abc[q]=t+5');
            //        returns 3: {"3":"a","a":{"b":{"c":"def"}},"q":"t 5"}

            var strArr = String(str)
                .replace(/^&/, '')
                .replace(/&$/, '')
                .split('&'),
                sal = strArr.length,
                i, j, ct, p, lastObj, obj, lastIter, undef, chr, tmp, key, value,
                postLeftBracketPos, keys, keysLen,
                fixStr = function(str) {
                    return decodeURIComponent(str.replace(/\+/g, '%20'));
                };

            if (!array) {
                array = this.window;
            }

            for (i = 0; i < sal; i++) {
                tmp = strArr[i].split('=');
                key = fixStr(tmp[0]);
                value = (tmp.length < 2) ? '' : fixStr(tmp[1]);

                while (key.charAt(0) === ' ') {
                    key = key.slice(1);
                }
                if (key.indexOf('\x00') > -1) {
                    key = key.slice(0, key.indexOf('\x00'));
                }
                if (key && key.charAt(0) !== '[') {
                    keys = [];
                    postLeftBracketPos = 0;
                    for (j = 0; j < key.length; j++) {
                        if (key.charAt(j) === '[' && !postLeftBracketPos) {
                            postLeftBracketPos = j + 1;
                        } else if (key.charAt(j) === ']') {
                            if (postLeftBracketPos) {
                                if (!keys.length) {
                                    keys.push(key.slice(0, postLeftBracketPos - 1));
                                }
                                keys.push(key.substr(postLeftBracketPos, j - postLeftBracketPos));
                                postLeftBracketPos = 0;
                                if (key.charAt(j + 1) !== '[') {
                                    break;
                                }
                            }
                        }
                    }
                    if (!keys.length) {
                        keys = [key];
                    }
                    for (j = 0; j < keys[0].length; j++) {
                        chr = keys[0].charAt(j);
                        if (chr === ' ' || chr === '.' || chr === '[') {
                            keys[0] = keys[0].substr(0, j) + '_' + keys[0].substr(j + 1);
                        }
                        if (chr === '[') {
                            break;
                        }
                    }

                    obj = array;
                    for (j = 0, keysLen = keys.length; j < keysLen; j++) {
                        key = keys[j].replace(/^['"]/, '')
                            .replace(/['"]$/, '');
                        lastIter = j !== keys.length - 1;
                        lastObj = obj;
                        if ((key !== '' && key !== ' ') || j === 0) {
                            if (obj[key] === undef) {
                                obj[key] = {};
                            }
                            obj = obj[key];
                        } else { // To insert new dimension
                            ct = -1;
                            for (p in obj) {
                                if (obj.hasOwnProperty(p)) {
                                    if (+p > ct && p.match(/^\d+$/g)) {
                                        ct = +p;
                                    }
                                }
                            }
                            key = ct + 1;
                        }
                    }
                    lastObj[key] = value;
                }
            }
        }
        function htmlspecialchars_decode(string, quote_style) {
            //       discuss at: http://phpjs.org/functions/htmlspecialchars_decode/
            //      original by: Mirek Slugen
            //      improved by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)
            //      bugfixed by: Mateusz "loonquawl" Zalega
            //      bugfixed by: Onno Marsman
            //      bugfixed by: Brett Zamir (http://brett-zamir.me)
            //      bugfixed by: Brett Zamir (http://brett-zamir.me)
            //         input by: ReverseSyntax
            //         input by: Slawomir Kaniecki
            //         input by: Scott Cariss
            //         input by: Francois
            //         input by: Ratheous
            //         input by: Mailfaker (http://www.weedem.fr/)
            //       revised by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)
            // reimplemented by: Brett Zamir (http://brett-zamir.me)
            //        example 1: htmlspecialchars_decode("<p>this -&gt; &quot;</p>", 'ENT_NOQUOTES');
            //        returns 1: '<p>this -> &quot;</p>'
            //        example 2: htmlspecialchars_decode("&amp;quot;");
            //        returns 2: '&quot;'

            var optTemp = 0,
                i = 0,
                noquotes = false;
            if (typeof quote_style === 'undefined') {
                quote_style = 2;
            }
            string = string.toString()
                .replace(/&lt;/g, '<')
                .replace(/&gt;/g, '>');
            var OPTS = {
                'ENT_NOQUOTES': 0,
                'ENT_HTML_QUOTE_SINGLE': 1,
                'ENT_HTML_QUOTE_DOUBLE': 2,
                'ENT_COMPAT': 2,
                'ENT_QUOTES': 3,
                'ENT_IGNORE': 4
            };
            if (quote_style === 0) {
                noquotes = true;
            }
            if (typeof quote_style !== 'number') { // Allow for a single string or an array of string flags
                quote_style = [].concat(quote_style);
                for (i = 0; i < quote_style.length; i++) {
                    // Resolve string input to bitwise e.g. 'PATHINFO_EXTENSION' becomes 4
                    if (OPTS[quote_style[i]] === 0) {
                        noquotes = true;
                    } else if (OPTS[quote_style[i]]) {
                        optTemp = optTemp | OPTS[quote_style[i]];
                    }
                }
                quote_style = optTemp;
            }
            if (quote_style & OPTS.ENT_HTML_QUOTE_SINGLE) {
                string = string.replace(/&#0*39;/g, "'"); // PHP doesn't currently escape if more than one 0, but it should
                // string = string.replace(/&apos;|&#x0*27;/g, "'"); // This would also be useful here, but not a part of PHP
            }
            if (!noquotes) {
                string = string.replace(/&quot;/g, '"');
            }
            // Put this in last place to avoid escape being double-decoded
            string = string.replace(/&amp;/g, '&');

            return string;
        }
        function checkUsingProxy(imgProxy,text){
            var imgs = text.match(reg) || [];
            if (imgs.length >0){
                for (var i in imgs){
                    reg.lastIndex=0;
                    var matches = reg.exec(imgs[i]);
                    if (undefined !== matches[2]){
                        var pathInfo = parse_url(matches[2]);
                        for (var j in imgProxy ){
                            if (imgProxy[j]['scheme'] == pathInfo.scheme && imgProxy[j]['host'] == pathInfo.host && imgProxy[j]['path'] == pathInfo.path){
                                return true;
                            }
                        }
                    }
                }
            }
            return false;
        }
        function restoreImage(imgTag,proxyConfig,reg) {
            reg.lastIndex=0;
            var matches = reg.exec(imgTag);
            if (matches){
                var url = matches.length > 1 ? matches[2]:'';
                if (url){
                    var pathInfo = parse_url(url);
                    if (pathInfo.query){
                        var query = {};
                        parse_str(htmlspecialchars_decode(pathInfo.query),query);
                        if (proxyConfig.host == pathInfo.host && pathInfo.path.indexOf(proxyConfig.path) !== -1 && query[proxyConfig.query] !== undefined){
                            var originImgUrl = query[proxyConfig.query];
                            imgTag = imgTag.replace(matches[2],originImgUrl);
                        }
                    }
                }
            }
            return imgTag;
        }
        var checkTime=20000;
        while (checkUsingProxy(imgProxy, val) && checkTime-- > 0) {
            if (checkTime < 10 ) alert("此处有问题,请保留数据,找后端同学处理!");
            for (var j in imgProxy) {
                reg.lastIndex = 0;
                var matches = val.match(reg);
                if (matches) {
                    for (var i in matches) {
                        val = val.replace(matches[i], restoreImage(matches[i], imgProxy[j], reg));
                    }
                }
            }
        }
        return val;
    };

    //从接口获取数据
    Util.getData = function (opt) {
        var data = {
            "dataType": "jsonp"
        };
        opt.data = opt.data || {};
        opt['path'] = (opt['version'] ? opt['version'] : "v1") + "/" + opt['path'];

        if (opt.apiType == 'static') {
            data['jsonpCallback'] = "static_api_" + opt['path'].replace(/\//g, '_');
            data['url'] = config.apiStatic + opt['path'] + ".jsonp";
            data['cache'] = true;
        } else {
            data['url'] = config.api + opt['path'] + ".jsonp?_callback=?";

            //统一处理图片格式
            if (typeof opt.data == 'string') {
                opt.data = opt.data.replace(/(%7C|\|)webp/g, '|' + Util.bestImgFormat);
            } else if (typeof opt.data == 'object' && opt.data.fields) {
                opt.data.fields = opt.data.fields.replace(/(%7C|\|)webp/g, '|' + Util.bestImgFormat);
            }
            opt.data.release_platform = config.appPlatform;
            opt.data.release_version = config.appVersion;
        }

        $.ajax($.extend(data, opt));
    };
    
    //将图片标签替换成真正url
    Util.parseImageTag = function (val, imgFormat) {
        switch (imgFormat) {
            case 'url':
                return config.imgCdnUrl + val;
            case 'path':
                return config.imgCdnUrl + val;
            default:
                return val.replace(/\[IMG ([^\]]+)\]/g, config.imgCdnUrl + "$1");
        }
    };

    //将html里的style代码提取到class,主要用来压缩135editor之类编辑器生成的大量内联样式
    Util.replaceStyle2Class = function (html) {
        //清除title\alt\label
        html = html.replace(/ (title|alt|label|opacity|mapurl|data-width|data-style|data-w|data-txtless|data-brushtype|data-txtlessp|data-bcless|data-id|data-color|data-custom|data-ratio|data-w|data-s|data-type)="[^"]*"/gi, '');
        html = html.replace(/ (width|height)=""/gi, '');
        //135编辑器无用内容去除
        html = html.replace(/( class="(135editor|article135|135brush|layout)")/g, '');

        console.log(html.length);
        var matchReg = /style="([^"]+)"/gi;
        var m = html.match(matchReg);
        var styles = '';
        var hasStyle = {};

        var styleIndex = 0;
        var classPrefix = "ms";

        if (m) {
            for (var i = 0, len = m.length; i < len; i++) {
                //去除空格
                var matchStyle = m[i].replace(/([,:;"])\s+/g, "$1");
                html = html.replace(m[i], matchStyle);

                //内容短的样式不替换
                if (m[i].length < 40)continue;

                var changeClass;

                //有重复使用的样式,变成class
                if (hasStyle[matchStyle]) {
                    changeClass = classPrefix + hasStyle[matchStyle][0];

                    //第一次是替换之前的
                    html = html.replace(matchStyle, 'class="' + changeClass + '"');
                    //第二次是替换本次的
                    html = html.replace(matchStyle, 'class="' + changeClass + '"');

                    if (!hasStyle[matchStyle][1]) {
                        hasStyle[matchStyle][1] = 1;
                        styles += '.' + changeClass + '{' + matchStyle.replace(matchReg, "$1") + '}';
                    }
                } else {//不同的样式,新建class
                    styleIndex++;
                    hasStyle[matchStyle] = [styleIndex, 0];
                }
            }
        }

        //常用样式提取
        var shortClasses = {
            'box': 'box-sizing:border-box',
            'b0n': 'border:0px none',
            'b0': 'border:0px',
            'bs': 'border-style:solid',
            'bn': 'border:none',
            'br50p': 'border-radius:50%',
            'br1e': 'border-radius:1em',
            'br5p': 'border-radius:5px',
            'blss': 'border-left-style:solid',
            'brss': 'border-right-style:solid',
            'btss': 'border-top-style:solid',
            'bbss': 'border-bottom-style:solid',
            'blsn': 'border-left-style:none',
            'brsn': 'border-right-style:none',
            'btsn': 'border-top-style:none',
            'bbsn': 'border-bottom-style:none',
            'bssn': 'border-style:solid none',
            'bla': 'margin-left:auto',
            'bra': 'margin-right:auto',
            'bim': 'border-image-source:initial;border-image-slice:initial;border-image-width:initial;border-image-outset:initial;border-image-repeat:initial',
            'brs': 'border-right-style:solid',
            'cb': 'clear:both',
            'ci': 'color:inherit',
            'c0': 'color:#000000',
            'di': 'display:inline-block',
            'fl': 'float:left',
            'fr': 'float:right',
            'ffi': 'font-family:inherit',
            'fwi': 'font-weight:inherit',
            'fw': 'font-family:微软雅黑',
            'h00p': 'height:100%',
            'lh14': 'line-height:1.4',
            'lh16': 'line-height:1.6',
            'lh15e': 'line-height:1.5em',
            'lh2e': 'line-height:2em',
            'lhi': 'line-height:inherit',
            'oh': 'overflow:hidden',
            'ps': 'position:static',
            'taj': 'text-align:justify',
            'tal': 'text-align:left',
            'tar': 'text-align:right',
            'tac': 'text-align:center',
            'tdi': 'text-decoration:inherit',
            'tr50': 'transform:rotate(50deg);-webkit-transform:rotate(50deg);-moz-transform:rotate(50deg);-ms-transform:rotate(50deg);-o-transform:rotate(50deg)',
            'vab': 'vertical-align:bottom',
            'vat': 'vertical-align:top',
            'vac': 'vertical-align:center',
            'w0h0': 'width:0px;height:0px',
            'wn': 'white-space:normal',
            'w00p': 'width:100%'
        };

        for (i = 1; i < 3; i++) {
            shortClasses['btw' + i] = 'border-top-width:' + i + 'px';
            shortClasses['bbw' + i] = 'border-bottom-width:' + i + 'px';
            shortClasses['blw' + i] = 'border-left-width:' + i + 'px';
            shortClasses['brw' + i] = 'border-right-width:' + i + 'px';
        }
        for (i = 5; i < 30; i++) {
            shortClasses['f' + i] = 'font-size:' + i + 'px';
        }

        for (i = 0.1; i < 30; i = i + 0.1) {
            var tmp2 = ('' + i).replace('.', '-') + 'e';
            shortClasses['f' + tmp2] = 'font-size:' + i + 'em';
        }
        for (i = 0; i < 200; i++) {
            shortClasses['h' + i] = 'height:' + i + 'px';
            shortClasses['w' + i] = 'width:' + i + 'px';
        }
        for (i = -10; i < 30; i++) {
            shortClasses['m' + i] = 'margin:' + i + 'px';
            shortClasses['mt' + i] = 'margin-top:' + i + 'px';
            shortClasses['ml' + i] = 'margin-left:' + i + 'px';
            shortClasses['mr' + i] = 'margin-right:' + i + 'px';
            shortClasses['mb' + i] = 'margin-bottom:' + i + 'px';
            shortClasses['p' + i] = 'padding:' + i + 'px';
            shortClasses['pt' + i] = 'padding-top:' + i + 'px';
            shortClasses['pl' + i] = 'padding-left:' + i + 'px';
            shortClasses['pr' + i] = 'padding-right:' + i + 'px';
            shortClasses['pb' + i] = 'padding-bottom:' + i + 'px';
        }
        for (i = -10; i < 20; i++) {
            var tmp = i / 4;
            var tmp2 = ('' + tmp).replace('.', '-') + 'e';
            shortClasses['m' + tmp2] = 'margin:' + tmp + 'em';
            shortClasses['mt' + tmp2] = 'margin-top:' + tmp + 'em';
            shortClasses['ml' + tmp2] = 'margin-left:' + tmp + 'em';
            shortClasses['mr' + tmp2] = 'margin-right:' + tmp + 'em';
            shortClasses['mb' + tmp2] = 'margin-bottom:' + tmp + 'em';
            shortClasses['p' + tmp2] = 'padding:' + tmp + 'em';
            shortClasses['pt' + tmp2] = 'padding-top:' + tmp + 'em';
            shortClasses['pl' + tmp2] = 'padding-left:' + tmp + 'em';
            shortClasses['pr' + tmp2] = 'padding-right:' + tmp + 'em';
            shortClasses['pb' + tmp2] = 'padding-bottom:' + tmp + 'em';
        }

        for (var k in shortClasses) {
            var reg = new RegExp('(style="(?:[^"]*;)?)' + shortClasses[k].replace(/\-/g, '\-') + '[;$]([^"]*")', 'gi');
            if (!html.match(reg))continue;
            var regClass = new RegExp('(class="[^"]*)(" style="(?:[^"]*;)?)' + shortClasses[k].replace(/\-/g, '\-').replace(/\./g, '\.') + '[;$]([^"]*")', 'gi');
            html = html.replace(regClass, '$1 ' + k + '$2$3');
            html = html.replace(reg, 'class="' + k + '" $1$2');
            styles += '.' + k + '{' + shortClasses[k] + '}';
        }

        html = html.replace(/ style="\s*"/gi, '');

        html = '<style>' + styles + '</style>' + html;

        return html;
    };

    //重置页面的高度
    Util.updateBodyHeight = function () {
        $(".body-table-div").height($(".admin-body").height());
    };

    //组件初始化
    Util.componentInit = function (container) {
        var $container = container ? $(container) : $(document);
        var els = $container.find('[data-component]');
        var loadedComponent = {};
        els.each(function (i, el) {
            var componentName = $(el).attr('data-component');
            if (loadedComponent[componentName])return;
            if ($(el).attr('data-inited') == '1')return;
            loadedComponent[componentName] = true;
            if (typeof define === "function") {
                require.async('component/' + componentName, function () {
                    var componentInit = require('component/' + componentName);
                    if (typeof componentInit == 'function')componentInit($container);
                });
            } else {
                if (window.App && window.App.Component && window.App.Component[componentName]) {
                    window.App.Component[componentName]($container);
                } else {
                    $.getScript(config.appUrl + 'js/component/' + componentName + '.js', function () {
                        window.App.Component[componentName]($container);
                    });
                }
            }
        });
    };

    Util.foreComponentInit = function (container) {
        var $container = container ? $(container) : $(document);
        var els = $container.find('[data-component]');
        var loadedComponent = {};
        els.each(function (i, el) {
            var componentName = $(el).attr('data-component');
            if (loadedComponent[componentName])return;
            if ($(el).attr('data-inited') == '1')return;
            loadedComponent[componentName] = true;
            if (typeof define === "function") {
                require.async('http://m.meijiabang.cn/js/component/' + componentName, function () {
                    var componentInit = require('component/' + componentName);
                    if (typeof componentInit == 'function')componentInit($container);
                });
            } else {
                if (window.App && window.App.Component && window.App.Component[componentName]) {
                    window.App.Component[componentName]($container);
                } else {
                    $.getScript(config.appUrl + 'js/component/' + componentName + '.js', function () {
                        window.App.Component[componentName]($container);
                    });
                }
            }
        });
    };

    

    Util.ready = function (func) {
        func();
    };

    //初始化页面的高度
    Util.bodyHeightInit = function () {
        $(function ($) {
            Util.updateBodyHeight();
            $(window).resize(function () {
                Util.updateBodyHeight();
            });
        });
    };

    //初始化
    Util.init = function () {
        this.bodyHeightInit();
        this.componentInit();
    };

    return Util;
});
/**
 * Created by jack on 17/2/9.
 */
define('H5-editor/component-register', [], function (require) {
    "use strict";
    var componentRegister = {};

    componentRegister.register = function(config,name,content){//注册
        var obj = {};
        obj.name = name;
        obj.component_name = name;
        for(var i in content) {
            obj[i] = content[i];
        }

        config.component = config.component || [];
        config.component.push(obj);
        config.html = config.html || [];
        config.html.push({
            name:name,
            html:'<div class=div>' + name + '</div>'
        });
        // console.log(config.component);
    };

    componentRegister.remove = function(config,name){//注销
        for(var i = 0 ;i < config.component.length;i ++){
            if(config.component[i].component_name == name){
                config.component.splice(i, 1);
                break;
            }
        }
        for(var i = 0 ;i < config.html.length;i ++){
            if(config.html[i].name == name){
                config.html.splice(i, 1);
                break;
            }
        }
    };

    return componentRegister;

});

/**
 * Created by jack on 17/2/9.
 */
define('H5-editor/config', ['./register'], function (require) {
    "use strict";
    var register = require('./register');
    var config = {};
    config.component = [];

    register(config);

    // componentRegister.remove(config,'添加html3');

    var htmlStr = '';
    for(var i = 0;i < config.html.length;i ++){
        htmlStr += config.html[i].html;
    }

    config.html = htmlStr;

    // console.log(config.component);

    return config

});

/**
 * Created by jack on 17/2/9.
 */
define('H5-editor/register', ['./component-register', 'common/util', './component/add-goods', './component/add-shop'], function (require) {
    "use strict";
    var componentRegister = require('./component-register');
    var Util = require('common/util');
    var addGoods = require('./component/add-goods');
    var addShop = require('./component/add-shop');

    return function (config) {

        componentRegister.register(config, '快速添加商品静态化', {//注册组件
            html: '<div><span>--快速添加商品静态化--</span><div class="close">x</div></div><div><input class="note editable" type="text" placeholder="备注" value="备注"></div><div><span>商品id:</span><input class="id editable" type="text"></div><div><span>按键文案:</span><input class="text editable" type="text"></div><div><span>背景颜色:</span><input class="bg-color editable" type="text"></div>',
            str: addGoods
        });

        componentRegister.register(config, '店铺', {//注册组件
            html: '<div><span>--店铺--</span><div class="close">x</div></div><div><span>店铺id:</span><input class="id editable" type="text"></div></div>',
            str: addShop
        });

        componentRegister.register(config, '快速添加预售商品（一行一个）', {//注册组件
            html: '<div><span>--快速添加预售商品（一行一个）--</span><div class="close">x</div></div><div><span>商品id:</span><input class="id editable" type="text"></div><div><span>定金背景色:</span><input class="price-bg-color editable" type="text"></div><div><span>按键背景色:</span><input class="bottom-bg-color editable" type="text"></div><div><span>按键文案:</span><input class="text editable" type="text"></div><div><span>H5背景色:</span><input class="container-bg-color editable" type="text"></div><div><span>价格趋势图:</span><input class="insert-image editable" type="text"></div></div>',
            str: function (ele) {
                return '<div data-component="add-pre-good"\
                data-id="' + $(ele).find('.id').val() + '"\
                data-container-bg-color="' + $(ele).find('.container-bg-color').val() + '"\
                data-text="' + $(ele).find('.text').val() + '"\
                data-price-bg-color="' + $(ele).find('.price-bg-color').val() + '"\
                data-bottom-bg-color="' + $(ele).find('.bottom-bg-color').val() + '"\
                data-bg-image="' + $(ele).find('.insert-image').val() + '"\
                    ></div>'
            }
        });
        componentRegister.register(config, '快速添加预售商品（一行两个）', {//注册组件
            html: '<div><span>--快速添加预售商品（一行两个）--</span><div class="close">x</div></div><div><span>商品id:</span><input class="id editable" type="text"></div><div><span>定金背景色:</span><input class="price-bg-color editable" type="text"></div><div><span>商品名称背景色:</span><input class="bottom-bg-color editable" type="text"></div><div><span>商品名称字色:</span><input class="name-color editable" type="text"></div><div><span>H5背景色:</span><input class="container-bg-color editable" type="text"></div></div>',
            str: function (ele) {
                return '<div data-component="add-pre-goods"\
                data-id="' + $(ele).find('.id').val() + '"\
                data-container-bg-color="' + $(ele).find('.container-bg-color').val() + '"\
                data-name-color="' + $(ele).find('.name-color').val() + '"\
                data-price-bg-color="' + $(ele).find('.price-bg-color').val() + '"\
                data-bottom-bg-color="' + $(ele).find('.bottom-bg-color').val() + '"\
                    ></div>'
            }
        });
        componentRegister.register(config, '领取金币', {//注册组件
            html: '<div><span>--领取金币--</span><div class="close">x</div></div><div><span>领取前图片:</span><input class="not-active-image insert-image editable" type="text"></div><div><span>领取后图片:</span><input class="active-image insert-image editable" type="text"></div><div><span>领取金额:</span><input class="reward-number editable" type="text"></div></div>',
            str: function (ele) {
                return '<div data-component="draw-reward"\
                                data-not-active-image="' + $(ele).find('.not-active-image').val() + '"\
                data-active-image="' + $(ele).find('.active-image').val() + '"\
                data-reward-number="' + $(ele).find('.reward-number').val() + '"\
                    ></div>'
            }
        });

        // componentRegister.remove(config,'添加html3');
    };
});

/**
 * Created by jack on 17/2/14.
 */
define('H5-editor/component/add-goods', ['common/util'], function (require) {
  "use strict";
  var Util = require('common/util');

  return function (ele) {
    var style = '<style>body{background:#fff;font-family:Helvetica Neue,Helvetica,Arial,Microsoft Yahei,Hiragino Sans GB,Heiti SC,WenQuanYi Micro Hei,sans-serif;font-size:14px;color:#000;margin:0;padding:0}.goods-container .container-goods{width:48%;background-color:#fff;margin:1%;display:inline-block;position:relative}.goods-container .container-goods .mark-img{width:30%;position:absolute;top:2%;right:2%}.goods-container .container-goods .img{width:100%;padding:.3rem}.goods-container .container-goods .introduction{width:100%;margin:0;vertical-align:top;position:relative}.goods-container .container-goods .introduction .good-name{font-family:"微软雅黑";font-size:.7rem;font-weight:400;text-overflow:ellipsis;overflow:hidden;padding:0 .2rem;display:-webkit-box;-webkit-line-clamp:2;-webkit-box-orient:vertical;height:2rem}.goods-container .container-goods .introduction .price{display:block;margin:0 auto;padding:.1rem 0}.goods-container .container-goods .introduction .price .sale-price{display:inline-block;color:#f57;padding:0 .3rem 0 .5rem}.goods-container .container-goods .introduction .price .sale-price span{font-size:1rem}.goods-container .container-goods .introduction .price .original-price span{font-size:.5rem}.goods-container .container-goods .introduction .price .original-price{display:inline-block;color:#666;text-decoration:line-through}.goods-container .container-goods .introduction .btn{display:block;margin:.2rem auto;background-color:#f57;width:90%;height:1.5rem;text-align:center;line-height:1.5rem;color:#fff}.goods-container .tpl{display:none}</style>';

    var bgColor = $(ele).find('.bg-color').val();
    var goodsId = $(ele).find('.id').val();
    var btnText = $(ele).find('.text').val();
    var str = '';
    if (goodsId) {
      Util.getData({
        path: 'goods',
        data: {
          fields: 'list[].mark_image.m(160|png),list[].price_grades,list[].price_grade.price,list[].preview.goods_id,list[].preview.cover,list[].preview.sale_price,list[].preview.original_price,list[].preview.name,list[].preview.desc,list[].preview.lowest_price',
          goods_id: goodsId,
          offset: 0,
          limit: 500
        },
        success: function (res) {
          var el = '';
          var list = res.data.list;
          var len = list.length;
          for (var i = 0; i < len; i++) {
            el += '<div class="container-goods" style="background-color: #' + bgColor + '" app_route="meijiabang://goods_details?goods_id=' + res.data.list[i].preview.goods_id + '"><img src="' + res.data.list[i].preview.cover + '" alt="" class="img">';
            if (res.data.list[i].mark_image) {
              el += '<img src="' + res.data.list[i].mark_image.m.url + '" class="mark-img">';
            }
            el += '<div class="introduction"><div class="good-name">' + res.data.list[i].preview.name + '</div>';
            el += '<div class="price"><p class="sale-price">￥<span>' + res.data.list[i].preview.lowest_price + ' </span>起</p>';
            el += '<p class="original-price"><span>￥' + res.data.list[i].preview.original_price + '</span></p> </div>';
            if (btnText != '') {
              el += '<p class="btn">' + btnText + '</p>';
            }
            el += '</div></div>';
          }
          str = style + '<div class=goods-container>' + el + '</div>';
          // console.log(str);
          // return str;
          $(ele).attr('data-value', str);
        }
      });
    }

  }

});

/**
 * Created by mosx on 2017/6/6.
 */
define('H5-editor/component/add-shop', ['common/util'], function (require) {
    "use strict";
    var Util = require('common/util');

    return function(ele){
        return '<div data-component="add-shop" data-id="'+$(ele).find('.id').val()+'"></div>'
    }

});
define("layout-config/config", ["layout-config/config/type-register","layout-config/type/checkbox","layout-config/type/share_image"], function (require) { 
    "use strict";
    var typeRegister = require("layout-config/config/type-register");
    var checkbox = require("layout-config/type/checkbox");
    var share_image = require("layout-config/type/share_image");
    var config = [];
    typeRegister.register(config,"checkbox",checkbox);
    typeRegister.register(config,"share_image",share_image);
    return config;
});
/**
 * Created by jack on 17/2/9.
 */
define('layout-config/layout-config', ['common/util','layout-config/config'], function (require) {
    "use strict";

    var Util = require('common/util');
    var numRandom = [];

    var config = require('layout-config/config');

    var showType = [{
        type: 'input',
        setView: function (obj, val, key) {
            val = val ? val : '';
            obj.prefix_tips = obj.prefix_tips ? obj.prefix_tips : '';
            obj.suffix_tips = obj.suffix_tips ? obj.suffix_tips : '';
            return '<tr class="item"><th>' + obj.title + ':</th><td>' + obj.prefix_tips + '<input data-key="' + key + '" style="margin: 5px" type="text" value="' + val + '">' + obj.suffix_tips + '</td></tr>'
        },
        getData: function(ele,key){
            return $(ele).find('.item').find('[data-key="'+ key +'"]').val();
        }
    }, {
        type: 'textarea',
        setView: function (obj, val, key) {
            val = val ? val.replace(/\\n/g,'\n') : '';
            console.log(val);
            return '<tr class="item"><th>' + obj.title + ':</th><td><textarea data-key="' + key + '" rows="3" cols="20">' + val + '</textarea></td></tr>'
        },
        getData: function (ele, key) {
            return $(ele).find('.item').find('[data-key="' + key + '"]').val().replace(/\n/g,'\\\\n');
        }
    }, {
        type: 'image',
        setView: function (obj, val, key) {
            val = val ? val : '';
            return '<tr class="item"><th>' + obj.title + ':</th><td><div data-component="add-image" data-class="' + key + '" style="display:block;margin: 5px" type="text" data-value="' + val + '"></td></tr>'

        },
        getData: function(ele,key){
            return $(ele).find('.item').find('[data-key="'+ key +'"]').val();
        }
    }, {
        type: 'time',
        setView: function (obj, val, key) {
            val = val ? val : '';
            return '<tr class="item"><th>' + obj.title + ':</th><td><div data-component="add-time" data-class="' + key + '" style="display:block;margin: 5px" type="text" data-value="' + val + '"></td></tr>'
        },
        getData: function(ele,key){
            return $(ele).find('.item').find('[data-key="'+ key +'"]').val();
        }
    }, {
        type: 'time_format',
        setView: function (obj, val, key) {
            val = val ? val : '';
            return '<tr class="item"><th>' + obj.title + ':</th><td><div data-component="add-time" data-class="' + key + '" style="display:block;margin: 5px" type="text" data-value="' + formatUnixTime(val) + '"></td></tr>'
        },
        getData: function(ele,key){
            return unixTimestamp($(ele).find('.item').find('[data-key="'+ key +'"]').val());
        }
    }, {
        type: 'app_route',
        setView: function (obj, val, key) {
            val = val ? val : '';
            return '<tr class="item"><th>' + obj.title + ':</th><td><input selectapproute data-component="app-route-picker" type="text" class="textinput" name="app_route" value="' + val + '" style="width:450px"/></td></tr>'
        },
        getData: function(ele,key){
            // console.log($(ele).find('.item').find('.textinput').get(0));
            return $(ele).find('.item').find('.textinput').val();
        }
    }, {
        type: 'object',
        setView: function (title, value) {
            return '<h3>' + title + '</h3>'
        },
        getData: function(ele,key){
            return $(ele).find('.item').find('[data-key="'+ key +'"]').val();
        }
    }, {
        type: 'select',
        setView: function (obj, val, key) {
            val = val ? val : '';
            var str = '<tr class="item"><th>' + obj.title + '</th><td><select data-key="' + key + '" id="list" value="' + val + '">';
            for (var i = 0; i < obj.data.length; i++) {
                if (obj.data[i].value == val) {
                    str += '<option value="' + obj.data[i].value + '" selected="selected">' + obj.data[i].name + '</option>'
                } else {
                    str += '<option value="' + obj.data[i].value + '">' + obj.data[i].name + '</option>'
                }
            }
            str += '</select></td></tr>';
            return str;
        },
        getData: function(ele,key){
            return $(ele).find('.item').find('[data-key="'+ key +'"]').val();
        }
    }, {
        type: 'radio',
        setView: function (obj, val, key) {
            val = val ? val : '';
            var randomNum = Math.random();
            for (var i = 0; i < numRandom.length; i++) {
                if (randomNum == numRandom[i]) {
                    randomNum = Math.random();
                    numRandom.push(randomNum);
                }
            }
            var name = key + randomNum;

            var str = '<tr class="item"><th>' + obj.title + '</th><td><div data-key="' + key + '">';
            for (var i = 0; i < obj.data.length; i++) {
                if (obj.data[i].value == val) {
                    str += '<label class="checked"><input name="' + name + '" type="radio" checked="checked" value="' + obj.data[i].value + '" />' + obj.data[i].name + ' </label> '
                } else {
                    str += '<label><input name="' + name + '" type="radio" value="' + obj.data[i].value + '" />' + obj.data[i].name + ' </label>'
                }
            }
            str += '</div></td></tr>';
            return str;
        },
        getData: function (ele,key) {
            var data = '';
            $(ele).find('.item').find('[data-key="'+ key +'"]').find('input').each(function () {
                if ($(this).parent().attr('class') == 'checked') {
                    data = $(this).val();
                }
            });
            return data;
        }
    }];

    showType = showType.concat(config);

    //查找类型对应的索引
    function findIndex(config) {
        var index;
        for (var j = 0; j < showType.length; j++) {
            if (showType[j].type == config.type) {
                index = j;
                break;
            }
        }
        return index;
    }

    //生成table视图
    function createTable($el,num,name, str) {
        var tr = document.createElement('tr');
        var th = document.createElement('th');
        var td = document.createElement('td');
        var td1 = document.createElement('td');
        $(tr).append(th);
        $(tr).addClass(name + 'config-item');
        $(tr).append(td);
        $(tr).append(td1);
        $(td1).addClass('td-delete');
        $(th).html(num);
        $(td).append(str);
        $(td1).append('<div class="item-delete">删除</div>');
        $el.append(tr);
        // num++;
    }

    //渲染函数
    function renderConfig(config, sysData) {
        var table = document.createElement('table');
        sysData = sysData ? sysData : {};
        for (var i in config) {
            if (config[i]['data_type'] == 'array' || config[i]['data_type'] == 'object-array') {
                var subTable = document.createElement('table');
                var tr = document.createElement('tr');
                var th = document.createElement('th');

                if(config[i]['title']) {
                    th.append(config[i]['title']);
                }

                var td = document.createElement('td');
                $(tr).append(th);
                $(tr).append(td);
                $(tr).addClass(i);
                if (config[i].title) {
                    $(th).html(config[i].title);
                }
                $(td).append(subTable);
                varView(subTable, config[i], sysData[i], i);
                $(table).append(tr);
            } else if (config[i].type == 'json') {
                var tr = document.createElement('tr');
                $(tr).addClass(i);
                $(tr).append('<th>' + config[i].title + '</th>');
                var td = document.createElement('td');
                $(td).append(renderConfig(config[i].data, sysData[i]));
                $(tr).append(td);
                $(table).append(tr);
            } else {
                var index = findIndex(config[i]);
                if (index != undefined) {
                    $(table).append(showType[index].setView(config[i], sysData[i], i));
                }
            }

        }
        return table;
    }

    //生成视图
    function varView(el, sysConfig, sysVar, name) {
        name = name ? (name + '-') : '';
        var $el = $(el);

        var listNum = 0;
        if (sysConfig['data_type'] == 'array' || sysConfig['data_type'] == 'object-array') {
            var data = [];
            $el.parent().prepend('<div class="editor-add">添加</div>');
            $el.parent().find('.editor-add').on('click', [sysConfig, el], function (ev) {

                createTable($el,listNum,name,renderConfig(ev.data[0].config));
                listNum++;
                $('.item-delete').off();
                $('.item-delete').on('click', function () {
                    listNum--;
                    $(this).parent().parent().remove();
                });
                Util.componentInit();
            });
            if (sysConfig['data_type'] == 'object-array') {
                var obj = sysVar;
                sysVar = [];
                var objSub = {};
                for (var k in sysConfig.config) {
                    if (k != 'content') {
                        for (var j in obj) {
                            objSub[k] = j;
                            objSub.content = obj[j];
                            sysVar.push(objSub);
                            objSub = {};
                        }
                    }
                }
            }
            if (sysVar && sysVar.length) {
                for (var i = 0; i < sysVar.length; i++) {
                    createTable($el,listNum,name,renderConfig(sysConfig.config, sysVar[i]));
                    listNum++;
                }
            }
        } else {
            var data = {};
            createTable($el,listNum,name,renderConfig(sysConfig.config, sysVar));
            listNum++;
        }

        Util.componentInit();



        return data;
    }


    //获取数据
    function getVarData(config, subEle,currentEle) {

        var dataType = config['data_type'];


        config = config.config;

        function getData(config, ele) {
            var objData = {};
            for (var i in config) {
                if (config[i].type == 'json') {
                    objData[i] = getData(config[i].data, $(ele).find('.' + i).get(0));
                } else if (config[i]['data_type'] && config[i]['data_type'] == 'array') {
                    objData[i] = getVarData(config[i], i + '-config-item',ele);
                }else{
                    var index = findIndex(config[i]);
                    //获取数据
                    objData[i] = showType[index].getData(ele,i);
                }
            }
            return objData;
        }

        if (dataType == 'array') {
            var data = [];
            $(currentEle).find('.' + subEle).each(function () {
                var self = this;
                console.log(self);
                data.push(getData(config, self));
            });
        } else if (dataType == 'object-array') {
            var data = {};
            $('.' + subEle).each(function () {
                var self = this;
                var subData = getData(config, self);
                for (var i in subData) {
                    if (i != 'content') {
                        data[subData[i]] = subData.content;
                    }
                }
            });
        } else {
            var data = getData(config, $('.' + subEle).get(0));
        }

        return data;
    }

    /**
     * 时间戳转换为字符串
     * @param unix_timestamp
     */
    function formatUnixTime(unix_timestamp)
    {
        var date = new Date(unix_timestamp * 1000),
         Y = date.getFullYear(),
         M = pad(date.getMonth() + 1, 2),
         D = pad(date.getDate(), 2),
         h = pad(date.getHours(), 2),
         m = pad(date.getMinutes(), 2),
         s = pad(date.getSeconds(), 2);
        return Y + '-' + M + '-' + D + ' ' + h + ':' + m + ':' + s;
    }


    /**
     * 转化为时间戳
     * @param strtime
     */
    function unixTimestamp(strtime)
    {
        var date = new Date(strtime);
        return Date.parse(date) / 1000;
    }

    /**
     *
     * @param num
     * @param n
     * @returns {*}
     */
    function pad(num, n)
    {
        var len = num.toString().length;
        while(len < n) {
            num = "0" + num;
            len++;
        }
        return num;
    }


    return {
        render: varView,
        getData: getVarData
    }

});

/**
 * Created by jack on 17/2/9.
 */

define('layout-config/config/config', ['./type-register','layout-config/type/checkbox'], function (require) {
    "use strict";

    var typeRegister = require('./type-register');
    var checkbox = require('layout-config/type/checkbox');
    console.log(checkbox);
    var config = [];

    typeRegister.register(config,'image1',function (obj, val, key) {//注册
        val = val ? val : '';
        return '<tr class="item"><th>' + obj.title + ':</th><td><div data-component="add-image" data-class="' + key + '" style="display:block;margin: 5px" type="text" data-value="' + val + '"></td></tr>';
    });

    typeRegister.register(config,'checkbox',checkbox);
    

    typeRegister.remove(config,'image1');

    return config;

});

/**
 * Created by jack on 17/2/9.
 */
define('layout-config/config/type-register', [], function (require) {
    "use strict";

    var typeRegister = {};

    typeRegister.register = function(config,type,fun){//注册
        var obj = {};
        obj.type = type;
        obj.setView = fun.setView;
        obj.getData = fun.getData;
        config = config || [];
        console.log(config);
        config.push(obj);
    };

    typeRegister.remove = function(config,type){//注销
        for(var i = 0 ;i < config.length;i ++){
            if(config[i].type == type){
                config.splice(i, 1);
                break;
            }
        }
    };

    return typeRegister;


});


define('layout-config/type/checkbox', [], function (require) {
    "use strict";

    var setView = function (obj, val, key) {
        val = val ? val.split(',') : '';
        var flag;
        var str = '<tr class="item"><th>' + obj.title + '</th><td><div data-key="' + key + '">';
        for (var i = 0; i < obj.data.length; i++) {
            flag = true;
            for(var j = 0; j < val.length; j++){
                if (obj.data[i].value == val[j]) {
                    str += '<input name="' + key + '" type="checkbox" checked="checked" value="' + obj.data[i].value + '" />' + obj.data[i].name;
                    flag = false;
                    break;
                }
            }
            if(flag){
                str += '<input name="' + key + '" type="checkbox" value="' + obj.data[i].value + '" />' + obj.data[i].name;
            }
        }
        str += '</div></td></tr>';
        return str;
    };

    var getData = function (ele,key) {
        var str = '';
        $(ele).find('.item').find('[data-key="'+ key +'"]').find('input').each(function () {
            if (this.checked) {
                if (str) {
                    str += ',' + $(this).val();
                } else {
                    str += $(this).val();
                }
            }
        });
        return str;
    };

    return{
        setView : setView,
        getData : getData 
    }

});


define('layout-config/type/share_image', [], function (require) {
    "use strict";
    var setView = function (obj, val, key) {
        val = val ? val : '';
        return '<tr class="item"><th>' + obj.title + ':</th><td><div data-component="share-image" data-class="' + key + '" style="display:block;margin: 5px" type="text" data-value="' + val + '"></td></tr>'

    };

    var getData = function(ele,key){
        return $(ele).find('.item').find('[data-key="'+ key +'"]').val();
    };

    return{
        setView : setView,  
        getData : getData
    }

});
define('component/add-data', ['common/util'], function (require) {
    "use strict";

    var Util = require('common/util');
    var componentName = 'add-data';

    function init($container) {
        $container = $container || $(document);

        var $els = $container.find('[data-component="' + componentName + '"]');

        $els.each(function(i, el){
            $(el).on('click', function(){
                addData(this, $(this).attr('data-action'));
            });
        });
    }

    function addData(obj, actionName)
    {
        actionName = actionName || 'add';

        var fun = function(){
            location.href = APP+'?'+VAR_MODULE+'='+CURR_MODULE+'&'+VAR_CONTROLLER+'='+CURR_CONTROLLER+'&'+VAR_ACTION+'='+actionName;
        };

        setTimeout(fun,1);
    }

    return init;
});
define('component/add-image', ['common/util'], function (require) {
    "use strict";

    //添加图片组件
    var Util = require('common/util');
    var componentName = 'add-image';

    function init($container) {
        $container = $container || $(document);

        var $els = $container.find('[data-component="' + componentName + '"]');

        $els.each(function (i, el) {
            var self = this;
            var imageClass = $(self).attr('data-class');
            var imageValue = $(self).attr('data-value');
            $(self).html('<div class="uploaded-image"><img src="' + imageValue + '" /><input type="hidden" name="' + $(el).attr('data-name') + '" value="url"></div><input type="text" value="' + imageValue + '" data-key="' + imageClass + '">');
            $(self).find('[data-key="'+ imageClass +'"]').imagePicker({
                el: $(self).find('[data-key="'+ imageClass +'"]'),
                mode: 'replace',
                format: 'url',
                objType: 'h5SimplePage',
                objId: 0,
                callback: function (obj) {
                    $(el).find('.uploaded-image').html('');
                    $(self).prepend('<div class="uploaded-image"><img src="' + obj.url + '" /></div>');
                }
            });
        });

    }

    return init;
});
define('component/add-time', ['common/util'], function (require) {
    "use strict";

    var Util = require('common/util');
    var componentName = 'add-time';

    function init($container) {
        $container = $container || $(document);

        var $els = $container.find('[data-component="' + componentName + '"]');

        $els.each(function(i, el){
            var self = this;
            var imageClass = $(self).attr('data-class');
            var imageValue = $(self).attr('data-value');
            $(self).html('<input type="text" value="'+ imageValue +'" data-key="'+ imageClass +'">')
            $(self).find('[data-key="'+ imageClass +'"]').datetimepicker({});
        });
    }

    return init;
});
define('component/address-tree', ['common/util'], function (require) {
    "use strict";

    var Util = require('common/util');
    var componentName = 'address-tree';

    var oldValue = '';
    var provinces = [];
    var curProvinceObj = {};
    var curCityObj = {};

    function init($container) {
        $container = $container || $(document);

        var $els = $container.find('[data-component="' + componentName + '"]');

        var tpl = '<div><select name="province_id" style="padding: 4px 8px;border: 1px solid #eee;font-family: 微软雅黑;">' +
            '<option value="">选择省</option>' +
            '</select>' +
            '<select name="city_id" style="padding: 4px 8px;border: 1px solid #eee;font-family: 微软雅黑;">' +
            '<option value="">选择市</option>' +
            '</select>' +
            '<select name="district_id" style="padding: 4px 8px;border: 1px solid #eee;font-family: 微软雅黑;">' +
            '<option value="">选择区</option>' +
            '</select></div>';

        $els.each(function (i, el) {
            //默认值
            oldValue = $(el).attr('data-value');

            //用模板替换元素
            $(el).after(tpl);
            $(el).hide();

            //初始化地址信息
            regionInfoInit();

        });
    }

    function regionInfoInit() {
        //加载省市区数据
        Util.getData({
            path: 'app/config/china_regions',
            apiType: 'static',
            success: static_api_v1_app_config_china_regions
        })
    }

    function static_api_v1_app_config_china_regions(data) {
        //获取数据
        if (data.error_code == 0) {
            provinces = data.data.list;
            var options = '<option value="">选择省</option>';
            $(provinces).each(function (i, item) {
                options += '<option value="' + item.area_code + '">' + item.name + '</option>';
            });

            //省数据初始化
            $('select[name=province_id]').html(options);

            //
            $('select[name=province_id]').on('change', function () {
                curProvinceObj = {};
                curCityObj = {};

                updateCity();
                updateDistrict();

                //获取当前省对象
                var curProvince = $(this).val();
                $(provinces).each(function (i, item) {
                    if (item.area_code == curProvince) {
                        curProvinceObj = item;
                    }
                });

                //更新城市
                if (curProvinceObj) {
                    updateCity();
                }

            });

            $('select[name=city_id]').on('change', function () {
                curCityObj = {};
                //获取当前市对象
                var curCity = $(this).val();

                $(curProvinceObj.cities).each(function (i, item) {
                    if (item.area_code == curCity) {
                        curCityObj = item;
                    }
                });

                //更新区
                if (curCityObj) {
                    updateDistrict();
                }
            });


            if (oldValue !== undefined && oldValue != '') {
                oldValue = oldValue.split(',');
                //设置省市区
                $('select[name=province_id]').val(oldValue[0]);
                $('select[name=province_id]').change();
                $('select[name=city_id]').val(oldValue[1]);
                $('select[name=city_id]').change();
                $('select[name=district_id]').val(oldValue[2]);
            }
        }

        function updateCity() {
            console.log('update city');
            var options = '<option value="">选择市</option>';
            $(curProvinceObj.cities).each(function (i, item) {
                options += '<option value="' + item.area_code + '">' + item.name + '</option>';
            });
            $('select[name=city_id]').html(options);
        }

        function updateDistrict() {
            var options = '<option value="">选择区</option>';
            $(curCityObj.areas).each(function (i, item) {
                options += '<option value="' + item.area_code + '">' + item.name + '</option>';
            });
            $('select[name=district_id]').html(options);
        }

    }

    return init;
});
define('component/app-route-picker', ['common/util'], function (require) {
    "use strict";

    var Util = require('common/util');
    var componentName = 'app-route-picker';

    function init($container) {
        $container = $container || $(document);
        var $els = $container.find('[data-component="' + componentName + '"]');

        $els.each(function (i, el) {
            $(el).appRoutePicker();
        });
    }

    return init;
});
define('component/code-editor', ['common/util', 'ace/ace', 'plugin/beautify-css', 'plugin/beautify-html'], function (require) {
    "use strict";

    var Util = require('common/util');
    var beautifyJs = require('plugin/beautify');
    var beautifyCss = require('plugin/beautify-css');
    var beautifyHtml = require('plugin/beautify-html');

    var componentName = 'code-editor';
    var editorHtml = '<div class="editor-container">\
        <div class="editor-wrap">\
        <div id="editor"></div>\
        <div class="edtior-action-wrap">\
        <a href="#" class="sui-btn btn-bordered btn-primary hide" id="full-screen">全屏</a>\
        <a href="#" class="sui-btn btn-bordered btn-primary hide" id="insertImage">插入图片</a>\
        <a href="#" class="sui-btn btn-bordered btn-primary hide" id="insertComponent">插入组件</a>\
        <a href="#" class="sui-btn btn-bordered btn-primary hide" id="jsBeautifier">格式化</a>\
        <a href="#" class="sui-btn btn-bordered btn-primary hide" id="compressCode">压缩代码</a>\
        <a href="#" class="sui-btn btn-bordered btn-primary hide" id="replace135Img">修复135图片</a>\
        <span class="tips">快捷键: 撤销:Ctrl+Z 反撤销:Shift+Ctrl+Z 查找:Ctrl+F</span>\
        </div>\
        </div>\
        <div class="preview-wrap">保存后才能预览</div>\
        </div>';

    function nl2br(data)
    {
        var html = data.replace(/>\s+</g, '><'),
            result = html.match(/(\n)([^<^/^>])/g);

        if(result !== null && result.length > 0){
            var pattern = '('+['[', ']', '(', ')', '{', '}', '.', '?', '*', '+'].map(function(item){return '\\'+item}).join('|')+')',
                addSlashes = new RegExp(pattern);//给正则字符转义
            // result = unique(result);
            for(var i = 0, length = result.length; i < length; i++){

                var replaceStr = result[i].replace('\n', '<br \/>'),
                    temp = result[i].match(addSlashes),
                    pattern = new RegExp(result[i].replace(addSlashes, '\\'+RegExp.$1));
                html = html.replace(pattern, replaceStr);
            }
        }
        return html;
    }
    function unique(arr) {
        var ret = [];
        var hash = {};

        for (var i = 0; i < arr.length; i++) {
            var item = arr[i];
            var key = typeof(item) + item;
            if (hash[key] !== 1) {
                ret.push(item);
                hash[key] = 1;
            }
        }

        return ret;
    }

    function init($container) {
        $container = $container || $(document);

        var $els = $container.find('[data-component="' + componentName + '"]');

        $els.each(function (i, el) {
            var oId = $(el).attr('data-obj-id') || 0;
            var oWidth = $(el).attr('data-editor-width');
            var oHeight = $(el).attr('data-editor-height');
            var actionList = $(el).attr('data-action-list');
            var previewUrl = $(el).attr('data-preview-url');
            var textareaName = $(el).attr('data-textarea');
            var objType = $(el).attr('data-obj-type') || 'h5SimplePage';//上传图片的对象类型

            $(el).html(editorHtml);

            if(previewUrl != undefined && previewUrl != ''){
                $('.preview-wrap').html('<iframe id="preview-iframe" src="'+previewUrl+'"/>');
            }else{
                $('.preview-wrap').remove();
            }

            function resizeEditor() {
                var containerWidth = oWidth || parseInt($('.editor-container').css('width'));
                var containerHeight = oHeight || parseInt($('.editor-container').css('height'));
                $('.editor-wrap').css('width', containerWidth - 335);
                $('.editor-wrap').css('height', containerHeight);
                $('#editor').css('height', containerHeight - 60);
                if(editor)editor.resize()
            }

            resizeEditor();

            var editor = ace.edit("editor");
            editor.setTheme("ace/theme/monokai");
            editor.getSession().setMode("ace/mode/html");
            editor.getSession().setOption("wrap", "free");
            editor.setValue($('#'+textareaName).val()); // or session.setValue

            editor.getSession().on('change', function (e) {
                var val = editor.getValue();
                $('#'+textareaName).val(val);
                $('#preview-iframe').contents().find("body").html(nl2br(Util.parseImageTag(val)));
       // document.getElementById('preview-iframe').contentWindow.App.Util.lazyloadInit();
            });

            jQuery(function ($) {
                $('#share_image').imagePicker({
                    el: $('#share_image'),
                    mode: 'replace',
                    format: 'shortTag',
                    objType: objType,
                    objId: 0
                });
                if(actionList.indexOf('insert-image') > -1){
                    $('#insertImage').removeClass('hide');
                    $('#insertImage').imagePicker({
                        objId: oId,
                        objType: objType,
                        callback: function (data) {
                            editor.insert(data.fullTag+'\n');
                        }
                    });
                }


                if(actionList.indexOf('full-screen') > -1){
                    $('#full-screen').removeClass('hide');
                    $('#full-screen').on('click', function (e) {
                        if ($('.editor-container').hasClass('full-screen')) {
                            $('.editor-container').removeClass('full-screen');
                            $(e.target).html('全屏')
                        } else {
                            $('.editor-container').addClass('full-screen');
                            $(e.target).html('取消全屏')
                        }
                        resizeEditor()
                    });
                }

                if(actionList.indexOf('insert-component') > -1){
                    $('#insertComponent').removeClass('hide');
                    $('#insertComponent').componentPicker({
                        callback: function (data) {
                            editor.insert(data.html);
                        }
                    });
                }

                if(actionList.indexOf('js-beautifier') > -1){
                    $('#jsBeautifier').removeClass('hide');
                    $('#jsBeautifier').on('click', function (e) {
                        var content = editor.getValue();
                        // content = beautifyJs.js_beautify(content, { "indent_size": 2 });
                        // content = beautifyCss.css_beautify(content, { "indent_size": 2 });
                        content = beautifyHtml.html_beautify(content, {
                            "indent_size": 4,
                            "indent_char": " ",
                            "eol": "\n",
                            "indent_level": 0,
                            "indent_with_tabs": false,
                            "preserve_newlines": true,
                            "max_preserve_newlines": 10,
                            "jslint_happy": false,
                            "space_after_anon_function": false,
                            "brace_style": "collapse",
                            "keep_array_indentation": false,
                            "keep_function_indentation": false,
                            "space_before_conditional": true,
                            "break_chained_methods": false,
                            "eval_code": false,
                            "unescape_strings": false,
                            "wrap_line_length": 0,
                            "wrap_attributes": "auto",
                            "wrap_attributes_indent_size": 4,
                            "end_with_newline": false
                        });
                        $('#'+textareaName).val(content);
                        editor.setValue(content);
                    });
                }

                if(actionList.indexOf('compress-code') > -1){
                    $('#compressCode').removeClass('hide');

                    $('#compressCode').on('click',function(){
                        var content = Util.replaceStyle2Class($('#content').val());
                        $('#content').val(content);
                        editor.setValue(content);
                        alert('压缩完成');
                    });
                }

                if(actionList.indexOf('replace-135-img') > -1){
                    $('#replace135Img').removeClass('hide');

                    $('#replace135Img').on('click',function(){
                        $('#content').val(Util.restoreWx135Image($('#content').val()));
                        alert('修复完成');
                    });
                }

            });
        });
    }


    return init;
});
/**
 * Created by jack on 17/2/5.
 */
define('component/component-editor', ['common/util', 'H5-editor/config'], function (require) {
  "use strict";

  var componentName = "component-editor";//组件名

  var Util = require('common/util');
  var config = require('H5-editor/config');
  // console.log(config.html);
  // console.log(Util);
  // console.log(Util1);

  function init () {
    return function ($container) {
      /*  记录当前 moduleId  */

      $container = $container || $(document);
      var $els = $container.find('[data-component="' + componentName + '"]');
      //
      //js代码
      //    console.log($els);
      // Util.ready(function () {
      $els.each(function () {
        // =====================下面是样式========================
        var el = '<style>' +
          'body,li,ul{margin:0;padding:0;}' +
          '.admin-body .fb-body{overflow-y: hidden;}' +
          'ul{list-style:none}' +
          'body{font:13px/1.5 Tahoma}' +
          'button{border:none;margin:5px;background-color:#00c;color:#fff}' +
          '.editor{position:relative;min-width:500px;margin:10px;border-radius: 5px;overflow:hidden;}' +
          '.editor .components-btn{background-color:#ccc;border-bottom: 1px solid #b5b5b5;}' +
          '.editor .components-btn div span{color:#28A3EF;display:inline-block;text-align:center;vertical-align:top;padding:6px 10px;}' +
          '.editor .components-btn div div{width:80%;display:inline-block}' +
          '.editor .components-btn div div .div{background-color:#fff;color:#333;border-radius:3px;cursor:pointer;display: inline-block;margin: 5px;padding: 3px 5px;text-align: center;width: auto;}' +
          '.editor .components-btn div div .div:hover{background-color:#0a8ddf;color:#fff}' +
          '.editor #box{position:relative;width:100%;height:460px;padding:5px;overflow-y:auto;background-color:#eee}' +
          //滚动条
          '::-webkit-scrollbar, ::-webkit-scrollbar-track {background-color: transparent!important;box-shadow: 0 0 1px 0px #ccc;}' +
          '::-webkit-scrollbar-thumb{background-color: rgba(0,0,0,.1);border-radius: 5px;box-shadow: inset 0px 0px 20px 0px #ccc;}' +
          '.editor #box .module{width:auto;overflow:hidden;background:#ccc;border:1px solid #999;padding:.2rem;position:relative;}' +
          '.module{border:1px solid #999;padding:.2rem;margin:0.2rem;border-radius: 5px;}' +
          '.editor #box .module div{padding:.2rem}' +
          '.editor #box .module div:nth-child(1), .editor #box .module div:nth-child(3){padding:0}' +
          '.editor #box .module div span{display:inline-block;width:15%;text-align:right;padding-right:.2rem}' +
          '.editor #box .module div input{width:85%;border-radius:2px;border: #e9e9e9 solid 1px;padding: 0.2rem;}' +
          '.editor #box .module div select{width:85%;border-radius:0;border: #e9e9e9 solid 1px;padding: 0.2rem;background:#ffffff;}' +
          '.editor #box .module1 div{padding:.2rem}' +
          '.editor #box .module1 div span{display:inline-block;width:15%;text-align:right;padding-right:.2rem}' +
          '.editor #box .module1 div input{width:85%;border-radius:2px;border: none;padding: 0.2rem;}' +
          '.editor #box .module1 div:nth-child(1) span,.editor #box .module div:nth-child(1) span,.editor #box .module1{width:auto;text-align:center;position:relative;}' +
          '.editor #box .module div:nth-child(1){text-align:center}' +
          '.editor #box .module1{overflow:hidden;border:2px solid red;background:#ccc;padding:.5rem}' +
          '.editor #box .module1 p{color:#333}' +
          '.editor .submit{background-color:#eee;text-align:center}' +
          '.editor .submit div:nth-child(1){display:inline-block;width:2.5rem;text-decoration:underline;color:#666;cursor:pointer;padding-bottom:0.5rem;}' +
          '.editor .submit div:nth-child(1) .show-content{width:100px;margin:.5rem 0 .5rem 200px;background-color:#0c5dbf;color:#fff;border-radius:3px;padding:.2rem 0;text-align:center;cursor:pointer}' +
          '.editor .submit div:nth-child(2){display:inline-block;text-align:center;text-decoration:underline;color:#666;cursor:pointer;padding-bottom:0.5rem;}' +
          '.editor .submit div:nth-child(3){display:inline-block;text-align:center;text-decoration:underline;color:#666;cursor:pointer;padding:0 0 0.5rem 0.2rem}' +
          '.editor .submit div:nth-child(4){display:inline-block;text-align:center;text-decoration:underline;color:#666;cursor:pointer;padding:0 0 0.5rem 0.2rem}' +
          '#show{margin:10px;margin-top:0;left:217px;padding:10px 5px 10px 10px;border:1px solid #e9e9e9;border-radius:5px;width:375px;overflow-y:auto;overflow-x:hidden;}' +
          '.module,.module1{width:180px;overflow:hidden;background:#ccc}' +

          '.module1{border-radius: 5px;border:1px solid green;text-align:center;margin:0.2rem}' +
          '.module1 div:nth-child(1){border:0}' +
          '.module1 .note{border:0}' +
          '.module1 p{color:#333}' +
          'textarea{width:100%;height:60px;border:1px solid #333;resize:none}' +
          '.editor .active{border:2px dashed red}' +
          '.close{position: absolute;top: 5px;right: 5px;width: 20px;height: 20px;line-height: 7px;text-align: center;cursor: pointer;border: #333 solid 1px;border-radius: 10px;background-color:#ccc}' +
          '.note{width:100% !important;padding:0 !important;border:none !important;background-color:#ccc!important;text-align:center;color:#999;}' +
          '</style>' +
          // =====================上面是样式========================
          '<div>' +
          '<div id=show style="float: left;">' +
          '<iframe class=show src="" style="width: 320px;border: none;"></iframe>' +
          '<textarea class=html-show style="width: 100%;resize: none;height: 580px;border: none;display: none;"></textarea>' +
          '</div>' +
          '<div class=editor>' +
          '<div class=components-btn>' +
          '<div>' +
          '<span>常用:</span>' +
          '<div>' +
          config.html.replace('<div class=div>快速添加商品静态化</div>', '') + // 屏蔽快速商品静态化
          '<div class=div>添加html</div>' +
          //'<div class=div>拼图图片框架</div>' +
          '<div class=div>滑动图片框架</div>' +
          '<div class=div>吸底图片框架</div>' +
          '<div class=div>插入图片</div>' +
          '<div class=div>领优惠券</div>' +
          '<div class=div>插入视频</div>' +
          //'<div class=div>插入视频-帖子</div>' +
          //'<div class=div>申请试用单元</div>' +
          '<div class=div>关注某人</div>' +
          //'<div class=div>定时组件</div>' +
          '<div class=div>直播信息</div>' +
          '<div class=div>轮播</div>' +
          '<div class=div>倒计时</div>' +
          '<div class=div>快速添加商品(两)</div>' +
          '<div class=div>快速添加商品(一)</div>' +
          '</div>' +
          '</div>' +
          '<div>' +
          '<span>锚点:</span>' +
          '<div>' +
          '<div class=div>锚点框架</div>' +
          '<div class=div>锚点导航栏基础</div>' +
          '<div class=div>锚点导航栏</div>' +
          '<div class=div>结束符</div>' +
          '<div class=div>锚点</div>' +
          '</div>' +
          '</div>' +
          '<div>' +
          '<span>导航:</span>' +
          '<div>' +
          '<div class=div>导航栏基础</div>' +
          '<div class=div>导航栏</div>' +
          '<div class=div>侧边导航栏基础</div>' +
          '<div class=div>侧边导航栏</div>' +
          '<div class=div>返回顶部按钮</div>' +
          '<div class=div>购物车按钮</div>' +
          '</div>' +
          '</div>' +
          '</div>' +
          '<div id=box></div>' +
          '<div class=submit>' +
          '<div class=all-screen>全屏模式</div>' +
          '<div class=change-to-html>切换为html模式</div>' +
          '<div class=update>更新</div>' +
          '<div class=locate-component>定位组件</div>' +
          '</div>' +
          '</div>' +
          '<div style=clear:both;></div>' +
          '</div>';
        $(this).append(el);
        $(this).append('<div class="confirm-popup" style="display: none;position: fixed;top: 50%;left: 50%;transform: translate(-50%,-50%);z-index: 100;background-color: #fff;width: 10rem;padding: 0.5rem;"><div style="text-align: center;margin: 0.5rem;font-size: 0.7rem">是否删除该组件?</div><div><span class="yes" style="display: inline-block;width: 50%;text-align: center;cursor: pointer;font-size: 0.7rem">是</span><span class="no" style="display: inline-block;width: 50%;text-align: center;cursor: pointer;font-size: 0.7rem">否</span></div></div>');
        $(this).css('position', 'relative');
        var previewUrl = $(this).attr('data-url');
        // console.log(previewUrl);
        var $iframe = $('#show .show');

        $iframe.attr('src', previewUrl);

        var textId = $(this).attr('data-text-id');
        var editorId = $(this).attr('data-editor-id');

        // console.log($(this).find('#show .show').get(0));
        // console.log($('#editor_content').val());
        // $(this).find('#box').html($('#editor_content').val());

        var self = this;
        $(self).find('#show').css('padding', 0);
        // $(self).find('#show').css('height',$(self).find('.editor').height() + 'px');
        $(self).find('.show').css('height', ($(self).find('.editor').height() - 22) + 'px');
        $(self).find('.show').css('width', '375px');
        $(self).find('.html-show').css('height', ($(self).find('.editor').height() - 22) + 'px');
        $(self).find('.html-show').css('width', '100%');

        /* 获取加了id的outerHTML */
        var getOuterHTML = function (component, $el, i) {

          var s = component[$el.elements[i].index].str($el.elements[i])

          /*if ($(s).hasClass('tab-location-container')) {
            return s.replace(/^<div/, '<div data-module-id="' + $el.elements[i].getAttribute('data-module-id') + '"')
          }
          var $s = $(s)
          $s.attr('data-module-id', $el.elements[i].getAttribute('data-module-id'))
          if ($s.length > 0) {
            return $s[0].outerHTML
          }*/

          return s.replace(/^<(div|img|video)/, '<$1 data-module-id="'+$el.elements[i].getAttribute('data-module-id')+'"')

          // component[$el.elements[i].index].str($el.elements[i]);
        }


        var elements = [];
        //组件列表
        var component = [
          {
            name: '添加html',
            component_name: '添加html',
            html: '<div><span>--添加html--</span><div class="close">x</div></div><div><input class="note editable" type="text" placeholder="备注" value="备注"></div><div><textarea class="editable" style="margin: 0.3rem 0;height: 200px;" ></textarea></div>',
            str: function (ele) {
              return $(ele).find('textarea').val();
            }
          },
          {
            name: '快速添加商品(两)',
            component_name: '快速添加商品(两)',
            html: '<div><span>--快速添加商品(两)--</span><div class="close">x</div></div><div><input class="note editable" type="text" placeholder="备注" value="备注"></div><div><span>商品id:</span><input class="id editable" type="text"></div><div style="display:none;"><span>按键文案:</span><input class="text editable" placeholder="此字段已被废弃" type="text"></div><div><span>背景颜色:</span><input class="bg-color editable" placeholder="不填则背景色默认为f8f8f8" type="text"></div><div><span>商品详情类型:</span><select class="sale-mode editable"><option value="">自动商品详情</option><option value="common">普通商品详情</option><option value="presale">预售商品详情</option></select></div>',
            str: function (ele) {
              // console.log($(ele).find('.bgColor'));
              return '<div data-component="add-goods" data-id="' + $(ele).find('.id').val() + '" data-bg-color="' + $(ele).find('.bg-color').val() + '" data-sale-mode="' + $(ele).find('.sale-mode').val() + '" ></div>';
            }
          },
          {
            name: '快速添加商品(一)',
            component_name: '快速添加商品(一)',
            html: '<div><span>--快速添加商品(一)--</span></div><div class="close">x</div><div><input class="note editable" type="text" placeholder="备注" value="备注"></div><div><span>商品id:</span><input class="id editable" type="text"></div><div style="display:none;"><span>按键文案:</span><input class="text editable" placeholder="此字段已被废弃" type="text"></div><div style="display:none;"><span>背景颜色:</span><input class="bg-color editable" placeholder="不填则背景色默认为f8f8f8" type="text"></div><div><span>商品详情类型:</span><select class="sale-mode editable"><option value="">自动商品详情</option><option value="common">普通商品详情</option><option value="presale">预售商品详情</option></select></div>',
            str: function ($el) {
              return '<div data-component="add-good" data-id="' + $($el).find('.id').val() + '" data-bg-color="' + $($el).find('.bg-color').val() + '" data-sale-mode="' + $($el).find('.sale-mode').val() + '" ></div>';
            }
          },

          {
            name: '模块',
            component_name: '锚点框架',
            html: '<p>--锚点跳转--</p><div class="close">x</div><div><input class="note editable" type="text" placeholder="备注" value="备注"></div>',
            str: function ($el) {
              var str = '';
              for (var i = 0; i < $el.elements.length; i++) {
                // console.log($el.elements[i].elements);
                str += getOuterHTML(component, $el, i)
              }
              return '<div data-component="tab-location-1" class="tab-location-container"><div class="nav-contain">' + str + '</div>';
            }
          },
          {
            name: '结束符',
            component_name: '结束符',
            html: '<div><div class="close">x</div><span>--------------------------------结束符--------------------------------</span></div>',
            str: function ($el) {
              return '</div>';
            }
          },
          {
            name: '模块',
            component_name: '锚点导航栏基础',
            html: '<p>--锚点导航栏基础--</p><div class="close">x</div><div><input class="note editable" type="text" placeholder="备注" value="备注"></div>',
            str: function ($el) {
              var str = '';
              for (var i = 0; i < $el.elements.length; i++) {
                // console.log($el.elements[i].elements);
                // if($el.elements[i].elements && $el.elements[i].elements.length != 0){
                //     var str1 = '';
                //     for(var j = 0 ; j < $el.elements[i].elements.length ; j ++){
                //         str1 += component[$el.elements[i].elements[j].index].str($el.elements[i].elements[j]);
                //     }
                //     str += '<div>'+ str1 +'</div>';
                // }else{
                str += getOuterHTML(component, $el, i)
                // str += component[$el.elements[i].index].str($el.elements[i]);
                // }
              }
              return '<div class="nav clear-float">' + str + '</div>';
            }
          },
          {
            name: '模块',
            component_name: '导航栏基础',
            html: '<div><span>--导航栏基础--</span><div class="close">x</div></div><div><input class="note editable" type="text" placeholder="备注" value="备注"></div><div><span>宽度:</span><input class="width editable" type="text"></div><div><span>高度:</span><input class="height editable" type="text"></div>',
            str: function ($el) {
              var str = '';
              for (var i = 0; i < $el.elements.length; i++) {
                str += getOuterHTML(component, $el, i)
                // str += component[$el.elements[i].index].str($el.elements[i]);

              }
              return '<div data-component="navigator-tabs-base" data-width="' + $($el).find('.width').val() + '" data-height="' + $($el).find('.height').val() + '">' + str + '</div>';
            }
          },
          {
            name: '模块',
            component_name: '侧边导航栏基础',
            html: '<div><span>--侧边导航栏基础--</span></div><div class="close">x</div><div><input class="note editable" type="text" placeholder="备注" value="备注"></div><div><span>宽度:</span><input class="width editable" type="text"></div><div><span>激活图片:</span><input class="active-image editable insert-image" type="text"></div>',
            str: function ($el) {
              var str = '';
              for (var i = 0; i < $el.elements.length; i++) {
                console.log(1, getOuterHTML(component, $el, i))
                str += getOuterHTML(component, $el, i)
                // str += component[$el.elements[i].index].str($el.elements[i]);

              }
              return '<div data-component="navigator-side-base" data-width="' + $($el).find('.width').val() + '" data-action-tab-image="' + $($el).find('.active-image').val() + '">' + str + '</div>';
            }
          },
          {
            name: '模块',
            component_name: '轮播',
            html: '<p>--轮播--</p><div class="close">x</div><div><input class="note editable" type="text" placeholder="备注" value="备注"></div>',
            str: function ($el) {
              var str = '';
              for (var i = 0; i < $el.elements.length; i++) {
                // console.log($el.elements[i].elements);
                // if($el.elements[i].elements && $el.elements[i].elements.length != 0){
                //     var str1 = '';
                //     for(var j = 0 ; j < $el.elements[i].elements.length ; j ++){
                //         str1 += component[$el.elements[i].elements[j].index].str($el.elements[i].elements[j]);
                //     }
                //     str += '<div>'+ str1 +'</div>';
                // }else{
                str += getOuterHTML(component, $el, i)
                // str += component[$el.elements[i].index].str($el.elements[i]);
                // }
              }
              return '<div data-component="carousel"><div class="carousel"><div class="img clearfloat">' + str + '</div></div></div>';
            }
          },
          {
            name: '模块',
            component_name: '模块',
            html: '<p>--模块--</p><div class="close">x</div><div><input class="note editable" type="text" placeholder="备注" value="备注"></div>',
            str: function ($el) {
              var str = '';
              for (var i = 0; i < $el.elements.length; i++) {
                // console.log($el.elements[i].elements);
                str += getOuterHTML(component, $el, i)
                // str += component[$el.elements[i].index].str($el.elements[i]);
                // }
              }
              return '<div>' + str + '</div>';
            }
          },
          {
            name: '模块',
            component_name: '锚点',
            html: '<div><span>--锚点--</span></div><div class="close">x</div><div><input class="note editable" type="text" placeholder="备注" value="备注"></div><div><span>锚点名:</span><input class="id editable" type="text"></div>',
            str: function ($el) {
              var str = '';
              for (var i = 0; i < $el.elements.length; i++) {
                // console.log($el.elements[i].elements);
                str += getOuterHTML(component, $el, i)

                // str += component[$el.elements[i].index].str($el.elements[i]);
              }
              return '<div data-component="add-content" id="' + $($el).find('.id').val() + '">' + str + '</div>';
            }
          },
          {
            name: '锚点导航栏',
            component_name: '锚点导航栏',
            html: '<div><span>--锚点导航栏--</span></div><div class="close">x</div><div><input class="note editable" type="text" placeholder="备注" value="备注"></div><div><span>tab名:</span><input class="tab-name editable" type="text"></div><div><span>激活前图片:</span><input class="tab-img insert-image editable" type="text"></div><div><span>激活图片:</span><input class="tab-active-img insert-image editable" type="text"></div>',
            str: function ($el) {
              return '<div data-component="add-nav" data-img="' + $($el).find('.tab-img').val() + '" data-img-active="' + $($el).find('.tab-active-img').val() + '" data-class="' + $($el).find('.tab-name').val() + '" data-height=""></div>';
            }

          },
          {
            name: '倒计时',
            component_name: '倒计时',
            html: '<div><span>--倒计时--</span></div><div class="close">x</div><div><input class="note editable" type="text" placeholder="备注" value="备注"></div><div><span>开始时间:</span><input class="start-time time editable" type="text"></div><div><span>结束时间:</span><input class="end-time time editable" type="text"></div><div><span>背景图:</span><input class="insert-image editable" type="text"></div>',
            str: function ($el) {
              return '<div data-component="count-down" data-start-time="' + $($el).find('.start-time').val() + '" data-end-time="' + $($el).find('.end-time').val() + '" data-bg-img="' + $($el).find('.insert-image').val() + '"></div>';
            }
          },
          {
            name: '导航栏',
            component_name: '导航栏',
            html: '<div><span>--导航栏--</span></div><div class="close">x</div><div><input class="note editable" type="text" placeholder="备注" value="备注"></div><div><span>链接:</span><input class="tab-link editable" type="text"></div><div><span>激活前图片:</span><input class="tab-img insert-image editable" type="text"></div><div><span>激活图片:</span><input class="tab-active-img insert-image editable" type="text"></div>',
            str: function ($el) {
              return '<div data-component="navigator-tabs" data-image="' + $($el).find('.tab-img').val() + '" data-active-image="' + $($el).find('.tab-active-img').val() + '" data-url="' + $($el).find('.tab-link').val() + '"></div>';
            }
          },
          {
            name: '侧边导航栏',
            component_name: '侧边导航栏',
            html: '<div><span>--侧边导航栏--</span></div><div class="close">x</div><div><input class="note editable" type="text" placeholder="备注" value="备注"></div><div><span>链接:</span><input class="tab-link editable" type="text"></div><div><span>导航图片:</span><input class="tab-img insert-image editable" type="text"></div>',
            str: function ($el) {
              return '<div data-component="navigator-side" data-image="' + $($el).find('.tab-img').val() + '" data-url="' + $($el).find('.tab-link').val() + '"></div>';
            }
          },
          {
            name: '模块',
            component_name: '拼图图片框架',
            html: '<div><span>--拼图图片框架--</span></div><div class="close">x</div><div><input class="note editable" type="text" placeholder="备注" value="备注"></div>',
            str: function ($el) {
              var str = '';
              for (var i = 0; i < $el.elements.length; i++) {
                // console.log($el.elements[i].elements);
                str += getOuterHTML(component, $el, i)
              }
              return '<div class="img-content">' + str + '<div style="clear:both"></div><style>.img-content img{float:left}</style></div>';
            }
          },
          {
            name: '插入图片',
            component_name: '插入图片',
            html: '<div><span>--插入图片--</span></div><div class="close">x</div><div><input class="note editable" type="text" placeholder="备注" value="备注"></div><div><span>插入图片:</span><input class="insert-image editable" type="text"></div><div><span>路由:</span><input class="app-route editable" type="text"></div><div><span>图片宽度:</span><input class="wd editable" type="text"></div>',
            str: function ($el) {
              return '<img src="' + $($el).find('.insert-image').val() + '" style="width:' + ($($el).find('.wd').val() || "100%") + ';vertical-align: top;" app_route="' + $($el).find('.app-route').val() + '">';
            }
          },
          {
            name: '领优惠券',
            component_name: '领优惠券',
            html: '<div><span>--领优惠券--</span></div><div class="close">x</div><div><input class="note editable" type="text" placeholder="备注" value="备注"></div><div><span>券id:</span><input class="ticket-id editable" type="text"></div><div><span>领取前图片:</span><input class="fore-image insert-image editable" type="text"></div><div><span>领取后图片:</span><input class="after-image insert-image editable" type="text"></div>',
            str: function ($el) {
              return '<img data-component="coupon-obtain" data-coupon-ids="' + $($el).find('.ticket-id').val() + '" data-obtained-src="' + $($el).find('.after-image').val() + '" src="' + $($el).find('.fore-image').val() + '" data-stats-category="点击领优惠券" data-stats-action="券' + $($el).find('.ticket-id').val() + '">';
            }
          },
          {
            name: '插入视频',
            component_name: '插入视频',
            html: '<div><span>--插入视频--</span></div><div class="close">x</div><div><input class="note editable" type="text" placeholder="备注" value="备注"></div><div><span>封面图:</span><input class="insert-image editable" type="text"></div><div><span>视频连接:</span><input class="vedio-url editable" type="text"></div>',
            str: function ($el) {
              return '<div data-component="video" data-poster="' + $($el).find('.insert-image').val() + '" data-src="' + $($el).find('.vedio-url').val() + '"></div>';
            }
          },
          {
            name: '插入视频-帖子',
            component_name: '插入视频-帖子',
            html: '<div><span>--插入视频-帖子--</span></div><div class="close">x</div><div><input class="note editable" type="text" placeholder="备注" value="备注"></div><div><span>封面图:</span><input class="insert-image editable" type="text"></div><div><span>视频连接:</span><input class="vedio-url editable" type="text"></div>',
            str: function ($el) {
              return '<video width="100%" controls="controls" preload="preload" poster="' + $($el).find('.insert-image').val() + '"><source src="' + $($el).find('.vedio-url').val() + '">您的版本不支持视频</video>';
            }
          },
          {
            name: '申请试用单元',
            component_name: '申请试用单元',
            html: '<div><span>--申请试用单元--</span></div><div class="close">x</div><div><input class="note editable" type="text" placeholder="备注" value="备注"></div><div><span>封面图:</span><input class="insert-image editable" type="text"></div><div><span>标题:</span><input class="title-1 editable" type="text"></div><div><span>描述1:</span><input class="describe-1 editable" type="text"></div><div><span>描述2:</span><input class="describe-2 editable" type="text"></div><div><span>开始时间:</span><input class="start-time time editable" type="text"></div><div><span>结束时间:</span><input class="end-time time editable" type="text"></div><div><span>路由:</span><input class="app-route editable" type="text"></div>',
            str: function ($el) {
              return '<div data-component="apply-test" data-image="' + $($el).find('.insert-image').val() + '" data-title="' + $($el).find('.title-1').val() + '" data-desc1="' + $($el).find('.describe-1').val() + '" data-desc2="' + $($el).find('.describe-2').val() + '" data-start-time="' + $($el).find('.start-time').val() + '" data-end-time="' + $($el).find('.end-time').val() + '" data-app-route="' + $($el).find('.app-route').val() + '"></div>';
            }
          },
          {
            name: '关注某人',
            component_name: '关注某人',
            html: '<div><span>--关注某人--</span></div><div class="close">x</div><div><input class="note editable" type="text" placeholder="备注" value="备注"></div><div><span>用户ID:</span><input class="user-id editable" type="text"></div>',
            str: function ($el) {
              return '<div data-component="follow-user" data-uid="' + $($el).find('.user-id').val() + '"></div>';
            }
          },
          {
            name: '定时组件',
            component_name: '定时组件',
            html: '<div><span>--定时组件--</span></div><div class="close">x</div><div><input class="note editable" type="text" placeholder="备注" value="备注"></div><div><span>商品ID:</span><input class="good-id editable" type="text"></div><div><span>开售图:</span><input class="on-sale insert-image editable" type="text"></div><div><span>未售图:</span><input class="not-on-sale insert-image editable" type="text"></div><div><span>售完图:</span><input class="all-sale insert-image editable" type="text"></div><div><span>开售时间:</span><input class="start-time time editable" type="text"></div><div><span>下架时间:</span><input class="end-time time editable" type="text"></div>',
            str: function ($el) {
              return '<div data-component="timing" data-start-image="' + $($el).find('.on-sale').val() + '" data-not-start-image="' + $($el).find('.not-on-sale').val() + '" data-out-image="' + $($el).find('.all-sale').val() + '" data-time="' + $($el).find('.start-time').val() + '" data-end-time="' + $($el).find('.end-time').val() + '" data-id="' + $($el).find('.good-id').val() + '"></div>';
            }
          },
          {
            name: '直播信息',
            component_name: '直播信息',
            html: '<div><span>--直播信息--</span></div><div class="close">x</div><div><input class="note editable" type="text" placeholder="备注" value="备注"></div><div><span>直播ID:</span><input class="live-detail-id editable" type="text"></div>',
            str: function ($el) {
              return '<div data-component="live-detail" data-live-id="' + $($el).find('.live-detail-id').val() + '"></div>';
            }
          },
          {
            name: '模块',
            component_name: '滑动图片框架',
            html: '<div><span>--滑动图片框架--</span></div><div class="close">x</div><div><input class="note editable" type="text" placeholder="备注" value="备注"></div>',
            str: function ($el) {
              var str = '';
              for (var i = 0; i < $el.elements.length; i++) {
                // console.log($el.elements[i].elements);
                str += getOuterHTML(component, $el, i)
              }
              return '<div class="move-container" style="overflow-x: auto;overflow-y: hidden;width: 100%;white-space: nowrap">' + str + '</div>';
            }
          },
          {
            name: '模块',
            component_name: '吸底图片框架',
            html: '<div><span>--吸底图片框架--</span></div><div class="close">x</div><div><input class="note editable" type="text" placeholder="备注" value="备注"></div>',
            str: function ($el) {
              var str = '';
              for (var i = 0; i < $el.elements.length; i++) {
                // console.log($el.elements[i].elements);
                str += getOuterHTML(component, $el, i)
              }
              return '<div class="move-container" style="position: fixed;bottom: 0;">' + str + '</div>';
            }
          }
        ];

        var component = component.concat(config.component).concat([
          //新增组件放在这
          /*
          *   添加返回顶部按钮 & 添加购物车按钮
          */
          {
            name: '返回顶部按钮',
            component_name: '返回顶部按钮',
            html: '<div><span>--返回顶部按钮--</span></div><div class="close">x</div>',
            str: function ($el) {
              var imgSrc = 'http://m.meijiabang.cn/img/icon/to-top.png'
              return '<div' +
                ' class="to-top"' +
                ' data-component="to-top"' +
                ' style="' +
                ' position: fixed;' +
                ' z-index: 200;' +
                ' bottom: 20px;' +
                ' right: 10px;' +
                ' width: 50px;' +
                ' height: 50px;' +
                ' border-radius: 50%;' +
                ' box-shadow: 1px 1px 5px 1px #e9e9e9;' +
                ' background: url(' + imgSrc + ') center center no-repeat #fff;' +
                ' background-size: 60%;">' +
                '</div>';
            }
          },
          {
            name: '购物车按钮',
            component_name: '购物车按钮',
            html: '<div><span>--购物车按钮--</span></div><div class="close">x</div>',
            str: function ($el) {
              var imgSrc = 'http://m.meijiabang.cn/img/icon/shopping-cart.png'
              return '<div' +
                ' class="shopping-cart"' +
                ' data-component="shopping-cart"' +
                ' style="' +
                ' position: fixed;' +
                ' z-index: 200;' +
                ' bottom: 84px;' +
                ' right: 10px;' +
                ' width: 50px;' +
                ' height: 50px;' +
                ' border-radius: 50%;' +
                ' box-shadow: 1px 1px 5px 1px #e9e9e9;' +
                ' background: url(' + imgSrc + ') center center no-repeat #fff;' +
                ' background-size: 60%;">' +
                '</div>';
            }
          }
        ]);
        // console.log(component);

        // console.log(JSON.parse($('#editor_content').val()));
        var componentEditor = [];
        if ($('#editor_content').val()) {
          // console.log($('#editor_content').val());
          componentEditor = JSON.parse($('#editor_content').val());
          // console.log(componentEditor);
        }
        // console.log(componentEditor);
        if (componentEditor) {
          var componentEditorLen = componentEditor.length;
          for (var i = 0; i < componentEditorLen; i++) {
            var id = '' + i
            var ele = document.createElement("div");
            ele.setAttribute('data-module-id', id)
            addEle(ele, $(self).find('.editor #box'), componentEditor[i], id);
            elements.push(ele);
            if (componentEditor[i].componentChild) {
              var componentEditorChildLen = componentEditor[i].componentChild.length;
              for (var j = 0; j < componentEditorChildLen; j++) {
                var jid = '' + i + j
                var eleChild = document.createElement("div");
                eleChild.setAttribute('data-module-id', jid)
                addEle(eleChild, $(ele), componentEditor[i].componentChild[j], jid);
                elements[i].elements.push(eleChild);
                if (componentEditor[i].componentChild[j].componentChild) {
                  var componentEditorGrandsonLen = componentEditor[i].componentChild[j].componentChild.length;
                  for (var k = 0; k < componentEditorGrandsonLen; k++) {
                    var kid = '' + i + j + k
                    var eleGrandson = document.createElement("div");
                    eleGrandson.setAttribute('data-module-id', kid)
                    addEle(eleGrandson, $(eleChild), componentEditor[i].componentChild[j].componentChild[k], kid);
                    elements[i].elements[j].elements.push(eleGrandson);
                    // console.log(eleGrandson)
                  }
                  // console.log(componentEditor[i].componentChild[j].componentChild)
                }
                // console.log(componentEditor[i].componentChild);

              }
            }
          }
          $(self).find('.insert-image').each(function () {
            var self = this;
            $(this).imagePicker({
              el: $(self),
              mode: 'replace',
              format: 'shortTag',
              objType: 'h5SimplePage',
              objId: 0,
              callback: function () {
                $(self).change()
              }
            });
          });
          $(self).find('.app-route').appRoutePicker();

          $(self).find('.time').datetimepicker({});
          $(self).find('.editable').on('change', function () {
            // console.log('图片1');
            var $this = $(this)
            if ($this.hasClass('app-route')) {
              addCleanButton($this)
            }
            submit();
          });

          $(self).find('#select_approute .s_submit').on('click', function () {
            // console.log('图片3');
            submit();
          });

          // $(self).find('.app-route').on('click', function () {
          //   $('#select_approute .s_submit').on('click', function () {
          //     setTimeout(function () {
          //       submit();
          //     }, 200)
          //   })
          // });

          $(document.body).on('click', '.s_submit, .utm-btn, .app-route-cleaner, .update', function () {
            // console.log($(this))
            submit();
          });

          /* ===========定位组件=========== */
          // 修复瀑布流的预览
          $(window).on('load', function () {
            $iframe.contents().find('head').append('<style>*{box-sizing: content-box;}</style>')
          })
          var _mos_temp = {}
          var findModule = function (from, id) {
            var $container = null;
            var $outer = null;
            if (from === 'editor') {
              $container = $('#box')
              $outer = $container
            } else {
              $outer = $('.show')
              $container = $outer.contents().find('body')
            }
            var $target = $container.find('[data-module-id="' + id + '"]')
            if ($target.length > 0) {
              if (_mos_temp.oldTarget) {
                _mos_temp.oldTarget.css('border', _mos_temp.oldBorder)
              }
              _mos_temp.oldTarget = $target
              _mos_temp.oldBorder = $target.css('border')
              $target.css({
                'border': '2px solid #06ff60'
              })
              $target.find('input:not(.note)').first().focus();
              $container.scrollTop($target.offset().top - $outer.offset().top + $outer.scrollTop())
            }
          }

          $(self).find('.locate-component').on('click', function (event) {
            submit()
            var $this = $(this)
            $this.text('请选择需要定位的组件')
            var $show = $('#show .show');
            var ctnWds = $show[0].contentWindow
            var $iBody = $show.contents().find('body');
            var $b = ctnWds.$($iBody[0])
            var $e = $('#box')
            $b.off('click');
            $b.off('click', '[app_route], [app-route]');
            $b.off('scroll');
            ctnWds.onscroll = function () {


            }

            // 预览
            $b.on('click', '[data-module-id]', function (event) {
              event.stopPropagation()
              findModule('editor', $(this).attr('data-module-id'))
              $this.text('定位组件')
            })

            // 编辑器
            $e.on('click', 'div.module[data-module-id], div.module1[data-module-id]', function (event) {
              // 兼容 图片选择器
              var $target = $(event.target)
              if ($target.hasClass('insert-image')) {
                return;
              }

              event.stopPropagation()
              findModule('iframe', $(this).attr('data-module-id'))
              $this.text('定位组件')
            })
          });
        }

        // 添加清空路由的按钮
        function addCleanButton ($input) {
          if ($input.val()) {
            var $span = $('<button class="app-route-cleaner" style="position: absolute;margin:0 5px;right:0;top:50%;transform:translateY(-50%);padding:0 10px;">').text('清空路由').click(function () {

              $input.val('')

              console.log('清空路由')
              submit()
              $span.remove()
            })

            $input.siblings('.app-route-cleaner').remove()
            $input.after($span).parent().css('position', 'relative')
          }
        }

        /* by mos */
        function addEle (ele, $parentEle, componentEditor, id) {
          $(ele).attr('data-module-id', id);
          if (component[componentEditor.componentIndex].name == '模块') {
            $(ele).addClass('module1');
            ele.key = '模块';
            ele.elements = [];
          } else {
            $(ele).addClass('module');
            ele.key = '元素';
          }
          $(ele).html(component[componentEditor.componentIndex].html);
          componentEditor.ele = ele;
          ele.index = componentEditor.componentIndex;
          // var $inputVal = $(ele).find('div > input');
          // var $InputValLen = $inputVal.length;
          $(ele).find('div > .editable').each(function (index) {
            var $this = $(this)

            $this.val(componentEditor.val[index]);
            if ($this.prev('span').text() === '路由:' && $this.val()) {
              // 新增清空路由按钮
              addCleanButton($this)

            }
          });

          $parentEle.append(ele);
        }


        $(self).find('.div').each(function () {
          var index = 0;
          for (var i = 0; i < component.length; i++) {
            if ($(this).html() == component[i].component_name) {
              index = i;
              // console.log(index);
              break;
            }
          }

          $(this).on('mousedown', function () {
            // console.log(index);
            var oLi = document.createElement("div");
            // $(oLi).addClass('module');
            if (component[index].name == '模块') {
              $(oLi).addClass('module1');

              // $(oLi).css('paddingBottom','2rem');
              // $(oLi).append('<div style="position: absolute;bottom: 0;width: 100%;text-align: center;color: #999;">插入内容</div>');
              oLi.key = '模块';
              oLi.elements = [];
            } else {
              $(oLi).addClass('module');
              oLi.key = '元素';
            }
            $(oLi).html(component[index].html);
            oLi.index = index;
            $(self).find('.editor').append(oLi);
            $(oLi).css('position', 'absolute');


            addElement(oLi);
            $(self).find('.insert-image').on('click', function (event) {
              // console.log('img');
            });
            $(self).find('.insert-image').each(function () {
              var self = this;
              $(this).imagePicker({
                el: $(self),
                mode: 'replace',
                format: 'shortTag',
                objType: 'h5SimplePage',
                objId: 0,
                callback: function () {
                  $(self).change()
                }
              });
            });
            $(self).find('.app-route').appRoutePicker();

            $(self).find('.time').datetimepicker({});
            $(self).find('.editable').on('change', function () {
              // console.log('图片1');
              var $this = $(this)
              if ($this.hasClass('app-route')) {
                addCleanButton($this)
              }
              submit();
            });
            $(self).find('textarea').off();
            $(self).find('textarea').on('propertychange', function () {
              // console.log(this);
              this.style.height = this.scrollHeight + 'px'
            });
            $(self).find('textarea').on('input', function () {
              // console.log(this);
              this.style.height = this.scrollHeight + 'px'
            });
            $(self).find('.update').on('click', function () {
              console.log('更新');
              submit();
            });
            // $(self).find('.app-route').on('click', function () {
            //   $('#select_approute .s_submit').on('click', function () {
            //
            //     setTimeout(function () {
            //       submit();
            //     }, 200)
            //   })
            // });

          });
        });

        $(document).on('mousewheel', function (ev) {
          ev = ev || window.event;
          // console.log(ev.originalEvent.clientX);
          var xLow = $('#box').offset().left;
          var xMax = xLow + $('#box').width();
          var yLow = $('#box').offset().top;
          var yMax = yLow + $('#box').height();
          var x = ev.originalEvent.clientX;
          var y = ev.originalEvent.clientY;
          var boxScrollTop = $('#box').scrollTop();
          // var documentScrollTop = $('.tab-container').scrollTop();
          // console.log(documentScrollTop);
          if (xLow < x && x < xMax && yLow < y && y < yMax) {

            if (ev.originalEvent.wheelDelta < 0) {
              boxScrollTop += 30;
              // documentScrollTop -= 100;
            } else {
              boxScrollTop -= 30;
              // documentScrollTop += 100;
            }
            // console.log(boxScrollTop);
            // console.log(documentScrollTop);
            // $(document).scrollTop(documentScrollTop);
            $('#box').scrollTop(boxScrollTop);
            // console.log(ev.originalEvent.wheelDelta);
            // ev.preventDefault();

          }


        });

        var height = $(window).height() - $('.components-btn').height() - $('.submit').height();
        $('#box').css('height', (height - 60) + 'px');
        $('.show').css('height', ($(window).height() - 80) + 'px');
        $('#show').css('height', ($(window).height() - 60) + 'px');

        $(self).find('.all-screen').on('click', function () {
          // console.log($('.components-btn div').eq(0),$('.components-btn div').eq(0).clientHeight,$('.components-btn div').eq(1).height(),$('.components-btn div').eq(2).height());
          // console.log($(document).height(),$('.components-btn').height(),$('.submit').height());
          // var height = $(window).height() - $('.components-btn').height() - $('.submit').height();
          if ($(this).html() == '全屏模式') {
            // console.log(self);
            $('#box').css('height', (height - 20) + 'px');
            $('.show').css('height', ($(window).height() - 40) + 'px');
            $('#show').css('height', ($(window).height() - 20) + 'px');
            $(self).css({
              position: 'fixed',
              top: 0,
              left: 0,
              backgroundColor: '#fff',
              height: '100%',
              width: '100%'
            });
            $(this).html('取消全屏');
          } else {
            $('#box').css('height', (height - 60) + 'px');
            $('.show').css('height', ($(window).height() - 80) + 'px');
            $('#show').css('height', ($(window).height() - 60) + 'px');

            $(self).css({
              position: 'relative',
              top: 0,
              left: 0,
              backgroundColor: '#fff'
            });
            $(this).html('全屏模式');
          }
        });

        // $(".show").on('load',function () {
        //     console.log('iframe');
        //
        // });

        function inputValue (el) {
          var value = [];
          // console.log('childNodes:',el.childNodes);
          var elChild = el.childNodes;
          var elChildLen = elChild.length;
          for (var i = 0; i < elChildLen; i++) {
            // console.log(elChild[i].className);
            if (!elChild[i].className) {
              // console.log($(elChild[i]).find('.editable').get(0));
              if ($(elChild[i]).find('.editable').get(0)) {
                value.push($(elChild[i]).find('.editable').val());
              }
            }
          }
          // console.log(value);
          // $(el).find('div > input').each(function () {
          //     value.push($(this).val());
          // });
          return value;
        }

        // $(self).find('.show-content').on('click',function () {
        //     if(componentEditor){
        //         var componentEditorLen = componentEditor.length;
        //         for(var i = 0;i < componentEditorLen;i ++){
        //             // if(!componentEditor[i].ele){
        //                 componentEditor[i].val = inputValue(componentEditor[i].ele);
        //                 componentEditor[i].ele = null;
        //             // }
        //             if(componentEditor[i].componentChild){
        //                 var componentEditorChildLen = componentEditor[i].componentChild.length;
        //                 for(var j = 0;j < componentEditorChildLen;j ++){
        //                     // if(!componentEditor[i].componentChild[j].ele){
        //                         componentEditor[i].componentChild[j].val = inputValue(componentEditor[i].componentChild[j].ele);
        //                         componentEditor[i].componentChild[j].ele = null;
        //                     // }
        //                     if(componentEditor[i].componentChild[j].componentChild){
        //                         var componentEditorGrandsonLen = componentEditor[i].componentChild[j].componentChild.length;
        //                         for(var k = 0;k < componentEditorGrandsonLen;k ++){
        //                             // if(componentEditor[i].componentChild[j].componentChild[k].val){
        //                                 componentEditor[i].componentChild[j].componentChild[k].val = inputValue(componentEditor[i].componentChild[j].componentChild[k].ele);
        //                                 componentEditor[i].componentChild[j].componentChild[k].ele = null;
        //                             // }
        //                         }
        //                         // console.log(componentEditor[i].componentChild[j].componentChild)
        //                     }
        //                     // console.log(componentEditor[i].componentChild);
        //
        //                 }
        //             }
        //
        //         }
        //     }
        //     // console.log(componentEditor);
        //     var str = '';
        //     for(var i = 0; i < elements.length; i++){
        //         // console.log(elements[i]);
        //         str += component[elements[i].index].str(elements[i]);
        //     }
        //     $('#' + textId).val(Util.parseImageTag(str));
        //     var editorStr = JSON.stringify(componentEditor);
        //     // console.log(editorStr);
        //     $('#' + editorId).val(editorStr);
        //     // console.log($(self).find('.show').get(0).document.getElementById('show'));
        //     // var htmlStr = ""Util.parseImageTag(str)
        //     // $($(self).find('.show').get(0).document.getElementById('show')).html(Util.parseImageTag(str));
        //     // $(".show").contents().find("body").html('');
        //     // window.success = function () {
        //     //     App.until.init(); + '<script src="http://m.meijiabang.cn/js/single-page/single-page-lib.js"></script><script>console.log(App.Util);App.Util.init();</script>
        //     // };
        //     // var functionStr = 'function loadScript(url,callback){var script=document.createElement("script");script.type="text/javascript";script.src=url;document.getElementsByTagName("body")[0].appendChild(script);script.onload=function(){callback();};};';
        //
        //
        //     // var html = '<!DOCTYPE ><html><head><meta http-equiv=Content-Type content="text/html; charset=utf-8"><title></title><meta id=share-enable property=og:share-enable name=share-enable content=0><meta id=share-title property=og:title name=title content><meta id=share-text property=og:description name=description content><meta id=share-image property=og:image name=image content><meta id=share-link property=og:url name=share-link content><meta name=format-detection content="telephone=no"><meta name=apple-mobile-web-app-capable content=yes><meta name=viewport content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no"><meta name=viewport content="initial-scale=1.0,user-scalable=no,maximum-scale=1" media="(device-height: 568px)"><meta name=imagemode content=force><link type=text/css rel=stylesheet href=http://m.meijiabang.cn/css/single-page/single-page-lib.css></head><body data-page-id><div class=show>'+ Util.parseImageTag(str) +'</div></body><script src=http://m.meijiabang.cn/js/single-page/single-page-lib.js></script><script>App.Util.init();</script></html>';
        //     // var html_src = 'data:text/html;charset=utf-8,' + encodeURI(html);
        //     // $(".show").get(0).src = html_src;
        //     // $(self).find('#show .show').attr('src',previewUrl);
        //
        //
        //     // $(".show").contents().find("body").html(Util.parseImageTag(str) + '<script src=\"http://m.meijiabang.cn/js/single-page/single-page-lib.js\" type=\"text/javascript\"></script><script type=\"text/javascript\">console.log(App.Util);App.Util.init();</script>');
        //     // loadScript($(".show").contents().find("body").get(0),'http://m.meijiabang.cn/js/single-page/single-page-lib.js',function () {
        //     //     App.until.init();
        //     // });
        //     // $(".show").contents().find("body").append('<script src="http://m.meijiabang.cn/js/single-page/single-page-lib.js"></script>');
        //     // console.log($(".show").get(0));
        //
        //
        //     // $(self).find('#show .show').attr('src',previewUrl);
        //     $(self).find('.html-show').hide();
        //     // Util.foreComponentInit($('.show').get(0));
        // });


        var stateNum = 0;
        $(self).find('.change-to-html').on('click', function () {
          stateNum++;
          var str = '';
          for (var i = 0; i < elements.length; i++) {
            // console.log(elements[i].index);
            str += component[elements[i].index].str(elements[i]);
          }
          // console.log(stateNum);
          if (stateNum == 2) {
            $(self).find('.html-show').hide();
            $(self).find('.show').show();
            $(self).find('.change-to-html').html('切换为html模式');
            stateNum = 0;
          } else {
            $(self).find('.html-show').show().val(HTMLFormat($('#' + textId).val()));
            $(self).find('.change-to-html').html('切换为预览模式');
            $(self).find('.show').hide();
          }
        });


        var select = 0;
        var insert = 0;

        window.onmousemove = mousemove;

        function mousemove (event) {
          // var disX = event.clientX;
          var disY = event.clientY;
          // console.log(disY);
          for (var i = 0; i < elements.length; i++) {
            if (disY <= $(elements[i]).offset().top + $(elements[i]).height() && disY >= $(elements[i]).offset().top + 10 && $(elements[i]).css('position') != 'absolute' && elements[i].key == '模块') {
              for (var j = 0; j < elements[i].elements.length; j++) {
                if (disY <= $(elements[i].elements[j]).offset().top + $(elements[i].elements[j]).height() && disY >= $(elements[i].elements[j]).offset().top + 10 && $(elements[i].elements[j]).css('position') != 'absolute') {
                  $(elements[i].elements[j]).css('border', '2px solid #28A3EF');
                  $(elements[i].elements[j]).siblings().css('border', '1px solid #999');
                  $('.note').parent().css('border', 'none');
                  $('.module div').eq(0).css('border', 'none');
                  $('.module1 div').eq(0).css('border', 'none');
                  elements[i].select = j;
                } else if (disY <= $(elements[i].elements[0]).offset().top) {
                  elements[i].select = -1;
                } else {
                  $(elements[i].elements[j]).css('border', '1px solid #999');
                }
                // console.log(elements[i].select)
              }
              // console.log(elements[i].select);
              $(elements[i]).css('border', '2px solid #28A3EF');
              $(elements[i]).siblings().css('border', '1px solid #999');
              $('.note').parent().css('border', 'none');
              $('.module div').eq(0).css('border', 'none');
              $('.module1 div').eq(0).css('border', 'none');
              select = i;
              insert = 0;
              // console.log(select);
              // console.log(i)
            } else if (disY <= $(elements[i]).offset().top + $(elements[i]).height() && disY >= $(elements[i]).offset().top + 10 && $(elements[i]).css('position') != 'absolute') {
              $(elements[i]).css('border', '2px solid #28A3EF');
              $(elements[i]).siblings().css('border', '1px solid #999');
              $('.note').parent().css('border', 'none');
              $('.module div').eq(0).css('border', 'none');
              $('.module1 div').eq(0).css('border', 'none');
              select = i;
              insert = 0;
              // console.log(select);
              // console.log(i)
            } else if (disY >= $(elements[i]).offset().top && disY <= $(elements[i]).offset().top + 10 && $(elements[i]).css('position') != 'absolute') {
              $(elements[i]).css('border', '1px solid #999');
              $(elements[i]).css('borderTop', '4px solid red');
              $(elements[i]).siblings().css('border', '1px solid #999');
              $('.note').parent().css('border', 'none');
              $('.module div').eq(0).css('border', 'none');
              $('.module1 div').eq(0).css('border', 'none');
              insert = i;
              // console.log('insert:' + insert);
            } else if (disY >= $(elements[elements.length - 1]).offset().top + $(elements[elements.length - 1]).height()) {
              if (elements[i].key == '模块') {
                $(elements[i]).css('border', '2px solid red');
              } else {
                $(elements[i]).css('border', '1px solid #999');
              }
              // console.log('length');
              select = elements.length;
            }

            // else{
            //     insert = 0;
            // }

          }
        }


        function submit () {
          // componentEditor = JSON.parse($('#editor_content').val());
          // console.log($('#editor_content').val());
          // console.log(componentEditor);
          if (componentEditor) {
            var componentEditorLen = componentEditor.length;
            for (var i = 0; i < componentEditorLen; i++) {
              // if(!componentEditor[i].ele){
              componentEditor[i].val = inputValue(componentEditor[i].ele);
              // componentEditor[i].ele = null;
              // }
              if (componentEditor[i].componentChild) {
                var componentEditorChildLen = componentEditor[i].componentChild.length;
                for (var j = 0; j < componentEditorChildLen; j++) {
                  // if(!componentEditor[i].componentChild[j].ele){
                  componentEditor[i].componentChild[j].val = inputValue(componentEditor[i].componentChild[j].ele);
                  // componentEditor[i].componentChild[j].ele = null;
                  // }
                  if (componentEditor[i].componentChild[j].componentChild) {
                    var componentEditorGrandsonLen = componentEditor[i].componentChild[j].componentChild.length;
                    for (var k = 0; k < componentEditorGrandsonLen; k++) {
                      // if(componentEditor[i].componentChild[j].componentChild[k].val){
                      componentEditor[i].componentChild[j].componentChild[k].val = inputValue(componentEditor[i].componentChild[j].componentChild[k].ele);
                      // componentEditor[i].componentChild[j].componentChild[k].ele = null;
                      // }
                    }
                    // console.log(componentEditor[i].componentChild[j].componentChild)
                  }
                  // console.log(componentEditor[i].componentChild);

                }
              }

            }
          }
          var str = '';
          for (var i = 0; i < elements.length; i++) {

            if (component[elements[i].index].component_name == '快速添加商品静态化') {
              component[elements[i].index].str(elements[i]);
              // console.log($(elements[i]).attr('data-value'));
              str += $(elements[i]).attr('data-value');
            } else {
              /* 标记组件，使两边关联起来 */
              var _$el = {elements: elements}
              var s = getOuterHTML(component, _$el, i);

              str += s

              // str += component[elements[i].index].str(elements[i]);

              /* by mos */

            }

          }

          var $show = $('.show');
          var $bd = $show.contents().find('body')
          $bd.html(Util.parseImageTag(str) + '<script src="http://m.meijiabang.cn/js/single-page/single-page-lib.js"></script><script></script>');
          /* =========== 实时刷新 ========= */
          if ($show[0] && $show[0].contentWindow && $show[0].contentWindow.App && $show[0].contentWindow.App.Util && typeof $show[0].contentWindow.App.Util.init === 'function') {
            $show[0].contentWindow.App.Util.init()
            // 兼容锚点
            // $show[0].contentWindow.onscroll = function () {

            // }
          } else {
            console.log('刷新失败')
          }
          /* by mos */

          $('#' + textId).val(Util.parseImageTag(str));
          var editorStr = JSON.stringify(componentEditor);
          // console.log(componentEditor);
          $('#' + editorId).val(editorStr);
          $(self).find('.html-show').hide();
        }


        // window.onkeydown = function (ev) {
        //     // console.log('key' + ev.keyCode);
        //     if(ev.keyCode == 27){
        //         // console.log(elements[select].elements && elements[select].select);
        //         if(elements[select].elements && elements[select].elements.length && elements[select].select != -1){
        //             // if(elements[select].elements[elements[select].select].elements && elements[select].elements[elements[select].select].elements.length && elements[select].select != -1)
        //             // $(elements[select].elements[elements[select].select].elements[elements[select].elements[elements[select].select].length - 1]).remove();
        //             if(elements[select].elements[elements[select].select].elements && elements[select].elements[elements[select].select].elements.length != 0){
        //                 console.log(elements[select].elements[elements[select].select].elements[elements[select].elements[elements[select].select].elements.length - 1]);
        //                 $(elements[select].elements[elements[select].select].elements[elements[select].elements[elements[select].select].elements.length - 1]).remove();
        //                 elements[select].elements[elements[select].select].elements.pop();
        //                 componentEditor[select].componentChild[elements[select].select].componentChild.pop();
        //             }else{
        //                 $(elements[select].elements[elements[select].select]).remove();
        //                 elements[select].elements.splice(elements[select].select, 1);
        //                 componentEditor[select].componentChild.splice(elements[select].select,1);
        //             }
        //
        //         }else{
        //             $(elements[select]).remove();
        //             elements.splice(select, 1);
        //             componentEditor.splice(select,1);
        //         }
        //
        //         submit();
        //
        //         console.log(elements)
        //     }
        // };


        // window.onkeydown = function (ev) {
        //     console.log('key' + ev.keyCode);
        //     if(ev.keyCode == 27){
        //         // console.log(elements[select].elements && elements[select].select);
        //
        //     }
        // };


        // console.log(componentEditor);
        // $(document).on('keyup',function (ev) {
        //     console.log('key' + ev.keyCode);
        //     return false;
        //     if(ev.keyCode == 27){
        //         console.log(2);
        //         // console.log(elements[select].elements && elements[select].select);
        //         $(oLi).remove();
        //         document.onmouseup = null;
        //         document.onmousemove = null;
        //     }
        // });

        // $(document).mousedown(function(e){
        //     alert(e.which) // 1 = 鼠标左键 left; 2 = 鼠标中键; 3 = 鼠标右键
        //
        //     return false;//阻止链接跳转
        // });
        var currentOLi;
        $(document).on('mousedown', function (e) {
          // alert(e.which) // 1 = 鼠标左键 left; 2 = 鼠标中键; 3 = 鼠标右键
          // console.log(currentOLi);
          if (e.which == 3) {
            $('.editor #box').one('contextmenu', function () {
              return false;
            });
            $(currentOLi).remove();
            document.onmouseup = null;
            document.onmousemove = null;
          }

          // return false;//阻止链接跳转
        });


        function addElement (oLi) {

          // $(document).on('keydown',function (ev) {
          //     // console.log('key' + ev.keyCode);
          //     if(ev.keyCode == 27){
          //         console.log(2);
          //         // console.log(elements[select].elements && elements[select].select);
          //         $(oLi).remove();
          //         document.onmouseup = null;
          //         document.onmousemove = null;
          //     }
          //     // return false;
          // });


          currentOLi = oLi;
          oLi.setAttribute('data-module-id', new Date().getTime())

          document.onmousemove = function (event) {
            var disX = event.clientX;
            var disY = event.clientY;
            var editorLeft = $(self).find('.editor').offset().left;
            var editorTop = $(self).find('.editor').offset().top;
            // console.log(disX + ':' + disY + '-' + $(self).find('.editor').offset().left + ':' + $(self).find('.editor').offset().top);
            $(oLi).css('top', ((disY - editorTop) - $(oLi).height() / 2) + 'px');
            $(oLi).css('left', (disX - editorLeft - $(oLi).width() / 2) + 'px');
            // setTimeout(function () {
            document.onmouseup = function () {
              // console.log(select);
              var editorEle = {};
              // console.log(elements[select] && elements[select].select != null && elements[select].select != -1 && elements[select].elements[elements[select].select]);
              if (elements[select] && elements[select].select != null && elements[select].select != -1 && elements[select].elements[elements[select].select] && elements[select].elements[elements[select].select].key == '模块') {
                // console.log(elements[select].select);
                $(elements[select].elements[elements[select].select]).append(oLi);
                $(elements[select].elements[elements[select].select]).css('border', '2px solid red');
                elements[select].elements[elements[select].select].elements.push(oLi);
                if (!componentEditor[select].componentChild[elements[select].select].componentChild) {
                  componentEditor[select].componentChild[elements[select].select].componentChild = [];
                }
                editorEle.componentIndex = oLi.index;
                editorEle.ele = oLi;
                componentEditor[select].componentChild[elements[select].select].componentChild.push(editorEle);
                $(oLi).css({
                  position: 'relative',
                  top: '0',
                  left: '0'
                });
              } else if (elements[select] && elements[select].key == '模块') {
                if (insert == 0) {
                  // console.log(elements[select]);
                  $(elements[select]).append(oLi);
                  // $(elements[i]).css('border','2px solid red');
                  $(oLi).css({
                    position: 'relative',
                    top: '0',
                    left: '0'
                  });
                  elements[select].elements.push(oLi);
                  // editorEle.componentIndex = oLi.index;
                  if (!componentEditor[select].componentChild) {
                    componentEditor[select].componentChild = [];
                  }
                  editorEle.componentIndex = oLi.index;
                  editorEle.ele = oLi;
                  componentEditor[select].componentChild.push(editorEle);
                } else {
                  $(elements[insert]).before(oLi);
                  $(oLi).css({
                    position: 'relative',
                    top: '0',
                    left: '0'
                  });
                  // console.log(insert);
                  elements.splice(insert, 0, oLi);
                  editorEle.componentIndex = oLi.index;
                  editorEle.ele = oLi;
                  componentEditor.splice(insert, 0, editorEle);

                  // componentEditor.splice(insert,1);
                }
              } else {
                if (insert == 0) {
                  $(self).find('#box').append(oLi);
                  $(oLi).css({
                    position: 'relative',
                    top: '0',
                    left: '0'
                  });
                  elements.push(oLi);
                  editorEle.componentIndex = oLi.index;
                  editorEle.ele = oLi;
                  console.log('add', componentEditor);
                  componentEditor.push(editorEle);
                } else {
                  $(elements[insert]).before(oLi);
                  $(oLi).css({
                    position: 'relative',
                    top: '0',
                    left: '0'
                  });
                  // console.log(insert);
                  elements.splice(insert, 0, oLi);
                  editorEle.componentIndex = oLi.index;
                  editorEle.ele = oLi;
                  componentEditor.splice(insert, 0, editorEle);
                  // componentEditor.splice(insert,1);
                }
              }


              // console.log('元素:',elements);
              drawColor(elements);

              // console.log(componentEditor);
              // console.log('提交');
              submit();
              // console.log('按键');
              // console.log($(self).find('.close'));

              // $(self).find('.close').off();
              $(oLi).find('.close').on('click', deteEle);

              // $(self).find('.update').on('click',function () {
              //     console.log('更新');
              //     submit();
              // });


              document.onmouseup = null;
              document.onmousemove = null;
              currentOLi = null;
            };
            // },100);

          };
        }

        $(self).find('.close').off();
        $(self).find('.close').on('click', deteEle);

        function deteEle () {
          // console.log(this);
          $(self).find('.confirm-popup').show();
          window.onmousemove = null;
          $(self).find('.confirm-popup .yes').off();
          $(self).find('.confirm-popup .yes').one('click', [select], function (ev) {
            // console.log(this);
            $(self).find('.confirm-popup').hide();
            var select = ev.data[0];
            // console.log(select);
            if (elements[select] && elements[select].elements && elements[select].elements.length && elements[select].select != -1) {
              // if(elements[select].elements[elements[select].select].elements && elements[select].elements[elements[select].select].elements.length && elements[select].select != -1)
              // $(elements[select].elements[elements[select].select].elements[elements[select].elements[elements[select].select].length - 1]).remove();
              if (elements[select].elements[elements[select].select].elements && elements[select].elements[elements[select].select].elements.length != 0) {
                // console.log(elements[select].elements[elements[select].select].elements[elements[select].elements[elements[select].select].elements.length - 1]);
                $(elements[select].elements[elements[select].select].elements[elements[select].elements[elements[select].select].elements.length - 1]).remove();
                elements[select].elements[elements[select].select].elements.pop();
                componentEditor[select].componentChild[elements[select].select].componentChild.pop();
              } else {
                $(elements[select].elements[elements[select].select]).remove();
                elements[select].elements.splice(elements[select].select, 1);
                componentEditor[select].componentChild.splice(elements[select].select, 1);
              }

            } else {
              // console.log('删除:',elements[select]);
              $(elements[select]).remove();
              elements.splice(select, 1);
              componentEditor.splice(select, 1);
            }
            // console.log(1)
            submit();

            // console.log(elements);
            // console.log(1);
            setTimeout(function () {
              window.onmousemove = mousemove;
            }, 100)
          });
          $(self).find('.confirm-popup .no').one('click', function () {
            $(self).find('.confirm-popup').hide();
          });
          // if(elements[select] && elements[select].elements && elements[select].elements.length && elements[select].select != -1){
          //     // if(elements[select].elements[elements[select].select].elements && elements[select].elements[elements[select].select].elements.length && elements[select].select != -1)
          //     // $(elements[select].elements[elements[select].select].elements[elements[select].elements[elements[select].select].length - 1]).remove();
          //     if(elements[select].elements[elements[select].select].elements && elements[select].elements[elements[select].select].elements.length != 0){
          //         console.log(elements[select].elements[elements[select].select].elements[elements[select].elements[elements[select].select].elements.length - 1]);
          //         $(elements[select].elements[elements[select].select].elements[elements[select].elements[elements[select].select].elements.length - 1]).remove();
          //         elements[select].elements[elements[select].select].elements.pop();
          //         componentEditor[select].componentChild[elements[select].select].componentChild.pop();
          //     }else{
          //         $(elements[select].elements[elements[select].select]).remove();
          //         elements[select].elements.splice(elements[select].select, 1);
          //         componentEditor[select].componentChild.splice(elements[select].select,1);
          //     }
          //
          // }else{
          //     $(elements[select]).remove();
          //     elements.splice(select, 1);
          //     componentEditor.splice(select,1);
          // }
          //
          // submit();
          //
          // console.log(elements);
          // console.log(1);
        }

        function drawColor (ele) {
          for (var k = 0; k < ele.length; k++) {
            $(ele[k]).css('backgroundColor', '#E0E0E0');
            if (ele[k].elements) {
              // console.log('子:',ele[k].elements);
              for (var i = 0; i < ele[k].elements.length; i++) {
                $(ele[k].elements[i]).css('backgroundColor', '#D7D7D7');
                if (ele[k].elements[i].elements) {
                  // console.log('子子:',ele[k].elements[i].elements);
                  for (var j = 0; j < ele[k].elements[i].elements.length; j++) {
                    $(ele[k].elements[i].elements[j]).css('backgroundColor', '#BDBDBD');
                  }
                }
              }
            }
          }

        }

        function html2Escape (sHtml) {
          return sHtml.replace(/[<>&"]/ig, function (c) {
            return {'<': '&lt;', '>': '&gt;', '&': '&amp;', '"': '&quot;'}[c];
          });
        }

        var HTMLFormat = (function () {
          function style_html (html_source, indent_size, indent_character, max_char) {
            var Parser, multi_parser;

            function Parser () {

              this.pos = 0;
              this.token = '';
              this.current_mode = 'CONTENT';
              this.tags = {
                parent: 'parent1',
                parentcount: 1,
                parent1: ''
              };
              this.tag_type = '';
              this.token_text = this.last_token = this.last_text = this.token_type = '';


              this.Utils = {
                whitespace: "\n\r\t ".split(''),
                single_token: 'br,input,link,meta,!doctype,basefont,base,area,hr,wbr,param,img,isindex,?xml,embed'.split(','),
                extra_liners: 'head,body,/html'.split(','),
                in_array: function (what, arr) {
                  for (var i = 0; i < arr.length; i++) {
                    if (what === arr[i]) {
                      return true;
                    }
                  }
                  return false;
                }
              };

              this.get_content = function () {
                var char = '';
                var content = [];
                var space = false;
                while (this.input.charAt(this.pos) !== '<') {
                  if (this.pos >= this.input.length) {
                    return content.length ? content.join('') : ['', 'TK_EOF'];
                  }

                  char = this.input.charAt(this.pos);
                  this.pos++;
                  this.line_char_count++;


                  if (this.Utils.in_array(char, this.Utils.whitespace)) {
                    if (content.length) {
                      space = true;
                    }
                    this.line_char_count--;
                    continue;
                  } else if (space) {
                    if (this.line_char_count >= this.max_char) {
                      content.push('\n');
                      for (var i = 0; i < this.indent_level; i++) {
                        content.push(this.indent_string);
                      }
                      this.line_char_count = 0;
                    } else {
                      content.push(' ');
                      this.line_char_count++;
                    }
                    space = false;
                  }
                  content.push(char);
                }
                return content.length ? content.join('') : '';
              }

              this.get_script = function () {
                var char = '';
                var content = [];
                var reg_match = new RegExp('\<\/script' + '\>', 'igm');
                reg_match.lastIndex = this.pos;
                var reg_array = reg_match.exec(this.input);
                var end_script = reg_array ? reg_array.index : this.input.length;
                while (this.pos < end_script) {
                  if (this.pos >= this.input.length) {
                    return content.length ? content.join('') : ['', 'TK_EOF'];
                  }

                  char = this.input.charAt(this.pos);
                  this.pos++;


                  content.push(char);
                }
                return content.length ? content.join('') : '';
              }

              this.record_tag = function (tag) {
                if (this.tags[tag + 'count']) {
                  this.tags[tag + 'count']++;
                  this.tags[tag + this.tags[tag + 'count']] = this.indent_level;
                } else {
                  this.tags[tag + 'count'] = 1;
                  this.tags[tag + this.tags[tag + 'count']] = this.indent_level;
                }
                this.tags[tag + this.tags[tag + 'count'] + 'parent'] = this.tags.parent;
                this.tags.parent = tag + this.tags[tag + 'count'];
              }

              this.retrieve_tag = function (tag) {
                if (this.tags[tag + 'count']) {
                  var temp_parent = this.tags.parent;
                  while (temp_parent) {
                    if (tag + this.tags[tag + 'count'] === temp_parent) {
                      break;
                    }
                    temp_parent = this.tags[temp_parent + 'parent'];
                  }
                  if (temp_parent) {
                    this.indent_level = this.tags[tag + this.tags[tag + 'count']];
                    this.tags.parent = this.tags[temp_parent + 'parent'];
                  }
                  delete this.tags[tag + this.tags[tag + 'count'] + 'parent'];
                  delete this.tags[tag + this.tags[tag + 'count']];
                  if (this.tags[tag + 'count'] == 1) {
                    delete this.tags[tag + 'count'];
                  } else {
                    this.tags[tag + 'count']--;
                  }
                }
              };

              this.get_tag = function () {
                var char = '';
                var content = [];
                var space = false;

                do {
                  if (this.pos >= this.input.length) {
                    return content.length ? content.join('') : ['', 'TK_EOF'];
                  }

                  char = this.input.charAt(this.pos);
                  this.pos++;
                  this.line_char_count++;

                  if (this.Utils.in_array(char, this.Utils.whitespace)) {
                    space = true;
                    this.line_char_count--;
                    continue;
                  }

                  if (char === "'" || char === '"') {
                    if (!content[1] || content[1] !== '!') {
                      char += this.get_unformatted(char);
                      space = true;
                    }
                  }

                  if (char === '=') {
                    space = false;
                  }

                  if (content.length && content[content.length - 1] !== '=' && char !== '>' && space) {
                    if (this.line_char_count >= this.max_char) {
                      this.print_newline(false, content);
                      this.line_char_count = 0;
                    } else {
                      content.push(' ');
                      this.line_char_count++;
                    }
                    space = false;
                  }
                  content.push(char);
                } while (char !== '>');

                var tag_complete = content.join('');
                var tag_index;
                if (tag_complete.indexOf(' ') != -1) {
                  tag_index = tag_complete.indexOf(' ');
                } else {
                  tag_index = tag_complete.indexOf('>');
                }
                var tag_check = tag_complete.substring(1, tag_index).toLowerCase();
                if (tag_complete.charAt(tag_complete.length - 2) === '/' || this.Utils.in_array(tag_check, this.Utils.single_token)) {
                  this.tag_type = 'SINGLE';
                } else if (tag_check === 'script') {
                  this.record_tag(tag_check);
                  this.tag_type = 'SCRIPT';
                } else if (tag_check === 'style') {
                  this.record_tag(tag_check);
                  this.tag_type = 'STYLE';
                } else if (tag_check.charAt(0) === '!') {
                  if (tag_check.indexOf('[if') != -1) {
                    if (tag_complete.indexOf('!IE') != -1) {
                      var comment = this.get_unformatted('-->', tag_complete);
                      content.push(comment);
                    }
                    this.tag_type = 'START';
                  } else if (tag_check.indexOf('[endif') != -1) {
                    this.tag_type = 'END';
                    this.unindent();
                  } else if (tag_check.indexOf('[cdata[') != -1) {
                    var comment = this.get_unformatted(']]>', tag_complete);
                    content.push(comment);
                    this.tag_type = 'SINGLE';
                  } else {
                    var comment = this.get_unformatted('-->', tag_complete);
                    content.push(comment);
                    this.tag_type = 'SINGLE';
                  }
                } else {
                  if (tag_check.charAt(0) === '/') {
                    this.retrieve_tag(tag_check.substring(1));
                    this.tag_type = 'END';
                  } else {
                    this.record_tag(tag_check);
                    this.tag_type = 'START';
                  }
                  if (this.Utils.in_array(tag_check, this.Utils.extra_liners)) {
                    this.print_newline(true, this.output);
                  }
                }
                return content.join('');
              }

              this.get_unformatted = function (delimiter, orig_tag) {
                if (orig_tag && orig_tag.indexOf(delimiter) != -1) {
                  return '';
                }
                var char = '';
                var content = '';
                var space = true;
                do {


                  char = this.input.charAt(this.pos);
                  this.pos++

                  if (this.Utils.in_array(char, this.Utils.whitespace)) {
                    if (!space) {
                      this.line_char_count--;
                      continue;
                    }
                    if (char === '\n' || char === '\r') {
                      content += '\n';
                      for (var i = 0; i < this.indent_level; i++) {
                        content += this.indent_string;
                      }
                      space = false;
                      this.line_char_count = 0;
                      continue;
                    }
                  }
                  content += char;
                  this.line_char_count++;
                  space = true;


                } while (content.indexOf(delimiter) == -1);
                return content;
              }

              this.get_token = function () {
                var token;

                if (this.last_token === 'TK_TAG_SCRIPT') {
                  var temp_token = this.get_script();
                  if (typeof temp_token !== 'string') {
                    return temp_token;
                  }
                  //token = js_beautify(temp_token, this.indent_size, this.indent_character, this.indent_level);
                  //return [token, 'TK_CONTENT'];
                  return [temp_token, 'TK_CONTENT'];
                }
                if (this.current_mode === 'CONTENT') {
                  token = this.get_content();
                  if (typeof token !== 'string') {
                    return token;
                  } else {
                    return [token, 'TK_CONTENT'];
                  }
                }

                if (this.current_mode === 'TAG') {
                  token = this.get_tag();
                  if (typeof token !== 'string') {
                    return token;
                  } else {
                    var tag_name_type = 'TK_TAG_' + this.tag_type;
                    return [token, tag_name_type];
                  }
                }
              }

              this.printer = function (js_source, indent_character, indent_size, max_char) {
                this.input = js_source || '';
                this.output = [];
                this.indent_character = indent_character || ' ';
                this.indent_string = '';
                this.indent_size = indent_size || 2;
                this.indent_level = 0;
                this.max_char = max_char || 70;
                this.line_char_count = 0;
                for (var i = 0; i < this.indent_size; i++) {
                  this.indent_string += this.indent_character;
                }

                this.print_newline = function (ignore, arr) {
                  this.line_char_count = 0;
                  if (!arr || !arr.length) {
                    return;
                  }
                  if (!ignore) {
                    while (this.Utils.in_array(arr[arr.length - 1], this.Utils.whitespace)) {
                      arr.pop();
                    }
                  }
                  arr.push('\n');
                  for (var i = 0; i < this.indent_level; i++) {
                    arr.push(this.indent_string);
                  }
                }


                this.print_token = function (text) {
                  this.output.push(text);
                }

                this.indent = function () {
                  this.indent_level++;
                }

                this.unindent = function () {
                  if (this.indent_level > 0) {
                    this.indent_level--;
                  }
                }
              }
              return this;
            }


            multi_parser = new Parser();
            multi_parser.printer(html_source, indent_character, indent_size);
            while (true) {
              var t = multi_parser.get_token();
              multi_parser.token_text = t[0];
              multi_parser.token_type = t[1];

              if (multi_parser.token_type === 'TK_EOF') {
                break;
              }


              switch (multi_parser.token_type) {
                case 'TK_TAG_START':
                case 'TK_TAG_SCRIPT':
                case 'TK_TAG_STYLE':
                  multi_parser.print_newline(false, multi_parser.output);
                  multi_parser.print_token(multi_parser.token_text);
                  multi_parser.indent();
                  multi_parser.current_mode = 'CONTENT';
                  break;
                case 'TK_TAG_END':
                  multi_parser.print_newline(true, multi_parser.output);
                  multi_parser.print_token(multi_parser.token_text);
                  multi_parser.current_mode = 'CONTENT';
                  break;
                case 'TK_TAG_SINGLE':
                  multi_parser.print_newline(false, multi_parser.output);
                  multi_parser.print_token(multi_parser.token_text);
                  multi_parser.current_mode = 'CONTENT';
                  break;
                case 'TK_CONTENT':
                  if (multi_parser.token_text !== '') {
                    multi_parser.print_newline(false, multi_parser.output);
                    multi_parser.print_token(multi_parser.token_text);
                  }
                  multi_parser.current_mode = 'TAG';
                  break;
              }
              multi_parser.last_token = multi_parser.token_type;
              multi_parser.last_text = multi_parser.token_text;
            }
            return multi_parser.output.join('');
          }

          return function (data) {
            var dataHolder = ['__dataHolder_', [Math.random(), Math.random(), Math.random(), Math.random()].join('_').replace(/[^0-9]/g, '_'), '_'].join('_');
            var dataHolders = {};
            var index = 0;
            data = data.replace(/(\")(data:[^\"]*)(\")/g, function ($0, $1, $2, $3) {
              var name = dataHolder + index++;
              dataHolders[name] = $2;
              return $1 + name + $3;
            })
            data = style_html(data, 1, '\t', 0x10000000);
            data = data.replace(new RegExp(dataHolder + '[0-9]+', 'g'), function ($0) {
              return dataHolders[$0];
            });

            return data;
          }
        })();
      });
    };
  }

  return init();
});

define('component/datetime-picker', ['common/util'], function (require) {
    "use strict";

    var componentName = 'datetime-picker';

    function init($container) {
        $container = $container || $(document);
        var $els = $container.find('[data-component="' + componentName + '"]');
        $els.datetimepicker()
    }

    return init;
});
define('component/edit-data', ['common/util'], function (require) {
    "use strict";

    var Util = require('common/util');
    var componentName = 'edit-data';

    function init($container) {
        $container = $container || $(document);

        var $els = $container.find('[data-component="' + componentName + '"]');

        $els.each(function(i, el){
            var key = $(el).attr('data-key') || 'id';
            $(el).on('click', function(){
                editData(this, 'checkList', key, $(this).attr('data-action'));
            });
        });

    }

    function editData(obj, id, pk, actionName)
    {
        actionName = actionName || 'edit';
        if(isNaN(id))
            id = $("#" + id + " input:checked[name='key']").eq(0).val();

        if(!id)
            return false;

        if(pk == null)
            pk = 'id';

        var fun = function(){
            location.href = APP+'?'+VAR_MODULE+'='+CURR_MODULE+'&'+VAR_CONTROLLER+'='+CURR_CONTROLLER+'&'+VAR_ACTION+'='+actionName+'&'+pk+'=' + id;
        };

        setTimeout(fun,1);
    }

    return init;
});
define('component/edit-item', ['common/util'], function (require) {
    "use strict";

    var Util = require('common/util');
    var componentName = 'edit-item';

    function init($container) {
        $container = $container || $(document);

        var $els = $container.find('[data-component="' + componentName + '"]');

        $els.each(function(i, el){
            var id = $(el).attr('data-id') || 0;
            var pk = $(el).attr('data-pk') || 'id';
            $(el).on('click', function(){
                editData(this, id, pk, $(this).attr('data-action'));
            });
        });

    }

    function editData(obj, id, pk, actionName)
    {
        actionName = actionName || 'edit';

        if(!id)
            return false;

        if(pk == null)
            pk = 'id';

        var fun = function(){
            location.href = APP+'?'+VAR_MODULE+'='+CURR_MODULE+'&'+VAR_CONTROLLER+'='+CURR_CONTROLLER+'&'+VAR_ACTION+'='+actionName+'&'+pk+'=' + id;
        };

        setTimeout(fun,1);
    }

    return init;
});
define('component/image-upload', ['common/util'], function (require) {
    "use strict";

    var Util = require('common/util');
    var componentName = 'image-upload';

    function init($container) {
        $container = $container || $(document);

        var $els = $container.find('[data-component="' + componentName + '"]');

        $els.each(function (i, el) {
            var imgCount = parseInt($(el).attr('data-count')) || 1000;
            var imgFormat = $(el).attr('data-format') || 'shortTag';
            var oldValue = $(el).attr('data-value');
            var oldImg = [];
            if (oldValue) {
                $(oldValue.split(',')).each(function (i, val) {
                    oldImg.push('<div class="uploaded-image"><img src="' + Util.parseImageTag(val, imgFormat) + '" /><input type="hidden" name="' + $(el).attr('data-name') + (imgCount > 1 ? '[]' : '') + '" value="' + val + '"></div>');
                })
            }

            $(el).html('<div class="uploaded-wrap">' + oldImg.join('') + '</div><div class="upload-btn"><i class="sui-icon icon-touch-plus"></i></div>');
            if ($(el).find('.uploaded-wrap img').length >= imgCount) {
                $(el).find('.upload-btn').hide();
            }

            $(el).on('click', '.upload-btn', function () {
                $(this).imagePicker({
                    objType: $(el).attr('data-obj-type'),
                    objId: $(el).attr('data-obj-id'),
                    callback: function (obj) {
                        $(el).find('.uploaded-wrap').append('<div class="uploaded-image"><img src="' + obj.url + '" /><input type="hidden" name="' + $(el).attr('data-name') + (imgCount > 1 ? '[]' : '') + '" value="' + obj[imgFormat] + '"></div>');
                        if ($(el).find('.uploaded-wrap img').length >= imgCount) {
                            $(el).find('.upload-btn').hide();
                        }
                    }
                })
            });

            $(el).on('click', '.uploaded-image', function () {
                var self = this;
                $(this).imagePicker({
                    objType: $(el).attr('data-obj-type'),
                    objId: $(el).attr('data-obj-id'),
                    callback: function (obj) {
                        $(self).find('img').attr('src', obj.url);
                        $(self).find('input').attr('value', obj[imgFormat]);
                    }
                })
            });
        })
    }

    return init;
});
/**
 * Created by richard on 16/9/28.
 */
define('component/input-group', ['common/util'], function (require) {

    var Util = require('common/util');
    var componentName = 'input-group';

    function init($container) {
        $container = $container || $(document);

        var $els = $container.find('[data-component="' + componentName + '"]');
        var selected = $('[data-component="' + componentName + '"]').val();

        var pickerModal = '<div id="contentSelector" tabindex="-1" role="dialog" data-hasfoot="false" data-backdrop="false" class="sui-modal hide fade"><div class="modal-dialog"><div class="modal-content"><div class="modal-header"><button type="button" data-dismiss="modal" aria-hidden="true" class="sui-close">×</button><h4 id="contentPickerLabel" class="modal-title"><div class="title">标签</div></h4></div><div class="modal-body"><div class="content"><select class="content-multiple" multiple></select><div class="add-content">请输入内容: <input type="text" name="add-content" placeholder="请输入内容"><span class="add">+</span></div></div></div><div class="modal-footer"><input type="button" data-ok="modal" class="sui-btn btn-danger btn-large js-warning" value="重置"> <input type="button" data-ok="modal" class="sui-btn btn-primary btn-large js-ok" value="确定"> <input type="hidden" id="content-list" name="content-list"></div></div></div></div>';

        $('body').append(pickerModal);

        $els.each(function (i, el) {
            $(el).attr('data-toggle', 'modal');
            $(el).attr('data-target', '#contentSelector');
            selectorInit();
        });

        $('.modal-footer .js-ok').click(function () {
            $('.content .select2-search--inline li').html();
            var len = $('.content .select2-selection__choice').length;
            var str = '';
            for (var i = 0; i < len - 1; i++) {
                str = str + $('.content .select2-selection__choice').eq(i).text().substring(1) + ',';
            }
            str = str + $('.content .select2-selection__choice').eq(len - 1).text().substring(1);
            if (len != 0) {
                $els.eq(0).val(str);
            } else {
                $els.eq(0).val('');
            }
        });

        $('.modal-footer .btn-danger.js-warning').click(function () {
            $els.eq(0).val('');
            $('#tag-list').val('');
        });

        if (selected) {
            var selectedStr = selected.split(",");

            $.each(selectedStr, function (n, value) {
                $('.content .select2-search--inline').before('<li class="select2-selection__choice"><span class="select2-selection__choice1__remove">×</span>' + value + '</li>');
            });
        }
    }

    function selectorInit() {

        $(".content-multiple").select2({
            tags: true,
            tokenSeparators: [',']
        });

        $('.add-content .add').click(function () {
            var str = $('.add-content input').val();
            $('.content .select2-search--inline').before('<li class="select2-selection__choice"><span class="select2-selection__choice1__remove">×</span>' + str + '</li>');
            $('.add-content input').val('');
        });

        $('.select2-selection__rendered').on('click', '.select2-selection__choice1__remove', function () {
            $(this).parent().remove();
        });

        $('.content').click(function () {
            $('div:last').next().find('span').remove();
            $('.selection span').css('borderRadius', '4px');
        });
    }

    return init;
});

define('component/relative-goods-group', ['common/util'], function(require){
    var Util = require('common/util'),
        componentName = 'relative-goods-group';


    var  RelativeGoods = {
        options: {},
        Obj: {},
        template: {
            base: '<style>.table-align-center th,.table-align-center td{text-align:center;max-width:300px;}.relative-goods{padding:10px;border:1px solid #ccc;margin-bottom:10px} [data-component=relative-goods-group] .relative-goods-table{max-height:296px;display: block;}.relative-goods-table table{display:none}.relative-goods-table .active{display:table}</style><span class="sui-btn btn-block btn-xlarge btn-primary js-add-goods-group">添加组</span><div class="goods-group"></div><div class="action-area"><div id="action-add-goods" tabindex="-1" role="dialog" data-hasfoot="false" class="sui-modal hide fade"><div class="modal-dialog"><div class="modal-content"><div class="modal-header"><button type="button" data-dismiss="modal" aria-hidden="true" class="sui-close">×</button><h4 id="" class="modal-title">添加商品</h4></div><div class="modal-body relative-goods-table" id="relative-goods-table"><table class="sui-table table-bordered active" id="relative-goods-table1"><tr><th>GOODS_ID</th><td><input type="text" class="textinput" size="30" name="temp_goods_id" value=""> <span class="sui-btn btn-bordered btn-primary js-search-goods">搜索</span></td></tr><tr><th>商品名称</th><td><input type="text" class="textinput" size="30" name="temp_name"></td></tr><tr><th>商品描述</th><td><input type="text" class="textinput" size="30" name="temp_desc"></td></tr><tr><th>商品图片</th><td><img style="max-height: 50px" data-goods-cover src="" /></td></tr><tr><td colspan="2" style="text-align: center"><span class="sui-btn btn-bordered btn-primary js-next" href="#relative-goods-table2">下一步</span><!--<span class="sui-btn btn-bordered btn-primary js-reset" href="#relative-goods-table2">重置</span>--></td></tr></table><table class="sui-table table-bordered table-align-center " id="relative-goods-table2"><thead><tr><th>选项</th><th>SPEC_ID</th><th>规格组合名称</th><th>数量</th></tr></thead><tbody><tr><td><input type="checkbox" name="temp_spec_id" value="{{id}}"></td><td>1</td><td>红色</td><td>16ml</td><td>1</td><td>2</td><td>3</td><td><input type="text" name="temp_spec_count" size="3" value="1"></td></tr><tr><td colspan="8"><span class="sui-btn btn-bordered btn-primary js-prev" href="#relative-goods-table1">上一步</span>&nbsp;&nbsp;<span class="sui-btn btn-bordered btn-primary js-save-goods" href="#relative-goods-table2">保存</span></td></tr></tbody></table></div></div></div></div></div><input type="hidden" name="relative_id">',
            goodsGroup: '<div class="relative-goods-group"><div class="relative-goods"><p>标题: <span><select name="relative-goods-group-id" ><option value="1">提及商品</option><option value="2">推荐商品</option></select></span> <span data-toggle="modal" data-target="#action-add-goods" data-keyboard="false" data-backdrop="false"  class="sui-btn btn-bordered btn-primary js-add-goods">添加商品</span></p><table class="sui-table table-bordered table-zebra table-align-center"><thead><tr><th>GOODS_ID</th><th style="min-width: 80px;">商品图片</th><th>商品名称</th><th>商品描述</th><th>规格列表</th><th style="min-width: 80px;">操作</th></tr></thead><tbody></tr></tbody></table></div></div>',
            goods: '<tr><td data-goods-id></td><td data-cover></td><td data-name></td><td data-desc></td><td data-specs-str></td><td><a href="javascript:void(0);" data-goods-id="{{goods_id}}" data-toggle="modal" data-target="#action-add-goods" data-keyboard="false" data-backdrop="false"  class="js-edit-goods">编辑</a>|<a href="javascript:void(0);" data-goods-id="{{goods_id}}" class="js-remove-goods">删除</a></td>',
            spec: '<tr><td><input type="checkbox" {{checked}} name="id" value="{{id}}"></td><td>{{goods_item_id}}<input type="hidden" name="temp_spec_id" value="{{goods_item_id}}"></td><td>{{spec_name}}</td><td><input type="text" name="temp_spec_count" size="3" value="{{count}}"></td></tr>',
        },
        storage: {
            groups:[],
            goodsGroups:[],
            goods: {},
            ids: {}
        },
        api : {
            getRelativeGoodsGroups: '/admin.php?m=Admin&c=RelativeMallGoodsGroup&a=lists',
            getRelativeGoods: '/admin.php?m=admin&c=RelativeMallGoods&a=lists',
            getGoodsDetail: '/admin.php?m=admin&c=RelativeMallGoods&a=getGoodsDetail',
            addRelativeGoods: '/admin.php?m=admin&c=RelativeMallGoods&a=add',
            editRelativeGoods: '/admin.php?m=admin&c=RelativeMallGoods&a=edit',
            removeRelativeGoods: '/admin.php?m=admin&c=RelativeMallGoods&a=remove'
        },
        groupInit: function(options){
            //获取分组数据
            if(this.storage.groups.length == 0){
                //获取group
                var that = this;
                $.get(this.api.getRelativeGoodsGroups, {}, function(result){
                    if(result.error_code == 0){
                        that.storage.groups = result.data.list;
                    }else{
                        that.storage.groups = [
                            {
                                id: 1,
                                name: '提及商品1'
                            },
                            {
                                id: 2,
                                name: '推荐商品2'
                            }
                        ];
                    }

                    //关联商品组初始化
                    that.goodsGroupInit();

                }, 'JSON');
            }
        },
        goodsGroupInit: function(){
            var that = this;
            //TODO: 商品组
            $.get(this.api.getRelativeGoods, {obj_type: RelativeGoods.options.objType, obj_id: RelativeGoods.options.objId}, function(result){
                if(result.error_code == 0){
                    for(var i= 0, length = result.data.list.length; i<length; i++){
                        result.data.list[i]['newGoods'] = {};
                        for(var j = 0, goodsLength = result.data.list[i].goods.length; j < goodsLength; j++){
                            result.data.list[i]['newGoods'][result.data.list[i].goods[j].goods_id] = result.data.list[i].goods[j];
                        }
                        result.data.list[i]['goods'] = result.data.list[i]['newGoods'];
                        delete result.data.list[i]['newGoods'];

                        //初始化group
                        var goodsGroupObj = new GoodsGroup();
                        goodsGroupObj.init(result.data.list[i]);
                    }
                    //that.storage.goodsGroups = result.data.list;
                }else{
                    $.toast(result.error_desc);
                }

                //操作初始化
                that.Action.init();
            }, 'JSON');
        },
        init: function(options){
            this.options = options;
            this.obj = options.component;
            this.obj.html(this.template.base);

            this.obj.on('click', '.js-add-goods-group', function(){
                //初始化group
                var goodsGroupObj = new GoodsGroup();
                goodsGroupObj.init({});
            });

            //关联商品的分组下拉框初始化
            this.groupInit();
        }
    };

    RelativeGoods.Action = {
        action: 'add',
        obj: {},
        tempGoods: {},
        setObj: function(obj){
            this.obj = obj;
        },
        setTempGoods: function(goods){
            this.tempGoods = this._clone(goods);
            this._render();
        },
        _addGoods: function(data){
            var group = this.obj.getGroup(),
                goodsData = RelativeGoods.Action._clone(data);
            goodsData.specs = [];

            var param = {
                obj_id: RelativeGoods.options.objId,
                obj_type: RelativeGoods.options.objType,
                group_id: group.group_id,
                goods_id: data.goods_id,
                name: data.name,
                desc: data.desc,
                spec_info: ''
            };

            var specs = (group.goods && group.goods[data.goods_id] && group.goods[data.goods_id].specs) || [],
                temp = [];
            for (var s = 0, sLength = specs.length; s < sLength; s++){
                temp.push(specs[s].goods_item_id);
            }

            var aSpecInfo = [];
            for (var i = 0, length = data.specs.length; i < length; i++){
                if(RelativeGoods.Action.action == 'add' && temp.indexOf(data.specs[i].goods_item_id - 0) > -1){
                    $.toast(data.specs[i].goods_item_id + '规格已存在');
                    continue;
                }
                //TODO: 发起请求添加商品
                var id = 1;
                aSpecInfo.push(data.specs[i].goods_item_id + '|' + data.specs[i].count);
                //
                goodsData['specs'].push({id: id, goods_item_id: data.specs[i].goods_item_id, count: data.specs[i].count});
            }
            if(aSpecInfo.length == 0){
                return false;
            }

            param.spec_info = aSpecInfo.join(',');

            $.post(RelativeGoods.api.addRelativeGoods, param, function(result){
                var action = RelativeGoods.Action.action == 'add' ? '添加' : '修改';
                RelativeGoods.storage.ids[param.goods_id] = result.data;

                if(result.error_code == 0){
                    $.toast(action + '成功');
                    RelativeGoods.Action.obj.setGoods(param.goods_id, goodsData);
                }else{
                    $.toast(action + '失败,请联系管理员');
                }
            }, 'JSON');
            return true;
        },
        _removeGoods: function(goodsId, ids){
            var group = this.obj.getGroup(),
                goodsData = group.goods[goodsId];

            //TODO: 发起请求删除关联商品
            $.post('', {ids: ids.join(',')}, function(result){
                if(result.error_code == 0){
                    for (var i = 0, length = goodsData.specs.length; i < length; i++){
                        if(ids.indexOf(goodsData.specs[i].id - 0)){
                            goodsData.specs.splice(i, 1);
                        }
                    }
                    RelativeGoods.obj.setGoods(goodsId, goodsData);
                    $.toast('删除成功');
                }else{
                    $.toast('删除失败,稍后重试');
                }
            });

        },
        _clone: function (obj){
            var result={};
            for(key in obj){
                result[key]=obj[key];
            }
            return result;
        },
        _searchGoods: function(goodsId, callback){
            //搜索商品详情
            if(!goodsId){
                $.toast('商品ID不能为空');return false;
            }

            if(RelativeGoods.storage.goods[goodsId] != undefined){
                if(RelativeGoods.Action.action == 'add'){
                    RelativeGoods.Action.tempGoods = RelativeGoods.Action._clone(RelativeGoods.storage.goods[goodsId]);
                    RelativeGoods.Action.tempGoods.specs = [];
                }
                callback();
                return ;
            }

            $.get(RelativeGoods.api.getGoodsDetail, {goods_id: goodsId}, function(result){
                if(result.error_code == 0){
                    RelativeGoods.storage.goods[goodsId] = RelativeGoods.Action._clone(result.data);
                    if(RelativeGoods.Action.action == 'add'){
                        RelativeGoods.Action.tempGoods = RelativeGoods.Action._clone(RelativeGoods.storage.goods[goodsId]);
                        RelativeGoods.Action.tempGoods.specs = [];
                    }
                    callback();
                }else{
                    $.toast('商品不存在');
                }

            }, 'JSON');

        },
        _next: function(btn){
            var goodsId = RelativeGoods.obj.find('[name=temp_goods_id]').val() - 0;
            if(!goodsId){
                $.toast('商品ID不能为空');return false;
            }
            if(this.action == 'edit' && goodsId != RelativeGoods.Action.tempGoods.goods_id){
                $.toast('如果要修改商品ID,请删除再添加~');return false;
            }

            RelativeGoods.Action.tempGoods.goods_id = goodsId;
            RelativeGoods.Action.tempGoods.name = RelativeGoods.obj.find('[name=temp_name]').val();
            RelativeGoods.Action.tempGoods.desc = RelativeGoods.obj.find('[name=temp_desc]').val();

            //
            var goodsData = RelativeGoods.storage.goods[RelativeGoods.Action.tempGoods.goods_id] || {};

            if(goodsData.goods_id == undefined){
                this._searchGoods(RelativeGoods.Action.tempGoods.goods_id, this._renderSpec);
            }else{
                this._renderSpec();
            }
//
//                this._renderSpec();

            RelativeGoods.obj.find('.relative-goods-table table').removeClass('active');
            $($(btn).attr('href')).addClass('active');
        },
        _save: function(){
            //TODO:获取填写的数据
            var specs = [];

            RelativeGoods.obj.find('[name=id]').each(function(i, item){
                if(item.checked){
                    var spec = {
                        id: item.value,
                        goods_item_id: $(item).parent().parent().find('[name=temp_spec_id]').val(),
                        count: $(item).parent().parent().find('[name=temp_spec_count]').val()
                    };
                    specs.push(spec);
                }

                RelativeGoods.Action.tempGoods.specs = specs;
            });

            if(RelativeGoods.Action.action == 'add'){
                var r = this._addGoods(RelativeGoods.Action.tempGoods);
                if(r === false){
                    return false;
                }
            }else if(RelativeGoods.Action.action == 'edit'){
                this._remove(RelativeGoods.Action.tempGoods.goods_id, 0);

                this._addGoods(RelativeGoods.Action.tempGoods);
            }

            RelativeGoods.Action.obj.setGoods(RelativeGoods.Action.tempGoods.goods_id, RelativeGoods.Action.tempGoods);

            $('#action-add-goods').modal('toggle');
        },
        _cancel: function(){
            //
            RelativeGoods.Action.setTempGoods({goods_id: '', name: '', decs: '', cover: '', specs: []});
            $('#relative-goods-table1').addClass('active');
            $('#relative-goods-table2').removeClass('active');
        },
        _remove: function(goodsId, needToast){
            //
            var group = this.obj.getGroup();
            $.post(RelativeGoods.api.removeRelativeGoods,
                {goods_id:goodsId, obj_type: RelativeGoods.options.objType, obj_id: RelativeGoods.options.objId, group_id: group.group_id},
                function(result){
                    if(needToast){
                        if(result.error_code == 0){
                            $.toast('删除成功');
                        }else{
                            $.toast('删除失败');
                        }

                        RelativeGoods.Action.obj.setGoods(goodsId, {});
                    }

                    console.log('删除成功');
                },
                'JSON'
            );

        },
        _compileSpec: function(obj){
            var specTpl = RelativeGoods.template.spec;
            for (var field in obj){
                var pattern = new RegExp('{{' + field + '}}', 'g');
                specTpl = specTpl.replace(pattern, obj[field]);
            }
            return specTpl;
        },
        _renderSpec: function(){
            var oSpecs = {};
            var aSpecs = [];

            $(RelativeGoods.Action.tempGoods.specs).each(function(){
                oSpecs[this.goods_item_id] = this;
                aSpecs.push(this.goods_item_id - 0);
            });

            //规格列表初始化
            var goodsInfo = RelativeGoods.storage.goods[RelativeGoods.Action.tempGoods.goods_id],
                specHtml = '';

            $(goodsInfo.specs).each(function(i, item){
                if(aSpecs.indexOf(item.id-0) > -1){
                    item.checked = 'checked';
                    item.count = oSpecs[item.id].count;
                } else{
                    item.checked = '';
                    item.count = 1;
                }
                item.goods_item_id = item.id;
                specHtml += RelativeGoods.Action._compileSpec(item);
            });
            $('#relative-goods-table2 tbody').find('tr:not(:last)').remove();
            $('#relative-goods-table2 tbody').prepend(specHtml);

        },
        _render: function(){
            var goodsData = RelativeGoods.Action.tempGoods || {goods_id: '', name: '', decs: '', cover: '', specs: []};

            $('[name=temp_goods_id]').val(goodsData.goods_id);
            $('[name=temp_name]').val(goodsData.name);
            $('[name=temp_desc]').val(goodsData.desc);
            $('[data-goods-cover]').attr('src', goodsData.cover);

        },
        init: function(){
            this.obj = RelativeGoods.obj.find('.action-area');

            $('#action-add-goods').on('cancelHide', this._cancel);

            RelativeGoods.obj.on('click', '.js-next', function(){
                RelativeGoods.Action._next(this);
            });

            RelativeGoods.obj.on('click', '.js-prev', function(){
                RelativeGoods.obj.find('.relative-goods-table table').removeClass('active');
                $($(this).attr('href')).addClass('active');
            });

            RelativeGoods.obj.on('click', '.js-save-goods', function(){
                RelativeGoods.Action._save();
            });
            RelativeGoods.obj.on('click', '.js-search-goods', function(){
                var goodsId = RelativeGoods.obj.find('[name=temp_goods_id]').val() - 0;
                RelativeGoods.Action._searchGoods(goodsId, RelativeGoods.Action._render);
//                    RelativeGoods.Action._render();
            });
        }
    };
    RelativeGoods.Apis = {
        getRelativeGroups: '/admin.php?m=admin&c=RelativeMallGoodsGroup&a=list',
        getRelativeGoods: '/admin.php?m=admin&c=RelativeMallGoods&a=list',
        getGoodsDetail: '/v1/goods/1.json',
        addRelativeGoods: '/admin.php?m=admin&c=RelativeMallGoods&a=add',
        editRelativeGoods: '/admin.php?m=admin&c=RelativeMallGoods&a=edit',
        removeRelativeGoods: '/admin.php?m=admin&c=RelativeMallGoods&a=remove'
    };

    function GoodsGroup()
    {
        var _group = {},
            _base = {},
            that = this,
            _render = function(){
                //TODO 渲染数据
                var goods = _group.goods,
                    groupHtml = '';

                for (var goodsId in goods){
                    var item = goods[goodsId] || {},
                        $tpl = $(RelativeGoods.template.goods.replace(/\{\{goods_id\}\}/g, item.goods_id)),
                        specIds = [];
                    if(item.goods_id === undefined){
                        continue;
                    }

                    for (var j = 0, length = item.specs.length; j < length; j++){
                        specIds.push(' ' + item.specs[j].goods_item_id + ' x ' + item.specs[j].count + ' ');
                    }
                    item.specs_str = specIds.join(',');
                    item.name = item.name || item.title || '';
                    for (field in item){
                        var attr = field.replace(/\_/g, '-');
                        if(attr == 'cover'){
                            $tpl.find('[data-'+attr+']:first').html('<img src="'+item[field]+'" style="max-height: 50px;"/>');
                        }else{
                            $tpl.find('[data-'+attr+']:first').html(item[field]);
                        }
                    }
                    groupHtml += '<tr>' + $tpl.html() + '</tr>';
                }

                _base.find('tbody').html(groupHtml);
            };

        this.getGroup = function(){
            _group.group_id = _base.find('[name=relative-goods-group-id]').val();
            return _group;
        };

        this.setGoods = function(goodsId, goodsItem){
            _group.goods = _group.goods || {};
            _group.goods[goodsId] = goodsItem;
            _render();

            var ids = [];

            for (var field in RelativeGoods.storage.ids){
                if(RelativeGoods.storage.ids[field].length > 0){
                    ids.push(RelativeGoods.storage.ids[field].join(','));
                }
            }

            if(ids.length > 0){
                RelativeGoods.obj.find('[name=relative_id]').val(ids.join(','));
            }
        };

        var groupInit = function(obj){
            var options = '';
            _group.group_id = _group.group_id || 0;

            $(RelativeGoods.storage.groups).each(function(i, item){
                var selected = item.id == _group.group_id ? 'selected' : '';
                options += '<option '+selected+' value="'+item.id+'">'+item.name+'</option>';
            });

            obj.find('[name=relative-goods-group-id]').html(options);

            return obj;
        };


        this.init = function(data){

            _group = data;

            _base = groupInit($(RelativeGoods.template.goodsGroup));

            RelativeGoods.obj.find('.goods-group').append(_base);

            _render();

            _base.on('click', '.js-add-goods', function(){
                RelativeGoods.Action.action = 'add';
                RelativeGoods.Action.setObj(that);
                RelativeGoods.Action._render();
            });

            _base.on('click', '.js-edit-goods', function(){
                var goods = _group.goods[$(this).attr('data-goods-id')] || {};

                RelativeGoods.Action.action = 'edit';
                RelativeGoods.Action.setObj(that);
                RelativeGoods.Action.setTempGoods(goods);
            });

            _base.on('click', '.js-remove-goods', function(){
                if(!confirm('你确定要删除吗?')){
                    return false;
                }
                RelativeGoods.Action.action = 'remove';
                RelativeGoods.Action.setObj(that);
                RelativeGoods.Action._remove($(this).attr('data-goods-id'), 1);
            });

            RelativeGoods.storage.goodsGroups.push(this);
        };
    }

    function init($container) {
        $container = $container || $(document);

        var $els = $container.find('[data-component="' + componentName + '"]');

        $els.each(function(i, item){
            var options = {
                component: $(item),
                objType: $(item).attr('data-obj-type'),
                objId: $(item).attr('data-obj-id'),
                needSpec: $(item).attr('data-need-spec'),
            };

            RelativeGoods.init(options);
        });

    }


    return init;
});
define('component/remove-data', ['common/util'], function (require) {
    "use strict";

    var Util = require('common/util');
    var componentName = 'remove-data';

    function init($container) {
        $container = $container || $(document);

        var $els = $container.find('[data-component="' + componentName + '"]');

        $els.each(function(i, el){
            var key = $(el).attr('data-key') || 'id';
            $(el).on('click', function(){
                removeData(this, 'checkList', key, $(this).attr('data-action'));
            });
        });
    }


    function removeData(obj, id, pk, actionName)
    {
        actionName = actionName || 'remove';
        var ids =  [];
        if(isNaN(id))
        {
            $("#" + id + " input:checked[name='key']").each(function(){
                ids.push(this.value);
            });
        }
        else
        {
            ids.push(id);
            var parent = $(obj).parent().parent();
            id = parent.parent().parent().attr('id');
        }

        ids = ids.join(',');
        if(ids == '')
            return false;

        if(!window.confirm(CONFIRM_DELETE))
            return false;

        var query = {};
        query.id = ids;

        $.ajax({
            url: APP + '?' + VAR_MODULE + '=' + CURR_MODULE + '&'+VAR_CONTROLLER+'='+CURR_CONTROLLER+'&' + VAR_ACTION + '='+actionName,
            type:"POST",
            cache: false,
            data:query,
            dataType:"json",
            success: function(result){
                if(result.isErr == 0)
                {
                    $("#" + id + " tbody tr input[name='key']").each(function(){
                        if((',' + ids + ',').indexOf(',' + this.value + ',') != -1)
                        {
                            parent = $(this).parent().parent();
                            this.checked = false;
                            $('td span,td a',parent).each(function(){
                                if (typeof(this.onclick) == 'function' && this.onclick.toString() != '')
                                {
                                    if(this.onclick.toString().indexOf('toggleStatus') != -1)
                                    {
                                        var img = $('img',this).get(0);
                                        img.src = img.src.replace('status','disabled');
                                    }

                                    this.onclick = '';
                                }
                            });

                            parent.attr({"disabled":true,"title":ALREADY_REMOVE});
                            $("td",parent).attr({"disabled":true}).addClass('disabled');
                            $("td *",parent).attr({"disabled":true}).addClass('disabled');
                        }

                        if($("#" + id + " tbody tr:not([disabled])").length == 0)
                            location.reload(true);
                    });
                }
                else
                    $.toast(result.content);
            }
        });
    }

    return init;
});
define('component/remove-item', ['common/util'], function (require) {
    "use strict";

    var Util = require('common/util');
    var componentName = 'remove-item';

    function init($container) {
        $container = $container || $(document);

        var $els = $container.find('[data-component="' + componentName + '"]');

        $els.each(function(i, el){
            var id = $(el).attr('data-id') || 0;
            var pk = $(el).attr('data-pk') || 'id';
            $(el).on('click', function(){
                removeData(this, id, pk, $(this).attr('data-action'));
            });
        });
    }


    function removeData(obj, id, pk, actionName)
    {
        actionName = actionName || 'remove';
        var ids =  [];
        if(isNaN(id))
        {
            $("#" + id + " input:checked[name='key']").each(function(){
                ids.push(this.value);
            });
        }
        else
        {
            ids.push(id);
            var parent = $(obj).parent().parent();
            id = parent.parent().parent().attr('id');
        }

        ids = ids.join(',');
        if(ids == '')
            return false;

        if(!window.confirm(CONFIRM_DELETE))
            return false;

        var query = {};
        query[pk] = ids;
        query['id'] = ids;
        query['channel_id'] = $("#channel_id").val() || 0;

        $.ajax({
            url: APP + '?' + VAR_MODULE + '=' + CURR_MODULE + '&'+VAR_CONTROLLER+'='+CURR_CONTROLLER+'&' + VAR_ACTION + '='+actionName,
            type:"POST",
            cache: false,
            data:query,
            dataType:"json",
            success: function(result){
                if(result.isErr == 0)
                {
                    $("#" + id + " tbody tr input[name='key']").each(function(){
                        if((',' + ids + ',').indexOf(',' + this.value + ',') != -1)
                        {
                            parent = $(this).parent().parent();
                            this.checked = false;
                            $('td span,td a',parent).each(function(){
                                if (typeof(this.onclick) == 'function' && this.onclick.toString() != '')
                                {
                                    if(this.onclick.toString().indexOf('toggleStatus') != -1)
                                    {
                                        var img = $('img',this).get(0);
                                        img.src = img.src.replace('status','disabled');
                                    }

                                    this.onclick = '';
                                }
                            });

                            parent.attr({"disabled":true,"title":ALREADY_REMOVE});
                            $("td",parent).attr({"disabled":true}).addClass('disabled');
                            $("td *",parent).attr({"disabled":true}).addClass('disabled');
                        }

                        if($("#" + id + " tbody tr:not([disabled])").length == 0)
                            location.reload(true);
                    });
                }
                else
                    $.toast(result.content);
            }
        });
    }

    return init;
});
define('component/reply-item-v2', ['common/util'], function (require) {
    "use strict";

    var Util = require('common/util');
    var componentName = 'reply-item-v2';


    function init($container) {
        $container = $container || $(document);
        var $els = $container.find('[data-component="' + componentName + '"]');

        var pickerModal = '<div id="replySelector" tabindex="-1" role="dialog" data-hasfoot="false" data-backdrop="false" class="sui-modal hide fade"><div class="modal-dialog"><div class="modal-content"><div class="modal-header"><button type="button" data-dismiss="modal" aria-hidden="true" class="sui-close">×</button><h4 id="contentPickerLabel" class="modal-title"><div class="title">添加回复</div></h4></div><div class="modal-body"><div class="content"><div class="reply"><div class="user"><label><input type="radio" name="random" value="0" checked>&nbsp;后台发表文章用户</label>&nbsp;&nbsp;<label><input type="radio" name="random" value="1">&nbsp;随机小号</label></div><select id="userType"> </select><br/><select name="uid" id="userSelect"><option>请选择发表用户</option></select>&nbsp;&nbsp; <input id="authors" type="text" name="authors" placeholder="输入..." class="input-xlarge" autocomplete="off"></div><textarea rows="6" cols="45" id="reply_content" name="reply_content" placeholder="填写评论"></textarea></div></div><div class="modal-footer"><input type="button" data-ok="modal" id="submitReply" class="sui-btn btn-primary btn-large js-ok" data-bind="0" value="回复"><input type="hidden" id="content-list" name="content-list"></div></div></div></div>';

        $('body').append(pickerModal);

        $('input[name="random"]').click(function () {
            var random = $('input[name="random"]:checked').val();
            var is_random = random == "1" ? 1 : 0;
            if (is_random == 1) {
                $("#userType").hide();
                $.get('/boss/user/specialaccount/account/get-random-zombie', {num: 1}, function (result) {
                    var list = result.data;
                    $('#userSelect').html("<option>请选择发表用户</option>");
                    $.each(list, function(key, user){
                        if (user.hasOwnProperty('uid') && user.hasOwnProperty('user_name')) {
                            $('#userSelect').html('<option value="' + user.uid + '">' + user.user_name + '</option>');
                            $('#authors').css('display', 'none');
                        }
                    });
                }, 'JSON');
            } else {
                selectorInit();
            }
        });

        // 绑定提交回复按钮事件
        var jsOkButton = $('#replySelector .modal-footer .js-ok[data-bind="0"]').get(0);
        if (jsOkButton !== undefined) {
            $(jsOkButton).click(function () {
                let self = $(this);

                var reply_id = self.data('reply_id');
                var actionName = self.data('action_name');
                var uid = $("#userSelect").val();
                var reply_content = $('#reply_content').val();
                if (reply_content == '' || uid == '' || reply_id == '' || reply_id === undefined) {
                    alert('评论者或内容为空，请检查');
                    return false;
                } else {
                    replyData(reply_id, uid, reply_content, actionName);
                    return false;
                }
            });
            $(jsOkButton).attr('data-bind', '1');
        }

        // 初始化选择框数据
        selectorInit();

        $els.each(function (i, el) {
            $(el).attr('data-toggle', 'modal');
            $(el).attr('data-target', '#replySelector');
            $(el).on('click', function () {
                var submitButton = $('#replySelector #submitReply');
                var triggerElement = $(this);
                var reply_id = triggerElement.data('id');
                var actionName = triggerElement.attr('data-action');

                submitButton.data('reply_id', reply_id);
                submitButton.data('action_name', actionName);
            });
        });

        $("#userType").change(function(){
            var authors = [];
            var userType = $(this).val();
            if (userType) {
                $.get('/boss/user/specialaccount/account/find-authors-by-type', {type: userType}, function (result) {
                    $('#userSelect').html('<option>请选择发表用户</option>');
                    var list = result.data;
                    $.each(list, function(key, user){
                        console.log(user);
                        $('#userSelect').append('<option value="' + user.uid + '">' + user.user_name + '</option>');
                        authors.push(user.user_name);
                        $('#authors').css('display', '');
                    });

                    $('#authors').autocomplete({
                        lookup: authors,
                        minChars: 0,
                        appendTo: $('#authors').parent(),
                        onSelect: function (suggestion) {
                            $("#userSelect option").filter(function () {
                                return this.text == suggestion.value;
                            }).attr('selected', true);
                        }
                    });
                }, 'JSON');
            }
        });
    }


    function replyData(reply_id, uid, reply_content, actionName) {
        actionName = actionName || 'replyComment';
        if (reply_id == '' || uid == '' || reply_content == '')
            return false;
        var query = {};
        query.reply_id = reply_id;
        query.content = reply_content;
        query.uid = uid;

        $.ajax({
            url: APP + '?' + VAR_MODULE + '=' + CURR_MODULE + '&' + VAR_CONTROLLER + '=' + CURR_CONTROLLER + '&' + VAR_ACTION + '=' + actionName,
            type: "POST",
            cache: false,
            data: query,
            dataType: "json",
            success: function (result) {
                if (result.isErr == false) {
                    alert('评论失败');
                }
                else {
                    alert('评论成功');

                    // 隐藏modal
                    $('#replySelector').modal('hide');
                    // 重置回复内容输入框
                    $('#replySelector #reply_content').val('');
                }
            }
        });
    }


    function selectorInit() {

        $('#userType').show();
        $('#userType').html('<option>请选择用户类型</option>');
        $('#userSelect').html('<option>请选择发表用户</option>');
        $('#authors').css('display', '');

        $.get('/boss/user/specialaccount/account/get-authors-type', {}, function (result) {
            var data = result.data;
            $.each(data, function (key, value) {
                $('#userType').append('<option value="' + value.name + '">' + value.name + '</option>');
            });
        }, 'JSON');
    }

    return init;
});
define('component/reply-item-with-emoji-image', ['common/util', 'component/image-upload'], function (require) {
    "use strict";

    var Util = require('common/util');
    var imageUpload = require('component/image-upload');
    var componentName = 'reply-item-with-emoji-image';


    function init($container) {
        $container = $container || $(document);
        var $els = $container.find('[data-component="' + componentName + '"]');

        var pickerModal = '<div id="replySelector" tabindex="-1" role="dialog" data-hasfoot="false" data-backdrop="false" class="sui-modal hide fade">' +
            '<div class="modal-dialog">' +
            '<div class="modal-content">' +
            '<div class="modal-header">' +
            '<button type="button" data-dismiss="modal" aria-hidden="true" class="sui-close">' +
            '×</button>' +
            '<h4 id="contentPickerLabel" class="modal-title">' +
            '<div class="title">' +
            '添加回复</div>' +
            '</h4>' +
            '</div>' +
            '<div class="modal-body">' +
            '<div class="content">' +
            '<div class="reply">' +
            '<div class="user">' +
            '<label>' +
            '<input type="radio" name="random" value="0" checked>' +
            '&nbsp;后台发表文章用户</label>' +
            '&nbsp;&nbsp;<label>' +
            '<input type="radio" name="random" value="1">' +
            '&nbsp;随机小号</label>' +
            '</div>' +
            '<select id="userType">' +
            ' </select>' +
            '<br/>' +
            '<select name="uid" id="userSelect">' +
            '<option>' +
            '请选择发表用户</option>' +
            '</select>' +
            '&nbsp;&nbsp; <input id="authors" type="text" name="authors" placeholder="输入..." class="input-xlarge" autocomplete="off">' +
            '</div>' +
            '<textarea rows="6" cols="60" id="reply_content" name="reply_content" placeholder="填写评论">' +
            '</textarea>' +
            '<div id="emojiContainer">' +
            '<div>' +
            '<img style="width:35px;cursor:pointer;margin:3px;" src="http://m.meijiabang.cn/img/emoticons/keai_2x.png" data-content="[可爱]" title="[可爱]" />' +
            '<img style="width:35px;cursor:pointer;margin:3px;" src="http://m.meijiabang.cn/img/emoticons/touxiao_2x.png" data-content="[偷笑]" title="[偷笑]" />' +
            '<img style="width:35px;cursor:pointer;margin:3px;" src="http://m.meijiabang.cn/img/emoticons/deyi_2x.png" data-content="[得意]" title="[得意]" />' +
            '<img style="width:35px;cursor:pointer;margin:3px;" src="http://m.meijiabang.cn/img/emoticons/ku_2x.png" data-content="[酷]" title="[酷]" />' +
            '<img style="width:35px;cursor:pointer;margin:3px;" src="http://m.meijiabang.cn/img/emoticons/memeda_2x.png" data-content="[么么哒]" title="[么么哒]" />' +
            '<img style="width:35px;cursor:pointer;margin:3px;" src="http://m.meijiabang.cn/img/emoticons/huachi_2x.png" data-content="[花痴]" title="[花痴]" />' +
            '<img style="width:35px;cursor:pointer;margin:3px;" src="http://m.meijiabang.cn/img/emoticons/ding_2x.png" data-content="[顶]" title="[顶]" />' +
            '<img style="width:35px;cursor:pointer;margin:3px;" src="http://m.meijiabang.cn/img/emoticons/zan_2x.png" data-content="[赞]" title="[赞]" />' +
            '<img style="width:35px;cursor:pointer;margin:3px;" src="http://m.meijiabang.cn/img/emoticons/haixiu_2x.png" data-content="[害羞]" title="[害羞]" />' +
            '<img style="width:35px;cursor:pointer;margin:3px;" src="http://m.meijiabang.cn/img/emoticons/mogui_2x.png" data-content="[魔鬼]" title="[魔鬼]" />' +
            '<img style="width:35px;cursor:pointer;margin:3px;" src="http://m.meijiabang.cn/img/emoticons/liuhan_2x.png" data-content="[流汗]" title="[流汗]" />' +
            '<img style="width:35px;cursor:pointer;margin:3px;" src="http://m.meijiabang.cn/img/emoticons/guzhang_2x.png" data-content="[鼓掌]" title="[鼓掌]" />' +
            '<img style="width:35px;cursor:pointer;margin:3px;" src="http://m.meijiabang.cn/img/emoticons/weiqv_2x.png" data-content="[委屈]" title="[委屈]" />' +
            '<img style="width:35px;cursor:pointer;margin:3px;" src="http://m.meijiabang.cn/img/emoticons/outu_2x.png" data-content="[呕吐]" title="[呕吐]" />' +
            '<img style="width:35px;cursor:pointer;margin:3px;" src="http://m.meijiabang.cn/img/emoticons/kuqi_2x.png" data-content="[哭泣]" title="[哭泣]" />' +
            '<img style="width:35px;cursor:pointer;margin:3px;" src="http://m.meijiabang.cn/img/emoticons/kuaikule_2x.png" data-content="[快哭了]" title="[快哭了]" />' +
            '<img style="width:35px;cursor:pointer;margin:3px;" src="http://m.meijiabang.cn/img/emoticons/lianhong_2x.png" data-content="[脸红]" title="[脸红]" />' +
            '<img style="width:35px;cursor:pointer;margin:3px;" src="http://m.meijiabang.cn/img/emoticons/jingxia_2x.png" data-content="[惊吓]" title="[惊吓]" />' +
            '<img style="width:35px;cursor:pointer;margin:3px;" src="http://m.meijiabang.cn/img/emoticons/yiwen_2x.png" data-content="[疑问]" title="[疑问]" />' +
            '<img style="width:35px;cursor:pointer;margin:3px;" src="http://m.meijiabang.cn/img/emoticons/hua_2x.png" data-content="[献花]" title="[献花]" />' +
            '<img style="width:35px;cursor:pointer;margin:3px;" src="http://m.meijiabang.cn/img/emoticons/shaxiao_2x.png" data-content="[傻笑]" title="[傻笑]" />' +

            '</div>' +
            '<div>' +
            '<img style="width:35px;cursor:pointer;margin:3px;" src="http://m.meijiabang.cn/img/emoticons/bianbian_2x.png" data-content="[便便]" title="[便便]" />' +
            '<img style="width:35px;cursor:pointer;margin:3px;" src="http://m.meijiabang.cn/img/emoticons/biezui_2x.png" data-content="[瘪嘴]" title="[瘪嘴]" />' +
            '<img style="width:35px;cursor:pointer;margin:3px;" src="http://m.meijiabang.cn/img/emoticons/bishi.png" data-content="[鄙视]" title="[鄙视]" />' +
            '<img style="width:35px;cursor:pointer;margin:3px;" src="http://m.meijiabang.cn/img/emoticons/chiyao_2x.png" data-content="[吃药]" title="[吃药]" />' +
            '<img style="width:35px;cursor:pointer;margin:3px;" src="http://m.meijiabang.cn/img/emoticons/dage_2x.png" data-content="[打嗝]" title="[打嗝]" />' +
            '<img style="width:35px;cursor:pointer;margin:3px;" src="http://m.meijiabang.cn/img/emoticons/fendou_2x.png" data-content="[奋斗]" title="[奋斗]" />' +
            '<img style="width:35px;cursor:pointer;margin:3px;" src="http://m.meijiabang.cn/img/emoticons/haqian_2x.png" data-content="[哈欠]" title="[哈欠]" />' +
            '<img style="width:35px;cursor:pointer;margin:3px;" src="http://m.meijiabang.cn/img/emoticons/jin_2x.png" data-content="[禁]" title="[禁]" />' +
            '<img style="width:35px;cursor:pointer;margin:3px;" src="http://m.meijiabang.cn/img/emoticons/jinzhang_2x.png" data-content="[紧张]" title="[紧张]" />' +
            '<img style="width:35px;cursor:pointer;margin:3px;" src="http://m.meijiabang.cn/img/emoticons/jiong_2x.png" data-content="[囧]" title="[囧]" />' +
            '<img style="width:35px;cursor:pointer;margin:3px;" src="http://m.meijiabang.cn/img/emoticons/kule.png" data-content="[哭]" title="[哭]" />' +
            '<img style="width:35px;cursor:pointer;margin:3px;" src="http://m.meijiabang.cn/img/emoticons/lei_2x.png" data-content="[雷]" title="[雷]" />' +
            '<img style="width:35px;cursor:pointer;margin:3px;" src="http://m.meijiabang.cn/img/emoticons/ma_2x.png" data-content="[骂]" title="[骂]" />' +
            '<img style="width:35px;cursor:pointer;margin:3px;" src="http://m.meijiabang.cn/img/emoticons/nu_2x.png" data-content="[怒]" title="[怒]" />' +
            '<img style="width:35px;cursor:pointer;margin:3px;" src="http://m.meijiabang.cn/img/emoticons/qidao_2x.png" data-content="[祈祷]" title="[祈祷]" />' +
            '<img style="width:35px;cursor:pointer;margin:3px;" src="http://m.meijiabang.cn/img/emoticons/se_2x.png" data-content="[色]" title="[色]" />' +
            '<img style="width:35px;cursor:pointer;margin:3px;" src="http://m.meijiabang.cn/img/emoticons/tu_2x.png" data-content="[吐]" title="[吐]" />' +
            '<img style="width:35px;cursor:pointer;margin:3px;" src="http://m.meijiabang.cn/img/emoticons/xigua_2x.png" data-content="[西瓜]" title="[西瓜]" />' +
            '<img style="width:35px;cursor:pointer;margin:3px;" src="http://m.meijiabang.cn/img/emoticons/yun_2x.png" data-content="[晕]" title="[晕]" />' +
            '<img style="width:35px;cursor:pointer;margin:3px;" src="http://m.meijiabang.cn/img/emoticons/zhuakuang_2x.png" data-content="[抓狂]" title="[抓狂]" />' +
            '</div>' +
            // '<img style="width:35px;cursor:pointer;margin:3px;" src="http://m.meijiabang.cn/img/emoticons/kong_2x.png" data-content="[空]" title="[空]" />' +
            // '<img style="width:35px;cursor:pointer;margin:3px;" src="http://m.meijiabang.cn/img/emoticons/qvsi_2x.png" data-content="[去死]" title="[去死]" />' +
            // '<img style="width:35px;cursor:pointer;margin:3px;" src="http://m.meijiabang.cn/img/emoticons/sha_2x.png" data-content="[杀]" title="[杀]" />' +
            // '<img style="width:35px;cursor:pointer;margin:3px;" src="http://m.meijiabang.cn/img/emoticons/shui_2x.png" data-content="[睡]" title="[睡]" />' +
            // '<img style="width:35px;cursor:pointer;margin:3px;" src="http://m.meijiabang.cn/img/emoticons/wang_2x.png" data-content="[汪]" title="[汪]" />' +
            // '<img style="width:35px;cursor:pointer;margin:3px;" src="http://m.meijiabang.cn/img/emoticons/wuyu_2x.png" data-content="[无语]" title="[无语]" />' +
            // '<img style="width:35px;cursor:pointer;margin:3px;" src="http://m.meijiabang.cn/img/emoticons/aini_2x.png" data-content="[爱你]" title="[爱你]" />' +
            // '<img style="width:35px;cursor:pointer;margin:3px;" src="http://m.meijiabang.cn/img/emoticons/dongle_2x.png" data-content="[懂了]" title="[懂了]" />' +
            // '<img style="width:35px;cursor:pointer;margin:3px;" src="http://m.meijiabang.cn/img/emoticons/jingdai_2x.png" data-content="[惊呆]" title="[惊呆]" />' +
            '</div>' +
            '<div id="imageContainer">' +
            '</div>' +
            '</div>' +
            '</div>' +
            '<div class="modal-footer">' +
            '<input type="button" data-ok="modal" id="submitReply" class="sui-btn btn-primary btn-large js-ok" data-bind="0" value="回复">' +
            '<input type="hidden" id="content-list" name="content-list">' +
            '</div>' +
            '</div>' +
            '</div>' +
            '</div>';

        $('body').append(pickerModal);

        $('input[name="random"]').click(function () {
            var random = $('input[name="random"]:checked').val();
            var is_random = random == "1" ? 1 : 0;
            if (is_random == 1) {
                $("#userType").hide();
                $.get('/boss/user/specialaccount/account/get-random-zombie', {num: 1}, function (result) {
                    var list = result.data;
                    $('#userSelect').html("<option>请选择发表用户</option>");
                    $.each(list, function(key, user){
                        if (user.hasOwnProperty('uid') && user.hasOwnProperty('user_name')) {
                            $('#userSelect').html('<option value="' + user.uid + '">' + user.user_name + '</option>');
                            $('#authors').css('display', 'none');
                        }
                    });
                }, 'JSON');
            } else {
                selectorInit();
            }
        });

        // 绑定提交回复按钮事件
        var jsOkButton = $('#replySelector .modal-footer .js-ok[data-bind="0"]').get(0);
        if (jsOkButton !== undefined) {
            $(jsOkButton).click(function () {
                let self = $(this);

                var reply_id = self.data('reply_id');
                var actionName = self.data('action_name');
                var uid = $("#userSelect").val();
                var reply_content = $('#reply_content').val();
                var imagePath = $('#replySelector #imageContainer input[type=hidden][name=comment]').val();
                var imageData = null;
                if (imagePath) {
                    imageData = {};
                    imageData.path = imagePath;
                    var imageUrl = $('#replySelector #imageContainer img').attr('src');
                    var regex = /\@(\d+)w\_h(\d+)\_/g;
                    var regexMatchResult = regex.exec(imageUrl);
                    if (regexMatchResult && regexMatchResult[1] !== undefined) {
                        imageData.width = regexMatchResult[1];
                    } else {
                        imageData.width = 0;
                    }
                    if (regexMatchResult && regexMatchResult[2] !== undefined) {
                        imageData.height = regexMatchResult[2];
                    } else {
                        imageData.height= 0;
                    }
                }

                if (reply_content == '' || !parseInt(uid) || uid == '' || reply_id == '' || reply_id === undefined) {
                    alert('评论者或内容为空，请检查');
                    return false;
                } else {
                    replyData(reply_id, uid, reply_content, actionName, imageData);
                    return false;
                }
            });
            $(jsOkButton).attr('data-bind', '1');
        }

        // 初始化选择框数据
        selectorInit();
        // 初始化emoji点击事件
        emojiInit();

        $els.each(function (i, el) {
            $(el).attr('data-toggle', 'modal');
            $(el).attr('data-target', '#replySelector');
            $(el).on('click', function () {
                var submitButton = $('#replySelector #submitReply');
                var triggerElement = $(this);
                var reply_id = triggerElement.data('id');
                var actionName = triggerElement.attr('data-action');

                submitButton.data('reply_id', reply_id);
                submitButton.data('action_name', actionName);

                reInitImageUpload(reply_id);
            });
        });

        $("#userType").change(function(){
            var authors = [];
            var userType = $(this).val();
            if (userType) {
                $.get('/boss/user/specialaccount/account/find-authors-by-type', {type: userType}, function (result) {
                    $('#userSelect').html('<option>请选择发表用户</option>');
                    var list = result.data;
                    $.each(list, function(key, user){
                        console.log(user);
                        $('#userSelect').append('<option value="' + user.uid + '">' + user.user_name + '</option>');
                        authors.push(user.user_name);
                        $('#authors').css('display', '');
                    });

                    $('#authors').autocomplete({
                        lookup: authors,
                        minChars: 0,
                        appendTo: $('#authors').parent(),
                        onSelect: function (suggestion) {
                            $("#userSelect option").filter(function () {
                                return this.text == suggestion.value;
                            }).attr('selected', true);
                        }
                    });
                }, 'JSON');
            }
        });
    }


    function replyData(reply_id, uid, reply_content, actionName, imageData) {
        actionName = actionName || 'replyComment';
        if (reply_id == '' || uid == '' || reply_content == '')
            return false;
        var query = {};
        query.reply_id = reply_id;
        query.content = reply_content;
        query.uid = uid;
        if(imageData) {
            query.image = imageData.path;
            query.width = imageData.width;
            query.height = imageData.height;
        }

        $.ajax({
            url: APP + '?' + VAR_MODULE + '=' + CURR_MODULE + '&' + VAR_CONTROLLER + '=' + CURR_CONTROLLER + '&' + VAR_ACTION + '=' + actionName,
            type: "POST",
            cache: false,
            data: query,
            dataType: "json",
            success: function (result) {
                if (result.isErr == false) {
                    alert('评论失败');
                }
                else {
                    alert('评论成功');

                    // 隐藏modal
                    $('#replySelector').modal('hide');
                    // 重置回复内容输入框
                    $('#replySelector #reply_content').val('');
                }
            }
        });
    }


    function selectorInit() {

        $('#userType').show();
        $('#userType').html('<option>请选择用户类型</option>');
        $('#userSelect').html('<option>请选择发表用户</option>');
        $('#authors').css('display', '');

        $.get('/boss/user/specialaccount/account/get-authors-type', {}, function (result) {
            var data = result.data;
            $.each(data, function (key, value) {
                $('#userType').append('<option value="' + value.name + '">' + value.name + '</option>');
            });
        }, 'JSON');
    }

    function emojiInit() {
        $('#replySelector #emojiContainer img').click(function() {
            var emojiContent = $(this).data('content');
            var textArea = $('#replySelector #reply_content');
            textArea.val(textArea.val() + emojiContent);
        });
    }

    function reInitImageUpload(objId) {
        var template = '<div data-component="image-upload" class="image-upload" data-count="1" data-name="comment" data-value="" data-format="path" data-obj-type="comment" data-obj-id="' + objId + '"></div>';
        var imageContainer = $('#replySelector #imageContainer');
        imageContainer.html('');
        imageContainer.html(template);
        imageUpload();
    }

    return init;
});
define('component/reply-item', ['common/util'], function (require) {
    "use strict";

    var Util = require('common/util');
    var componentName = 'reply-item';


    function init($container) {
        $container = $container || $(document);
        var $els = $container.find('[data-component="' + componentName + '"]');

        var pickerModal = '<div id="replySelector" tabindex="-1" role="dialog" data-hasfoot="false" data-backdrop="false" class="sui-modal hide fade"><div class="modal-dialog"><div class="modal-content"><div class="modal-header"><button type="button" data-dismiss="modal" aria-hidden="true" class="sui-close">×</button><h4 id="contentPickerLabel" class="modal-title"><div class="title">添加回复</div></h4></div><div class="modal-body"><div class="content"><div class="reply"><div class="user"><label><input type="radio" name="random" value="0" checked>&nbsp;后台发表文章用户</label>&nbsp;&nbsp;<label><input type="radio" name="random" value="1">&nbsp;随机小号</label></div><select name="uid" id="userSelect"><option>请选择发表用户</option></select>&nbsp;&nbsp; <input id="authors" type="text" name="authors" placeholder="输入..." class="input-xlarge" autocomplete="off"></div><textarea rows="6" cols="45" id="reply_content" name="reply_content" placeholder="填写评论"></textarea></div></div><div class="modal-footer"><input type="button" data-ok="modal" class="sui-btn btn-primary btn-large js-ok" value="回复"><input type="hidden" id="content-list" name="content-list"></div></div></div></div>';

        $('body').append(pickerModal);

        $('input[name="random"]').click(function () {
            var random = $('input[name="random"]:checked').val();
            var is_random = random == "1" ? 1 : 0;
            if (is_random == 1) {
                $.get('/admin.php?m=Admin&c=User&a=getReplyAuthors', {random: is_random}, function (result) {
                    for (var key in result) {
                        if (result.hasOwnProperty(key)) {
                            $('#userSelect').html('<option value="' + key + '">' + result[key] + '</option>');
                            $('#authors').css('display', 'none');
                        }
                    }
                }, 'JSON');
            } else {
                selectorInit();
            }
        });

        $els.each(function (i, el) {
            $(el).attr('data-toggle', 'modal');
            $(el).attr('data-target', '#replySelector');
            $(el).on('click', function () {
                selectorInit();
                $('.modal-footer .js-ok').click(function () {
                    var reply_id = $(el).data('id');
                    var actionName = $(el).attr('data-action');
                    var uid = $("#userSelect").val();
                    var reply_content = $('#reply_content').val();
                    if (reply_content == '' || uid == '' || reply_id == '' || reply_id === undefined) {
                        alert('评论者或内容为空，请检查');
                        return false;
                    } else {
                        replyData(reply_id, uid, reply_content, actionName);
                        return false;
                    }
                });
            });
        });
    }


    function replyData(reply_id, uid, reply_content, actionName) {
        actionName = actionName || 'replyComment';
        if (reply_id == '' || uid == '' || reply_content == '')
            return false;
        var query = {};
        query.reply_id = reply_id;
        query.content = reply_content;
        query.uid = uid;

        $.ajax({
            url: APP + '?' + VAR_MODULE + '=' + CURR_MODULE + '&' + VAR_CONTROLLER + '=' + CURR_CONTROLLER + '&' + VAR_ACTION + '=' + actionName,
            type: "POST",
            cache: false,
            data: query,
            dataType: "json",
            success: function (result) {
                if (result.isErr == false) {
                    alert('评论失败');
                }
                else {
                    alert('评论成功');
                    window.location.reload();
                }
            }
        });
    }

    function selectorInit() {
        var authors = [];
        $.get('/admin.php?m=Admin&c=User&a=getReplyAuthors', {}, function (result) {
            $('#userSelect').html('<option>请选择发表用户</option>');
            for (var key in result) {
                if (result.hasOwnProperty(key)) {
                    $('#userSelect').append('<option value="' + key + '">' + result[key] + '</option>');
                    authors.push(result[key]);
                    $('#authors').css('display', '');
                }
            }

            $('#authors').autocomplete({
                lookup: authors,
                minChars: 0,
                appendTo: $('#authors').parent(),
                onSelect: function (suggestion) {
                    $("#userSelect option").filter(function () {
                        return this.text == suggestion.value;
                    }).attr('selected', true);
                }
            });
        }, 'JSON');
    }

    return init;
});
define('component/table-list', [], function (require) {
    "use strict";

    function createInputEdit(obj, id, name, type) {
        var module = obj.getAttribute('module');
        var val = $.trim($(obj).html());
        var input;

        if ($("#" + module + "_" + name + "_" + id).length == 0) {
            var txt = document.createElement("INPUT");
            txt.id = module + "_" + name + "_" + id;
            txt.className = 'textinput';
            $(obj).parent().append(txt);
            input = $(txt);

            input.keypress(function (e) {
                if (e.keyCode == 13) {
                    this.blur();
                    return false;
                }

                if (e.keyCode == 27) {
                    $(obj).show();
                    $(this).hide();
                }
            });

            input.blur(function () {
                if ($.trim(this.value).length > 0) {
                    var err = false;
                    var value = $.trim(this.value);
                    val = $.trim($(obj).html());

                    if (type == 'number') {
                        val = parseFloat(val);
                        value = parseFloat(value);
                        if (isNaN(value))
                            err = true;
                    }

                    if (val == value || err) {
                        $(obj).show();
                        $(this).hide();
                        return false;
                    }

                    submitEdit(obj, module, id, value, name);
                }
                else {
                    $(obj).show();
                    $(this).hide();
                }
            });
        }
        else
            input = $("#" + module + "_" + name + "_" + id);

        input.val(val);
        var width = $(obj).width() + 12;
        if (width > $(obj).parent().width() - 12)
            width = $(obj).parent().width() - 12;
        input.show();
        input.width(width).focus();
        $(input).css('width', '98%');
        $(obj).hide();
    }

    function orderEdit(obj, id, name) {
        createInputEdit(obj, id, name, 'number')
    }

    function textEdit(obj, id, name) {
        createInputEdit(obj, id, name, 'text')
    }

    function numberEdit(obj, id, name) {
        createInputEdit(obj, id, name, 'number')
    }

    function submitEdit(obj, module, id, val, name) {
        var query = new Object();
        query.field = name;
        query.val = val;
        query.id = id;

        $.ajax({
            url: APP + '?' + VAR_MODULE + '=' + CURR_MODULE + '&' + VAR_CONTROLLER + '=' + module + '&' + VAR_ACTION + '=editField',
            type: "POST",
            cache: false,
            data: query,
            dataType: "json",
            error: function () {
                $(obj).show();
                $("#" + module + "_" + name + "_" + id).hide();
            },
            success: function (result) {
                if (result.isErr == 0)
                    $(obj).html(result.content);
                else
                    $.ajaxError(result.content);

                $(obj).show();
                $("#" + module + "_" + name + "_" + id).hide();
            }
        });
    }

    function sortBy(field, sort, action, ext) {
        var url = location.href;
        url = url.replace(/(p=\d+?&)|(p=\d+?$)/g, '');
        var len = url.length;
        if (url.substr(len - 1) == '&')
            url = url.substr(0, len - 1);

        if (url.search(/_order=.+?&/g) > -1)
            url = url.replace(/_order=.+?&/g, '_order=' + field + '&');
        else if (url.search(/_order=.+?$/g) > -1)
            url = url.replace(/_order=.+?$/g, '_order=' + field);
        else
            url += '&_order=' + field;

        if (url.search(/_sort=.+?&/g) > -1)
            url = url.replace(/_sort=.+?&/g, '_sort=' + sort + '&');
        else if (url.search(/_sort=.+?$/g) > -1)
            url = url.replace(/_sort=.+?$/g, '_sort=' + sort);
        else
            url += '&_sort=' + sort;

        var fun = function () {
            location.href = url;
        };

        setTimeout(fun, 1);
    }

    function toggleStatus(obj, id, name, method) {

        if (method == undefined) method = 'toggleStatus';
        function changeStatusIcon(obj, newStatus) {
            $(obj).removeClass('icon-boss-status0 icon-boss-status1 icon-boss-status2 icon-boss-status3 icon-boss-status4 icon-boss-status-1 icon-boss-status-2 icon-boss-status-3').addClass('icon-boss-status' + newStatus);
        }

        if ($('i[status]', obj).length == 0)
            return false;

        var module = obj.getAttribute('module');
        var query = new Object();
        query.field = name;
        query.val = $('i[status]', obj).get(0).getAttribute('status');
        query.id = id;

        $.ajax({
            url: APP + '?' + VAR_MODULE + '=' + CURR_MODULE + '&' + VAR_CONTROLLER + '=' + module + '&' + VAR_ACTION + '=' + method,
            type: "POST",
            cache: false,
            data: query,
            dataType: "json",
            success: function (result) {
                if (result.isErr == 0) {
                    var icon = $('i[status]', obj).get(0);
                    changeStatusIcon(icon, result.content);
                    icon.setAttribute('status', result.content);
                }
                else
                    $.ajaxError();
            }
        });
    }

    function init($container) {
        $container = $container || $(document);
        $container.find('[data-sort-action]').each(function (i, el) {
            $(el).on('click', function () {
                sortBy($(el).attr('data-sort-field'), $(el).attr('data-sort-type'), $(el).attr('data-sort-action'));
            });
        });
        $(document).mousemove(function (e) {
            var obj = e.target;
            if ($(obj).prop('tagName').toLowerCase() == 'span' &&
                typeof(obj.onclick) == 'function' &&
                (obj.onclick.toString().indexOf('textEdit') != -1 ||
                obj.onclick.toString().indexOf('numberEdit') != -1)) {
                obj.title = CLICK_EDIT_CONTENT;
                $(obj).addClass('select');
                $(obj).one('mouseout', function () {
                    $(obj).removeClass('select');
                });
            }
        });
    }

    return init;
});
define('component/text-edit', ['common/util'], function (require) {
    "use strict";

    var Util = require('common/util');
    var componentName = 'text-edit';

    function init($container) {
        $container = $container || $(document);

        var $els = $container.find('[data-component="' + componentName + '"]');

        $els.each(function(i, el){
            $(el).on('click', function(){
                var id = $(this).attr('data-id');
                var name = $(this).attr('data-field');
                textEdit(this,id,name);
            });
        });
    }


    function createInputEdit(obj,id,name,type)
    {
        var module = obj.getAttribute('module');
        var val = $.trim($(obj).html());
        var input;

        if($("#"+module + "_" + name + "_" + id).length == 0)
        {
            var txt = document.createElement("INPUT");
            txt.id = module + "_" + name + "_" + id;
            txt.className = 'textinput';
            $(obj).parent().append(txt);
            input = $(txt);

            input.keypress(function(e){
                if (e.keyCode == 13)
                {
                    this.blur();
                    return false;
                }

                if (e.keyCode == 27)
                {
                    $(obj).show();
                    $(this).hide();
                }
            });

            input.blur(function(){
                if($.trim(this.value).length > 0)
                {
                    var err = false;
                    var value = $.trim(this.value);
                    val = $.trim($(obj).html());

                    if(type == 'number')
                    {
                        val = parseFloat(val);
                        value = parseFloat(value);
                        if(isNaN(value))
                            err = true;
                    }

                    if(val == value || err)
                    {
                        $(obj).show();
                        $(this).hide();
                        return false;
                    }

                    submitEdit(obj,module,id,value,name);
                }
                else
                {
                    $(obj).show();
                    $(this).hide();
                }
            });
        }
        else
            input = $("#"+module + "_" + name + "_" + id);

        input.val(val);
        var width = $(obj).width() + 12;
        if(width > $(obj).parent().width() - 12)
            width = $(obj).parent().width() - 12;
        input.show();
        input.width(width).focus();
        $(input).css('width','98%');
        $(obj).hide();
    }
    function orderEdit(obj,id,name)
    {
        createInputEdit(obj,id,name,'number')
    }

    function textEdit(obj,id,name)
    {
        createInputEdit(obj,id,name,'text')
    }

    function numberEdit(obj,id,name)
    {
        createInputEdit(obj,id,name,'number')
    }

    function submitEdit(obj,module,id,val,name)
    {
        var query = new Object();
        query.field = name;
        query.val = val;
        query.id = id;

        $.ajax({
            url: APP + '?' + VAR_MODULE + '=' + CURR_MODULE + '&'+VAR_CONTROLLER+'='+module+'&' + VAR_ACTION + '=editField',
            type:"POST",
            cache: false,
            data:query,
            dataType:"json",
            error: function(){
                $(obj).show();
                $("#"+module + "_" + name + "_" + id).hide();
            },
            success: function(result){
                if(result.isErr == 0)
                    $(obj).html(result.content);
                else
                    $.toast('姿势不对');

                $(obj).show();
                $("#"+module + "_" + name + "_" + id).hide();
            }
        });
    }

    function sortBy(field,sort,action,ext)
    {
        var url = location.href;
        url = url.replace(/(p=\d+?&)|(p=\d+?$)/g,'');
        var len = url.length;
        if(url.substr(len-1) == '&')
            url = url.substr(0,len-1);

        if(url.search(/_order=.+?&/g) > -1)
            url = url.replace(/_order=.+?&/g,'_order='+field+'&');
        else if(url.search(/_order=.+?$/g) > -1)
            url = url.replace(/_order=.+?$/g,'_order='+field);
        else
            url += '&_order='+field;

        if(url.search(/_sort=.+?&/g) > -1)
            url = url.replace(/_sort=.+?&/g,'_sort='+sort+'&');
        else if(url.search(/_sort=.+?$/g) > -1)
            url = url.replace(/_sort=.+?$/g,'_sort='+sort);
        else
            url += '&_sort='+sort;

        var fun = function(){
            location.href = url;
        };

        setTimeout(fun,1);
        //location.href = APP+'?'+VAR_MODULE+'='+CURR_MODULE+'&'+VAR_ACTION+'='+action+'&_order='+field+'&_sort='+sort+ (ext ? '&'+ext : '' );
    }

    function toggleStatus(obj,id,name,method)
    {

        if(method == undefined) method = 'toggleStatus';
        function changeStatusIcon(obj,newStatus){
            $(obj).removeClass('icon-boss-status0 icon-boss-status1 icon-boss-status2 icon-boss-status3 icon-boss-status4 icon-boss-status-1 icon-boss-status-2 icon-boss-status-3').addClass('icon-boss-status'+newStatus);
        }

        if($('i[status]',obj).length == 0)
            return false;

        var module = obj.getAttribute('module');
        var query = new Object();
        query.field = name;
        query.val = $('i[status]',obj).get(0).getAttribute('status');
        query.id = id;

        $.ajax({
            url: APP + '?' + VAR_MODULE + '=' + CURR_MODULE + '&'+VAR_CONTROLLER+'='+module+'&' + VAR_ACTION + '=' + method,
            type:"POST",
            cache: false,
            data:query,
            dataType:"json",
            success: function(result){
                if(result.isErr == 0)
                {
                    var icon = $('i[status]',obj).get(0);
                    changeStatusIcon(icon,result.content);
                    icon.setAttribute('status',result.content);
                }
                else
                    $.toast('姿势不对');
            }
        });
    }
    return init;
});
define('component/toggle-status', ['common/util'], function (require) {
    "use strict";

    var Util = require('common/util');
    var componentName = 'toggle-status';

    function init($container) {
        $container = $container || $(document);

        var $els = $container.find('[data-component="' + componentName + '"]');

        $els.each(function(i, el){
            $(el).on('click', function(){
                toggleStatus(this, $(this).attr('data-id'), $(this).attr('data-field'), $(this).attr('data-action'));
            });
        });
    }

    function toggleStatus(obj,id,name,method)
    {

        if(!method) method = 'toggleStatus';
        function changeStatusIcon(obj,newStatus){
            $(obj).removeClass('icon-boss-status0 icon-boss-status1 icon-boss-status2 icon-boss-status3 icon-boss-status4 icon-boss-status-1 icon-boss-status-2 icon-boss-status-3').addClass('icon-boss-status'+newStatus);
        }

        if($('i[status]',obj).length == 0)
            return false;

        var module = obj.getAttribute('module');
        var query = new Object();
        query.field = name;
        query.val = $('i[status]',obj).get(0).getAttribute('status');
        query.id = id;

        $.ajax({
            url: APP + '?' + VAR_MODULE + '=' + CURR_MODULE + '&'+VAR_CONTROLLER+'='+module+'&' + VAR_ACTION + '=' + method,
            type:"POST",
            cache: false,
            data:query,
            dataType:"json",
            success: function(result){
                if(result.isErr == 0)
                {
                    var icon = $('i[status]',obj).get(0);
                    changeStatusIcon(icon,result.content);
                    icon.setAttribute('status',result.content);
                }
                else
                    $.toast('再试试~');
            }
        });
    }

    return init;
});
define('component/turnTable-editor', ['common/util'], function (require) {
    "use strict";

    var Util = require('common/util');
    var componentName = 'turnTable-editor';

    function init($container) {
        $container = $container || $(document);

        var $els = $container.find('[data-component="' + componentName + '"]');

        $els.each(function(i, el){
            var ele = '<style>.config{padding:.5rem;position:relative}.config table{border:none;border-top:1px solid #ddd;border-left:1px solid #ddd;border-collapse:collapse;border-spacing:0;margin:0;padding:0;position:relative}.config table td{text-align:center;width:10%;font-size:14px;font-weight:400;border-bottom:1px solid #ddd;border-right:1px solid #ddd;padding:.2rem 0;color:#333}.config table .num,.config table .option{text-align:left;padding-left:.5rem}.config table .option select{width:2rem}.config table .num div{padding:.2rem 0}.config table input{border-radius:0;border:1px solid #ddd;padding:.2rem;margin:0 .2rem}.config table .h5-content span{display:inline-block;width:5.5rem;text-align:right}.config .turntable-introduce-img{position:absolute;bottom:150px;right:10px;width:600px}</style><div class=config><table><tr><td></td><td>奖项名称</td><td>优惠券id</td><td>概率</td><td>限制数量</td><td>抽奖结果图片</td></tr><tr><td>1</td><td><input type=text class=prize_name></td><td><input type=text class=coupon_id></td><td><input type=text class=probability></td><td><input type=text class=limit_num></td><td><input type=text class="result_img img"></td></tr><tr><td>2</td><td><input type=text class=prize_name></td><td><input type=text class=coupon_id></td><td><input type=text class=probability></td><td><input type=text class=limit_num></td><td><input type=text class="result_img img"></td></tr><tr><td>3</td><td><input type=text class=prize_name></td><td><input type=text class=coupon_id></td><td><input type=text class=probability></td><td><input type=text class=limit_num></td><td><input type=text class="result_img img"></td></tr><tr><td>4</td><td><input type=text class=prize_name></td><td><input type=text class=coupon_id></td><td><input type=text class=probability></td><td><input type=text class=limit_num></td><td><input type=text class="result_img img"></td></tr><tr><td>5</td><td><input type=text class=prize_name></td><td><input type=text class=coupon_id></td><td><input type=text class=probability></td><td><input type=text class=limit_num></td><td><input type=text class="result_img img"></td></tr><tr><td>6</td><td><input type=text class=prize_name></td><td><input type=text class=coupon_id></td><td><input type=text class=probability></td><td><input type=text class=limit_num></td><td><input type=text class="result_img img"></td></tr><tr><td>7</td><td><input type=text class=prize_name></td><td><input type=text class=coupon_id></td><td><input type=text class=probability></td><td><input type=text class=limit_num></td><td><input type=text class="result_img img"></td></tr><tr><td>8</td><td><input type=text class=prize_name></td><td><input type=text class=coupon_id></td><td><input type=text class=probability></td><td><input type=text class=limit_num></td><td><input type=text class="result_img img"></td></tr><tr><td>备选奖品id</td><td colspan=2 class=option><select name=option_id id=option_id><option value=1>1</option><option value=2>2</option><option value=3>3</option><option value=4>4</option><option value=5>5</option><option value=6>6</option><option value=7>7</option><option value=8>8</option></select></td></tr><tr><td>抽奖次数</td><td colspan=2 class="num draw-num"><div>白金会员:<input type=text></div><div>金牌会员:<input type=text></div><div>银牌会员:<input type=text></div><div>普通会员:<input type=text></div></td></tr><tr><td>活动开始时间</td><td colspan=2 class=num><input type=text class="time start-time"></td></tr><tr><td>活动结束时间</td><td colspan=2 class=num><input type=text class="time end-time"></td></tr><tr><td>页面内容上传</td><td colspan=2 class="num h5-content"><div><span>头图:</span><input type=text class="title-img img"></div><div><span>大转盘背景图:</span><input type=text class="turntable-back-img img"></div><div><span>大转盘图:</span><input type=text class="turntable-img img"></div><div><span>大转盘指针图:</span><input type=text class="turntable-pointer-img img"></div><div><span>大转盘底部图:</span><input type=text class="turntable-bottom-img img"></div><div><span>剩余次数背景图:</span><input type=text class="turntable-num-img img"></div><div><span>尾图:</span><input type=text class="bottom-img img"></div></td></tr><div class=turntable-introduce-img><img src=http://m.meijiabang.cn/img/turntable.jpg alt></div></table></div>';
            $(this).append(ele);
            var self = this;
            $(self).find('.img').each(function () {
                var self = this;
                $(self).imagePicker({
                    el: $(self),
                    mode: 'replace',
                    format: 'url',
                    objType: 'h5SimplePage',
                    objId: 0
                });
            });
            $(self).find('.time').datetimepicker({});
            $(self).find('#option_id option').on('click',function () {
                console.log($(self).find('#option_id option:selected').val());
            });
            console.log($(self).find('#option_id option:selected').val());
        });
    }


    return init;
});
define("component/upload-to-storage", ['common/util'], function(require){
    "use strict";

    var util = require('common/util');
    var componentName = 'upload-to-storage';

    function init($container) {
        $container = $container || $(document);

        var $el = $container.find('[data-component="' + componentName + '"]');

        $el.html('<input type="file" id="upload" name="upload" value="" style="position:absolute;top: -9999px;"/>' +
        '<div id="upload-btn" class="upload-btn"><i class="sui-icon icon-touch-plus"></i><span id="upload-tips"></span></div>');

        //图片上传，触发选择图片按钮
        $('body').on('click', '#upload-btn', function () {
            console.log('fsdfsdfs');
            $('#upload').click();
        });

        //提示组件
        var Tips = {
            'obj': {},

            'init': function (type) {
                var loadingView = '<style>#error-tips{display:none;position:fixed;left:0;right:0;top:0;bottom:0;margin:auto;z-index:200000000000;width:100%;text-align:center;height:100px}#error-tips p{display:inline-block;padding:15px 30px;border-radius:5px;color:#fff;font-size:15px;background-color:rgba(22,22,22,0.8);height:auto}</style><div id="error-tips" class="hide"><p>正在获取中...</p></div>';
                $('body').append(loadingView);
                this.obj = $('#error-tips');
            },
            'show': function (text) {
                this.obj.show().find("p").html(text);
            },
            'hide': function () {
                this.obj.hide();
            },
            'toast': function (text) {
                this.show(text);
                var that = this;
                setTimeout(function () {
                    that.hide();
                }, 1000);
            }
        };
        //初始化
        Tips.init();

        //图片上传
        $('body').on('change', '#upload', function () {
            Tips.show('正在上传...');

            var param = {
                data_path: $el.attr('data-path')
            };

            //上传图片
            $.ajaxFileUpload
            (
                {
                    url: APP + '?' + VAR_MODULE + '=' + CURR_MODULE + '&'+VAR_CONTROLLER+'=Storage&' + VAR_ACTION + '=upload',
                    secureuri: false,
                    fileElementId: 'upload',
                    data: param,
                    dataType: 'json',
                    success: function (data, status) {
                        console.log(data);
                        if (data.url != '') {
                            //处理上传后的数据更新

                            Tips.hide();

                            $('#upload-tips').text('上传成功').css('color', 'green');
                        } else {
                            $('#upload-tips').text('上传失败').css('color', 'red');
                        }
                    },
                    error: function (data, status, e) {
                        alert(e);
                    }
                }
            )

            $('#upload').val('');
        });
    }

    return init;
});

define('component/user-selector', ['common/util'], function (require) {
    "use strict";

    var Util = require('common/util');
    var componentName = 'user-selector';

    function init($container) {
        $container = $container || $(document);

        var $els = $container.find('[data-component="' + componentName + '"]');
        var selected = $('[data-component="' + componentName + '"]').val();

        var pickerModal = '<div id="userSelector" tabindex="-1" role="dialog" data-hasfoot="false" data-backdrop="false" class="sui-modal hide fade"><div class="modal-dialog"><div class="modal-content"><div class="modal-header"><button type="button" data-dismiss="modal" aria-hidden="true" class="sui-close">×</button><h4 id="userPickerLabel" class="modal-title"><div class="tag-group-title active">标签组</div><div class="user-title">用户</div><div class="user-group-title">标签</div></h4></div><div class="modal-body"><div class="tag-group">标签组:<div class="tags-group-multiple"><label><input type="radio" class="audience" name="audience" value="">&nbsp;<span>不限</span></label>&nbsp;&nbsp;</div></div><div class="user">Uid:<select class="user-multiple" multiple></select><div class="add-user">请输入用户ID: <input type="text" name="add-user" placeholder="请输入用户ID"><span class="add">+</span></div></div><div class="user-group"><span class="sui-dropdown dropdown-bordered select"><span class="dropdown-inner"><a id="select" role="button" href="javascript:void(0);" data-toggle="dropdown" class="dropdown-toggle"><input value="UNION" name="tag_operation" type="hidden"><i class="caret"></i><span>并集</span></a><ul role="menu" aria-labelledby="drop4" class="sui-dropdown-menu"><li role="presentation" class="active"><a role="menuitem" tabindex="-1" href="javascript:void(0);" value="UNION">并集</a></li><li role="presentation" ><a role="menuitem" tabindex="-1" href="javascript:void(0);" value="INTERSECTION">交集</a></li><li role="presentation"><a role="menuitem" tabindex="-1" href="javascript:void(0);" value="EXCEPT">差集</a></li><li role="presentation"><a role="menuitem" tabindex="-1" href="javascript:void(0);" value="NOT">非</a></li></ul></span></span>&nbsp;<select class="user-group-multiple" multiple></select></div></div><div class="modal-footer"><input type="button" data-ok="modal" class="sui-btn btn-danger btn-large js-warning" value="重置"><input type="button" data-ok="modal" class="sui-btn btn-primary btn-large js-ok" value="确定"><input type="hidden" id="tag-list" name="tag-list"></div></div></div></div>';

        $('body').append(pickerModal);

        $els.each(function (i, el) {
            $(el).attr('data-toggle', 'modal');
            $(el).attr('data-target', '#userSelector');

            selectorInit();
        });

        //隐藏不需要展示的tab
        var $tabs = $els.attr('tabs-hide');
        if ($tabs != undefined) {
            var $tab = $tabs.split(' ');
            for (var i = 0; i < $tab.length; i++) {
                var $div_name = '.' + $tab[i];
                var $div_title = $div_name + '-title';
                $($div_name).css('display', 'none');
                $($div_title).css('display', 'none');
                var $div_display = $($div_title).siblings('div').eq(0).css('display');
                if ($div_display == 'none') {
                    $($div_name).siblings('div').eq(1).css('display', 'table-cell');
                    $($div_title).siblings('div').eq(1).css('borderBottom', '2px solid #ff416c');
                    $($div_title).siblings('div').eq(1).css('color', '#ff416c');
                } else {
                    $($div_name).siblings('div').eq(0).css('display', 'table-cell');
                    $($div_title).siblings('div').eq(0).css('borderBottom', '2px solid #ff416c');
                    $($div_title).siblings('div').eq(0).css('color', '#ff416c');
                }
            }
        }

        var $usage = $els.attr('usage');
        var urls = new Array();
        if ($usage == 'push') { //如果是用在push,就不展示标签组
            urls = ['/admin.php?m=Admin&c=User&a=getUserTags', '/admin.php?m=Admin&c=DeviceTag&a=getDeviceTags'];
        } else {
            urls = ['/admin.php?m=Admin&c=User&a=getUserTags', '/admin.php?m=Admin&c=DeviceTag&a=getDeviceTags', '/admin.php?m=Admin&c=TagGroup&a=getTagGroup'];
        }

        for (var i = 0; i < urls.length; i++) {
            $.get(urls[i], {}, function (result) {
                var userData = result.data;
                if (userData != null) {
                    var tag = '';
                    var value = '';
                    for (var i = 0, len = userData.length; i < len; i++) {
                        tag = userData[i].name != undefined ? userData[i].name : '*标签组*' + userData[i].title;
                        value = userData[i].tag != undefined ? userData[i].tag : '[' + userData[i].id + ']';
                        $('.user-group-multiple').append('<option value="' + value + '">' + tag + '</option>');
                    }
                }
            }, 'JSON');
        }

        $els.click(function () {
            if (selected) {
                selected = selected.split("|");
                if (selected[0] == 'TAG') {
                    $('input[name="tag_operation"]').attr('value', selected[1]);
                    $('input[name="tag_operation"]').parent().next().find('li').removeAttr('class');
                    $.each($('input[name="tag_operation"]').parent().next().find('a'), function (n, value) {
                        if ($(value).attr('value') == selected[1]) {
                            $('input[name="tag_operation"]').siblings('span').text($(value).text());
                            $(value).parent().attr('class', 'active');
                        }
                    });
                    var $userGroupMulti = $('.user-group-multiple').select2();
                    var tagsExist;
                    tagsExist = selected[2].split(",");
                    $userGroupMulti.val(tagsExist).trigger("change");
                    $('.user-group .select2-search__field').attr('placeholder', '');

                } else if (selected[0] == 'UID') {
                    var $userMulti = $('.user-multiple').select2();
                    var uidsExist;
                    uidsExist = selected[1].split(",");
                    for (var i = 0; i < uidsExist.length; i++) {
                        $('.user-multiple').append('<option value="' + uidsExist[i] + '">' + uidsExist[i] + '</option>');
                    }
                    $userMulti.val(uidsExist).trigger("change");
                }
            }
        });


        //确定,并生成选择好的目标用户
        $('.modal-footer .js-ok').click(function () {
            $('.user .select2-search--inline li').html();
            var userLen = $('.user .select2-selection__choice').length;
            var userStr = 'UID|';
            var state = $('.user').css('display');

            if (state == 'table-cell') {
                for (var i = 0; i < userLen - 1; i++) {
                    userStr = userStr + $('.user .select2-selection__choice').eq(i).text().substring(1) + ',';
                }
                userStr = userStr + $('.user .select2-selection__choice').eq(userLen - 1).text().substring(1);
                if (userLen != 0) {
                    $els.eq(0).val(userStr);
                } else {
                    $els.eq(0).val('');
                }
            } else {
                var status = $('.user-group').css('display');
                if (status == 'table-cell') {
                    var userGroupLen = $('.user-group .select2-selection__choice').length;
                    userStr = 'TAG|' + $('input[name="tag_operation"]').val() + '|';
                    var title = $('.user-group [title]').eq(0).attr('title');
                    var tag = getTagByName(title);
                    if (tag != undefined) {
                        userStr = userStr + tag;
                    }
                    if (userGroupLen > 1) {
                        for (var i = 1; i < userGroupLen; i++) {
                            title = $('.user-group [title]').eq(i).attr('title');
                            tag = getTagByName(title);
                            if (tag != undefined) {
                                userStr = userStr + ',' + tag;
                            }
                        }
                    }
                    if (userGroupLen > 0) {
                        $els.eq(0).val(userStr);
                        $('#tag-list').val(userStr);
                    } else {
                        $els.eq(0).val('');
                    }
                } else {
                    userStr = $(".tag-group").find("input[name=audience]:checked").val();
                    if (userStr != 0) {
                        $els.eq(0).val(userStr);
                        $('#tag-list').val(userStr);
                    } else {
                        $els.eq(0).val('选择用户');
                    }
                }
            }

        });

        //重置
        $('.modal-footer .btn-danger.js-warning').click(function () {
            $els.eq(0).val('');
            $('#tag-list').val('');
        });

        //添加uid
        $('.user .add').click(function () {
            var str = $('.add-user input').val();
            $('.user .select2-search--inline').before('<li class="select2-selection__choice"><span class="select2-selection__choice1__remove">×</span>' + str + '</li>');
            $('.add-user input').val('');
        });

        function getTagByName(str) {
            var ret = str; //如果找不到,还显示原来的
            if (str) {
                var count = $('.user-group-multiple').find('option').length;
                for (var i = 0; i < count; i++) {
                    var optionObj = $('.user-group-multiple').find('option').eq(i);
                    if (optionObj.text() == str) {
                        ret = optionObj.val();
                    }
                }
            }

            return ret;
        }
    }


    function selectorInit() {

        $(".user-multiple").select2({
            tags: true
        });

        $(".user-group-multiple").select2({
            placeholder: "请输入标签"
        });
        //select2 prevent multiple select element automatically sorting
        $(".user-group-multiple").on("select2:select", function (evt) {
            var element = evt.params.data.element;
            var $element = $(element);
            $element.detach();
            $(this).append($element);
            $(this).trigger("change");
        });

        $('.select2-selection__rendered').on('click', '.select2-selection__choice1__remove', function () {
            $(this).parent().remove();
        });

        $('.user').click(function () {
            $('div:last').next().find('span').remove();
            $('.selection span').css('borderRadius', '4px');
        });

        $('.user-title').on('click', function () {
            $('.user-group').css('display', 'none');
            $('.tag-group').css('display', 'none');
            $('.user').css('display', 'table-cell');
            $('.user-group-title').css('color', '#666');
            $('.tag-group-title').css('color', '#666');
            $('.user-title').css('color', '#ff416c');
            $('.user-group-title').css('borderBottom', 'none');
            $('.tag-group-title').css('borderBottom', 'none');
            $('.user-title').css('borderBottom', '2px solid #ff416c');
        });

        $('.user-group-title').on('click', function () {
            $('.user').css('display', 'none');
            $('.tag-group').css('display', 'none');
            $('.user-group').css('display', 'table-cell');
            $('.user-title').css('color', '#666');
            $('.tag-group-title').css('color', '#666');
            $('.user-group-title').css('color', '#ff416c');
            $('.user-title').css('borderBottom', 'none');
            $('.tag-group-title').css('borderBottom', 'none');
            $('.user-group-title').css('borderBottom', '2px solid #ff416c');
        });

        $('.tag-group-title').on('click', function () {
            $('.user').css('display', 'none');
            $('.user-group').css('display', 'none');
            $('.tag-group').css('display', 'table-cell');
            $('.user-title').css('color', '#666');
            $('.user-group-title').css('color', '#666');
            $('.tag-group-title').css('color', '#ff416c');
            $('.user-title').css('borderBottom', 'none');
            $('.user-group-title').css('borderBottom', 'none');
            $('.tag-group-title').css('borderBottom', '2px solid #ff416c');
        });
    }

    return init;
});

define('component/video-upload', ['common/util', 'component/image-upload', 'app/config'], function (require) {
    "use strict";

    var Util = require('common/util'),
        imageUpload = require('component/image-upload'),
        config = require('app/config');
    var componentName = 'video-upload';

    var tpl = '<div id="uploadVideoBtn" data-toggle="modal" data-target="#upload-video" data-keyboard="false" data-backdrop="false" class="sui-btn btn-primary btn-lg">\
        </div>\
                <div id="upload-video" tabindex="-1" role="dialog" data-hasfoot="false"class="sui-modal hide fade">\
                <div class="modal-dialog">\
                <div class="modal-content">\
                <div class="modal-header">\
                <button type="button" data-dismiss="modal" aria-hidden="true" class="sui-close">×</button>\
        <h4 class="modal-title">视频上传</h4>\
        </div>\
        <div class="modal-body">\
        <table>\
        <tr>\
        <td>封面图：</td>\
        <td><div data-component="image-upload" class="image-upload" data-count="1" data-obj-id="" data-name="temp_cover" data-value="" data-format="path" data-obj-type="course_video_cover">1</div>\
        </div></td>\
        </tr>\
        <tr>\
        <td>乐视视频ID：</td>\
        <td><input name="temp_video" id="temp_video"></td>\
        </tr>\
        <tr>\
        <td>OSS视频链接：</td>\
        <td>\
        <span temp_video_path ></span>\
        <input type="text" style="display: none;" size="40" name="temp_video_path" id="temp_video_path">\
        </td>\
        </tr>\
        </table>\
        <div class="modal-footer">\
            <button type="button" data-ok="modal" class="sui-btn btn-primary btn-large">确定</button>\
            <button type="button" data-dismiss="modal" class="sui-btn btn-default btn-large">取消</button>\
        </div>\
        </div>\
        </div>\
        </div>';


    var VideoHandler = {
        //videoDomain: ['http://privatevideo-meijiabang-cn.oss-cn-shanghai.aliyuncs.com/', 'http://mjvideo.oss-cn-hangzhou.aliyuncs.com/'],
        videoDomain: ['', ''],
        //模板
        template: tpl,
        //当前处理的视频对象
        currentVideo: {},
        leftPad: function(str, len){
            str ='00000'+str;
            return str.substring(str.length-len,str.length);
        },
        generateDefaultVideoPath: function(){
            var oDate = new Date();
            return 'course/' + oDate.getFullYear() + '' + VideoHandler.leftPad((oDate.getMonth() + 1) + '', 2) + '/' + VideoHandler.leftPad((oDate.getDate() + ''), 2) + '' + VideoHandler.leftPad((oDate.getHours()+''), 2) + '' + VideoHandler.leftPad((oDate.getMinutes()+''), 2) + '' + (Math.random() + '').substr(2,6) + '.mp4';
        },
        setCurrentVideo: function (video) {
            this.currentVideo = video;
        },
        //展示
        show: function (item) {
            //展示封面和视频链接
            var handler = this.tpl;
            handler.find('[data-component=image-upload]').attr('data-value', item.coverPath);
            handler.find('#temp_video').val(item.videoId);
            handler.find('#temp_video_path').val(VideoHandler.videoDomain[VideoHandler.currentVideo.item.isFree-0] + (item.videoPath||item.defaultVideoPath));
            handler.find('span[temp_video_path]').html(VideoHandler.videoDomain[VideoHandler.currentVideo.item.isFree-0] + (item.videoPath||item.defaultVideoPath));

            imageUpload(handler);

            $('#uploadVideoBtn').click();
        },
        //关闭
        hide: function () {
        },
        //确定添加/修改
        ok: function () {
            //获取设置当前的视频信息
            VideoHandler.currentVideo.item.coverPath = $('#upload-video').find('[name=temp_cover]').val();
            VideoHandler.currentVideo.item.videoId = $('#upload-video').find('[name=temp_video]').val();
            VideoHandler.currentVideo.item.videoPath = $('#upload-video').find('[name=temp_video_path]').val().replace(VideoHandler.videoDomain[VideoHandler.currentVideo.item.isFree-0], '');

            //渲染
            VideoHandler.currentVideo.render();

            return true;
        },
        //删除视频
        remove: function () {
            //二次确认
            if (!confirm('你确定要删除视频吗？')) {
                return false;
            }
            //判断是否已存在于数据库
            if (!VideoHandler.currentVideo.item.id) {
                VideoHandler.currentVideo.item.coverPath = '';
                VideoHandler.currentVideo.item.videoId = 0;
                VideoHandler.currentVideo.item.videoPath = '';
                //渲染
                VideoHandler.currentVideo.render();
            } else {
                var id = VideoHandler.currentVideo.item.id;
                if (!id) {
                    $.toast('别闹了！');
                    return false;
                }

                $.post('/admin.php?m=Admin&c=Course&a=removeVideoAjax', {id: id}, function (result) {
                    if (result.status == 1) {
                        VideoHandler.currentVideo.item.coverPath = '';
                        VideoHandler.currentVideo.item.videoId = 0;
                        VideoHandler.currentVideo.item.videoPath = '';
                        //渲染
                        VideoHandler.currentVideo.render();
                    } else {
                        $.toast('删除失败！');
                    }
                }, 'JSON');
            }

        },
        //初始化
        init: function () {
            //将对话框插入
            this.tpl = $(this.template);
            $('body').append(this.tpl);

            //初始化图片插件
            imageUpload(this.tpl);

            //给对话框绑定事件
            $('#upload-video').on('okHide', function () {
                var r = VideoHandler.ok();
                return r;
            });

            $('#upload-video').on('click', 'span[temp_video_path]', function (){
                $(this).hide();
                console.log($(this).html());
                $('#upload-video').find('input[name=temp_video_path]').val($(this).html()).show();
            });

            $('#upload-video').on('blur', 'input[name=temp_video_path]', function (){
                $(this).hide();
                console.log($(this).html());
                $('#upload-video').find('span[temp_video_path]').html($(this).val()).show();
            });
        }
    };

    var Video = function (options) {
        var that = this, defaultOptions = {
            id: 0,
            objId: 0,
            prefix: '',
            coverName: 'cover_path',
            coverPath: '',
            videoIdName: 'lecloud_video_id',
            videoName: 'video_path',
            videoId: 0,
            videoPath: '',
            isFree: 1,
            defaultVideoPath: VideoHandler.generateDefaultVideoPath()
        };
        this.item = {};
        $.extend(this.item, defaultOptions, options);

        this.defaultTemplate = '<div class="video-default-btn"><i class="sui-icon icon-touch-plus"></i></div>';

        this.template = '<div class="video-item">\
                    <a class="del" href="javascript:;"></a>\
                    <div video-cover="">\
                    <img width="100" src="' + config.imgCdnUrl + '{{coverPath}}">\
                <input type="hidden" name="{{prefix}}{{coverName}}" value="{{coverPath}}">\
                <input type="hidden" name="{{prefix}}{{videoIdName}}" value="{{videoId}}">\
                <input type="hidden" name="{{prefix}}{{videoName}}" value="{{videoPath}}">\
                    <input type="hidden" name="{{prefix}}is_free" value="{{isFree}}">\
                    </div>\
                </div>';

        this._getTemplate = function (item) {
            switch (true) {
                case item.coverPath != '' || item.videoId != 0 :
                    return this.template;
                    break;
                default :
                    return this.defaultTemplate;
            }
        };


        this._compile = function (item) {
            var tpl = this._getTemplate(item);
            //替换数据
            if (tpl.indexOf('video-default-btn') == -1) {
                for (var field in item) {
                    var pattern = new RegExp('{{' + field + '}}', 'g');
                    tpl = tpl.replace(pattern, item[field]);
                }
            }

            return tpl;
        };

        this.render = function () {
            this.item.target.html(this._compile(this.item));
        };

        this.init = function () {
            //
            var target = this.item.target;
            //渲染
            this.render();

            //绑定点击事件
            target.on('click', function () {
                VideoHandler.setCurrentVideo(that);
                console.log(that.item);
                VideoHandler.show(that.item);
            });

            target.on('click', '.del', function (e) {
                VideoHandler.setCurrentVideo(that);
                VideoHandler.remove();
                e.stopPropagation();
            });
        };
    };

    function init($container) {
        $container = $container || $(document);

        var $els = $container.find('[data-component="' + componentName + '"]');

        //插入弹出框
        VideoHandler.init();
        //

        $els.each(function (i, el) {
            //必要字段：data-type、data-cover-name、data-video-name
            //如果data-id不为空，则回显数据
            var options = {
                target: $(el),
                id: $(el).attr('data-id'),
                objId: $(el).attr('data-obj-id'),
                prefix: $(el).attr('data-prefix'),
                coverName: $(el).attr('data-cover-name'),
                coverPath: $(el).attr('data-cover-path'),
                videoIdName: $(el).attr('data-video-id-name'),
                videoName: $(el).attr('data-video-name'),
                videoPath: $(el).attr('data-video-path'),
                videoId: $(el).attr('data-video-id'),
                isFree: $(el).attr('data-is-free')
            };
            var oVideo = new Video(options);
            oVideo.init();
            //
        })
    }

    return init;
});
define('component/view-item', ['common/util'], function (require) {
    "use strict";

    var Util = require('common/util');
    var componentName = 'view-item';

    function init($container) {
        $container = $container || $(document);

        var $els = $container.find('[data-component="' + componentName + '"]');

        $els.each(function(i, el){
            $(el).on('click', function(){
                viewTopic($(this).attr('data-id'), $(this).attr('data-action'));
            });
        });
    }

    function viewTopic(id, action)
    {
        switch (action){
            case 'course':
                window.open("http://m.meijiabang.cn/#!course/"+id,"","width=375,height=667");
                break;
            default :
                window.open("http://m.meijiabang.cn/#!topic/"+id,"","width=375,height=667");
                break;
        }
    }

    return init;
});
/**
 +  * Created by richard on 2016/6/24.
 +  */
define('component/view-list', ['common/util'], function (require) {
    "use strict";

    var Util = require('common/util');
    var componentName = 'view-list';

    function init($container) {
        $container = $container || $(document);

        var $els = $container.find('[data-component="' + componentName + '"]');

        $els.each(function (i, el) {
            var id = $(el).attr('data-id') || 0;
            var pk = $(el).attr('data-pk') || 'id';
            $(el).on('click', function () {
                viewList(this, id, pk, $(this).attr('data-action'));
            });

        });
    }

    function viewList(obj, id, pk, actionName) {
        actionName = actionName || 'viewList';

        if (!id)
            return false;

        if (pk == null)
            pk = 'id';

        switch (actionName) {
            case 'preview':
                var query = {};
                query['id'] = id;
                $.ajax({
                    url: APP + '?' + VAR_MODULE + '=' + CURR_MODULE + '&' + VAR_CONTROLLER + '=' + CURR_CONTROLLER + '&' + VAR_ACTION + '=' + actionName + '&' + pk + '=' + id,
                    type: "POST",
                    cache: false,
                    data: query,
                    dataType: "json",
                    success: function (result) {
                        console.log(result);
                        if (result.isErr == 0) {
                            var url = "http://m.meijiabang.cn/#!" + result.obj_type + "/" + result.obj_id;
                            console.log(url);
                            window.open(url, "", "width=375,height=667");
                        }
                        else
                            $.toast(result.content);
                    }
                });
                break;
            default :
                var fun = function () {
                    location.href = APP + '?' + VAR_MODULE + '=' + CURR_MODULE + '&' + VAR_CONTROLLER + '=' + CURR_CONTROLLER + '&' + VAR_ACTION + '=' + actionName + '&' + pk + '=' + id;
                };
                setTimeout(fun, 1);
                break;
        }

    }

    return init;
});

//组件模板
define('component/', ['common/util'], function (require) {
    "use strict";

    var Util = require('common/util');
    var componentName = '';

    function init($container) {
        $container = $container || $(document);

        var $els = $container.find('[data-component="' + componentName + '"]');
        //    
    //js代码
    //    console.log($els);
    $els.each(function () {
        var el = '<style></style>';
        $(this).append(el);
        //js代码
        //测试init.js
    });




    }

    return init;
});


//组件模板
define('component/share-image', ['common/util'], function (require) {
    "use strict";

    var Util = require('common/util');
    var componentName = 'share-image';

    function init($container) {
        $container = $container || $(document);

        var $els = $container.find('[data-component="' + componentName + '"]');
        //    
    //js代码
    //    console.log($els);
    $els.each(function () {
        var el = '<style>.add-image{display:block;font-size:3rem;background-color:#ddd;width:4rem;height:4rem;line-height:4.3rem;text-align:center;border-radius:20px;color:#999;cursor:pointer}.bk-image{background-size:cover;background-position:center}</style><span class=add-image>+</span> <input type=text style="display: none;"><span class="remove-img" style="cursor: pointer;display: block;width: 4rem;text-align: center;margin: 0.5rem 0;background-color: #00b8e6;color: #fff;padding: 0.2rem;">删除</span>';
        $(this).html(el);
        //js代码
        var self = this;
        var imageClass = $(self).attr('data-class');
        var imageValue = $(self).attr('data-value');
        $(self).find('input').attr('data-key',imageClass);
        // console.log($(self).find('input').val());
        if(imageValue){
            $(self).find('.add-image').html('');
            $(self).find('.add-image').addClass('bk-image');
            $(self).find('.add-image').css('backgroundImage','url('+ imageValue +')');
            $(self).find('input').val(imageValue);
        }

        $(self).find('.remove-img').on('click',function () {
            $(self).find('.add-image').css('backgroundImage','');
            $(self).find('input').val('');
        });

        $(self).find('.add-image').imagePicker({
            el: $(self).find('input'),
            mode: 'replace',
            format: 'url',
            objType: 'h5SimplePage',
            objId: 0,
            callback: function (obj) {
                var src = $(self).find('input').val();
                $(self).find('.add-image').html('');
                $(self).find('.add-image').addClass('bk-image');
                $(self).find('.add-image').css('backgroundImage','url('+ src +')');
            }
        });
        
    });




    }

    return init;
});


define('plugin/app-route-picker', [], function (require) {
    "use strict";

    var BaseSelector = require('plugin/base-selector');
    //路由数据
    var appRouteData = [];
    var utmContent = null;



    //路由的公共的参数
    // var appRouteCommonParams = [
    //     {
    //         '__source' : '来源'
    //     }
    // ];

    function initRoute($that, options) {
      options = options || {};
        var defaultOptions = {
            app_route: decodeURIComponent($that.val()),
            checkRoute: true,
            callback: function (opts) {
                $that.val(opts.route).change();
            },
            selectorData: appRouteData,
            utmContent: utmContent
        };
        var setting = $.extend({}, defaultOptions, options);
        var selector = new BaseSelector(setting);
        selector.init();
    }

    $.fn.appRoutePicker = function (options) {
        $(this).each(function (i, el) {
            $(el).on("click", function () {
                var $that = $(this);

                if (appRouteData.length == 0) {
                    $.ajax({
                        url: '/boss/backend/admin/app-route/find-list',
                        success: function (response) {
                            console.log(response);
                            appRouteData = [];
                            response.data.config.map(function (item) {
                                appRouteData.push({
                                    group: item.title,
                                    items: item.routeList
                                })
                            });
                            utmContent = response.data.utm_content;
                            console.log(appRouteData);
                            initRoute($that, options)

                        }
                    });
                } else {

                    initRoute($that, options)
                }



                $('#select_approute .s_title p').html('选择APP路由');
                return false;

            })

        });

        return this;
    };
});
define('plugin/base-selector', ['plugins/datetime-picker'], function (require) {
    "use strict";
    require('plugins/datetime-picker');

    var BaseSelector = function (options) {
        var that = this;
        var businessStr = '', activityStr = '', tagStr = '';
        var utmContent = options.utmContent;
        if (utmContent) {
            utmContent.business.map(function (item) {
                businessStr += '<option value="' + item + '">' + item + '</option>';
            });
            utmContent.activities.map(function (item) {
                activityStr += '<option value="' + item + '">' + item + '</option>';
            });
            utmContent.tags.map(function (item) {
                tagStr += '<option value="' + item + '">' + item + '</option>';
            });
        }
        var html = '<div id="select_approute" tabindex="-1" role="dialog" data-width="760" data-hasfoot="false" data-backdrop="static" class="approute-picker sui-modal hide fade"><div class="modal-dialog"><div class="modal-content"><div class="modal-body"><button type="button" data-dismiss="modal" aria-hidden="true" class="sui-close">×</button><div class="s_title"><p>选择组件</p></div><div class="s_route"><div class="s_route_list"><div class="group-wrap"><div class="group-title">常用:</div><ul><li class="route-item" route-id="0" route-group="0">领优惠券</li><li class="route-item s_select" route-id="1" route-group="0">插入视频</li></ul></div></div></div><div class="s_param"><ul><li><p data-name="poster">封面链接:</p><input type="text" value=""></li><li><p data-name="src">视频链接:</p><input type="text" value=""></li></ul></div><div class="s_button"><button class="s_submit sui-btn btn-xlarge btn-primary">确认</button><button class="s_close sui-btn btn-xlarge">取消</button></div></div></div></div></div>';
        var utmContentHtml = '<div id="utm_content" tabindex="-1" role="dialog" data-hasfoot="false" class="sui-modal hide fade"><div class="modal-dialog"><div class="modal-content"><div class="modal-header"><h4 id="myModalLabel" class="modal-title">设置UTM追踪统计信息</h4></div><div class="modal-body">\
        <div style="margin: 10px 0">\
        <div style="display: inline-block;width: 70px;text-align: right">标题:</div><input type="text" style="width: 300px;height: 30px;margin-left: 5px;padding-left:5px;" class="utm-title">\
        </div>\
        <div style="margin: 10px 0">\
        <label for="id_label_single">\
        <div style="display: inline-block;width: 70px;text-align: right">业务方:</div>\
        <select class="js-example-basic-single js-states form-control business" id="id_label_single">'
            + businessStr + '\
            </select>\
            </label>\
            </div>\
            <div style="margin: 10px 0"><label for="id_label_multiple">\
            <div style="display: inline-block;width: 70px;text-align: right">系列活动名:</div>\
        <select class="js-example-basic-multiple js-states form-control activity" id="id_label_multiple" multiple="multiple">'
            + activityStr + '\
            </select>\
            </label></div>\
            <div style="margin: 10px 0"><label for="id_label_multiple">\
            <div style="display: inline-block;width: 70px;text-align: right">标签:</div>\
        <select class="js-example-basic-multiple js-states form-control tags" id="id_label_multiple" multiple="multiple">'
            + tagStr + '\
            </select>\
            </label></div>\
            </div><div class="modal-footer"><button type="button" data-ok="modal" class="sui-btn btn-primary btn-large utm-btn">提交</button></div></div></div></div>';

        this.selectorData = options.selectorData;
        if (options.selectorCommonParams) {
            that.selectorCommonParams = options.selectorCommonParams;
            that.commonParams = {};
            $.each(that.selectorCommonParams, function (first_level_index, first_level_value) {
                $.each(first_level_value, function (second_level_index, second_level_value) {
                    that.commonParams[second_level_index] = second_level_value;
                });
            });
        }

        this.settings = options;

        console.log(params);

        if ($('body #select_approute').length == 0) {
            $('body').append(html);
            $('body').append(utmContentHtml);

            $('body').append('<style>.select2-container--default .select2-selection--single{width:300px}.select2-container--default .select2-selection--multiple{width:300px}</style>');
            // 添加事件


            var params = {};
            var paramsStr = this.settings.app_route ? this.settings.app_route.split('?')[1] : '';
            var paramsArray = paramsStr && paramsStr.split('&');
            if (paramsArray) {
                paramsArray.map(function (item) {
                    params[item.split('=')[0]] = item.split('=')[1];
                });
                $('.utm-title').val(decodeURIComponent(params.content_title));
                $('.business').val(decodeURIComponent(params.content_business));
                $('.activity').val(decodeURIComponent(params.content_act).split(','));
                $('.tags').val(decodeURIComponent(params.content_tags).split(','));
            }

            $('body').on("click", ".s_route_list li", function (event) {
                that.settings.app_route = '';
                that.binding_data($(this), false)
            }).on('mousewheel', ".s_route_list",  function (event) {
                event.stopPropagation()
            })

        }

        var checkRoute = options.checkRoute || false;
        $('.s_submit').unbind("click").bind("click", _submit);
        $('body').on('click', ".s_close", function () {
            $('.s_submit').unbind("click", _submit);
            that.hide();
        });

        var html = '';
        for (var i = 0, len = this.selectorData.length; i < len; i++) {
            var groupHtml = '';
            for (var j in this.selectorData[i]['items']) {
                if (!!this.selectorData[i]['items'][j]) {
                    groupHtml += "<li class='route-item' route-id=" + j + " route-group=" + i + ">" + this.selectorData[i]['items'][j].name + "</li>";
                }
            }
            html += '<div class="group-wrap"><div class="group-title">' + this.selectorData[i]['group'] + ':</div><ul>' + groupHtml + '</ul></div>';
        }

        $(".s_route_list").html(html);

        this.binding_data = function (this_el, once) {

            $(".s_route_list li").removeClass("s_select")

            if (this.settings.app_route != '') {
                var selected = null;
                // console.log(this.settings);
                if (!this.settings.notEncode) {
                    this.settings.app_route = this.settings.app_route.replace(/(&|\?)content_title=(.*)&content_business=(.*)&content_act=(.*)&content_tags=(.*)/, '');
                }
                for (var i = 0, len = this.selectorData.length; i < len; i++) {
                    for (var j in this.selectorData[i]['items']) {
                        if (this.is_match(this.selectorData[i]['items'][j], this.settings.app_route)) {
                            selected = $('[route-group=' + i + '][route-id=' + j + ']');

                            this.settings.params = this.match_app_route(this.selectorData[i]['items'][j], this.settings.app_route);
                            break;
                        }
                    }
                    if (selected) {
                        this_el = selected;
                        break;
                    }
                }
            }

            this_el.addClass("s_select");
            var route_id = this_el.attr("route-id");
            var route_group = this_el.attr("route-group");
            var _parms
            if (route_id) {
                _parms = that.selectorData[route_group]['items'][route_id].params

                if (that.commonParams) {
                    _parms = _parms ? _parms : {};
                    if (!that.selectorData[route_group]['items'][route_id].params) {
                        that.selectorData[route_group]['items'][route_id].params = {};
                    }
                    $.extend(_parms, that.commonParams);
                    $.extend(that.selectorData[route_group]['items'][route_id].params, that.commonParams);
                    $.each(that.commonParams, function (common_param_key, common_param_value) {
                        var connectStr = that.selectorData[route_group]['items'][route_id].route.indexOf('?') == -1 ? '?' : '&';
                        if (that.selectorData[route_group]['items'][route_id].route.indexOf(common_param_key) == -1) {
                            that.selectorData[route_group]['items'][route_id].route
                                += connectStr + common_param_key + '=:' + common_param_key;
                        }
                    });
                }
            }

            var _li = '';
            if (_parms) {
                //罗列参数
                for (var i in _parms) {
                    if (typeof _parms[i] === 'object') {
                        var property = '';
                        switch (_parms[i]['type']) {
                            case 'image':
                                property = 'param-image-picker';
                                break;
                            case 'date':
                                property = 'param-date';
                                break;
                            case 'datetime':
                                property = 'param-datetime';
                                break;
                            case 'coupon':
                                property = 'param-coupon';
                                break;
                            case 'app_route':
                                property = 'param-app-route';
                                break;
                        }

                        console.log(_parms[i]);

                        var canNull = 0;
                        if (_parms[i]['can_null']) {
                            canNull = 1;
                        }
                        _li += '<li><p data-name="' + i + '">' + _parms[i]['name'] + ':</p><input type="text" ' + property + ' value="" data-can-null="' + canNull + '"/></li>';
                    } else {
                        _li += '<li><p data-name="' + i + '">' + _parms[i] + ':</p><input type="text"  value="" /></li>'
                    }
                }
                $(".s_param ul").html(_li);


                $('.s_param ul [param-image-picker]').imagePicker({
                    el: 'self',
                    mode: 'replace',
                    format: 'shortTag',
                    objType: 'component',
                    objId: 0
                });
                $('.s_param ul [param-datetime]').datetimepicker();
                $('.s_param ul [param-app-route]').appRoutePicker();
            } else {
                $(".s_param ul").html('无参数~~')
            }

            if (this.settings.params && once) {
                for (var i in this.settings.params) {
                    $(".s_param ul>li p[data-name=" + i + "]").next().val(this.settings.params[i])
                }
            }

        };

        function _submit(event) {
            var $utm = $('#utm_content')
            if (!that.settings.notEncode) {
                $utm.modal('show');
                $(".js-example-basic-single").select2();
                $(".js-example-basic-multiple").select2();
                setTimeout(function () {
                    $(document).off('focusin.modal')
                }, 500);
                $utm.find('.select2-search__field').width(300).on('click', function () {
                    setTimeout(function () {
                        $('.select2-dropdown.select2-dropdown--below').width(300)
                    }, 500)
                });

                $utm.find('.select2-selection').width(300).on('click', function () {
                    setTimeout(function () {
                        $('.select2-dropdown.select2-dropdown--below').width(300)
                    }, 500)
                });
                $('.select2-search__field').removeAttr('tabindex');
                $('.utm-btn').on('click', function () {
                    var title = $('.utm-title').val();
                    var business = $('.business').val();
                    var activity = $('.activity').val() && $('.activity').val().join(',');
                    var tags = $('.tags').val() && $('.tags').val().join(',');
                    var utmContent = 'content_title=' + encodeURIComponent(title) + '&' + 'content_business=' + encodeURIComponent(business) + '&' + 'content_act=' + encodeURIComponent(activity) + '&' + 'content_tags=' + encodeURIComponent(tags);

                    if (opts.route.indexOf('?') > 0) {
                        opts.route += '&' + utmContent;
                    } else {
                        opts.route += '?' + utmContent;
                    }
                    // console.log(opts.route);

                    if (that.settings.callback && typeof (that.settings.callback) == "function") {

                        that.settings.callback(opts)
                    }


                    /*重置一下editor-config*/
                    // $(window).trigger('refreshEditorConfig')


                    /*====2017.10.25 这段代码差点看晕====*/
                    $('.utm-btn').off('click');
                });
            }
            var opts = {
                route_id: $(".s_route_list .s_select").attr("route-id"),
                route_group: $(".s_route_list .s_select").attr("route-group"),
                name: $(".s_route_list .s_select").html(),
                route: "",
                params: {}
            };


            if (checkRoute && !opts.route_id && opts.route_id !== '0') {
                alert("你还没选择路由~~")
                return false;
            }

            var routeName = that.selectorData[opts.route_group]['items'][opts.route_id].name;

            for (var i = 0; i < $(".s_param ul > li").length; i++) {

                var input_val = that.settings.notEncode ? $(".s_param ul > li").eq(i).find("input").val() : encodeURIComponent($(".s_param ul > li").eq(i).find("input").val()),
                    input_can_null = $(".s_param ul > li").eq(i).find("input").attr('data-can-null');

                if (routeName == '自定义') {
                    input_val = decodeURIComponent(input_val);
                }

                if (!input_val && input_can_null == 0) {
                    alert("\"" + $(".s_param ul > li").eq(i).find("p").html() + "\">>参数不能为空<<")
                    return false;
                }

                opts.params[$(".s_param ul > li").eq(i).find("p").attr("data-name")] = input_val;

            }

            opts.route = that.selectorData[opts.route_group]['items'][opts.route_id].route;


            for (var i in opts.params) {
                var reg = new RegExp("(:" + i + ")", "g");
                opts.route = opts.route.replace(reg, (opts.params[i].trim()));


                //为空则删除公共参数
                if (that.commonParams && that.commonParams[i] && opts.params && !opts.params[i]) {
                    var reg = new RegExp("([&|?]" + i + "=)", "g");
                    opts.route = opts.route.replace(reg, '');

                    var reg = new RegExp("([&|?]" + i + "=:" + i + ")", "g");
                    that.selectorData[opts.route_group]['items'][opts.route_id].route =
                        that.selectorData[opts.route_group]['items'][opts.route_id].route.replace(reg, '');
                }

                if (checkRoute) {
                    opts.route = opts.route.replace(/([\+\，\！\？]|[\u4E00-\uFA29]|[\uE7C7-\uE7F3])/g, function (a) {
                        return encodeURIComponent(a)
                    }).replace(/\s+/g, '');
                }

                //opts.route = opts.route.replace(reg, encodeURIComponent(opts.params[i]))
            }

            // if (routeName == '打开App内部网页' || routeName == '打开App外部网页') {
            //     let urlParams = opts.route.split('?')[1];
            //     console.log(urlParams, decodeURIComponent(urlParams).indexOf('?'));
            //     if (decodeURIComponent(urlParams).indexOf('?') > 0) {
            //         opts.route = opts.route.replace('&__source=', encodeURIComponent('&__source='));
            //     } else {
            //         // console.log(i);
            //         opts.route = opts.route.replace('&__source=', encodeURIComponent('?__source='));
            //         opts.route = opts.route + '&__source=' + opts.params['__source'];
            //     }
            //
            //     // opts.route = opts.route.replace('&__source=', encodeURIComponent('&__source='));
            //     console.log(opts.route);
            // }

            if (that.settings.callback && typeof (that.settings.callback) == "function") {
                that.settings.callback(opts)
            }

            setTimeout(function () {
                BaseSelector.prototype.hide();
            }, 0);

            $('.s_submit').unbind("click", _submit)
        }
    }

    BaseSelector.prototype = {

        constructor: BaseSelector,

        init: function (options) {

            var $this = $(this)
            // 数据初始化
            this.binding_data($('[route-id="' + this.settings.id + '"]'), true)

            // 界面显示
            this.show();

        },
        destroy: function () {
            $('.s_route_list li').unbind('click');
            $('.s_close').unbind('click');
            $('.s_submit').unbind('click');
        },
        show: function (event) {
            $('#select_approute').modal('show');
        },
        hide: function () {
            $(".s_route_list li").removeClass("s_select")
            $(".s_param ul").html('无参数~~')
            //BaseSelector.prototype.destroy();
            $('#select_approute').modal('hide');
        },

        /**
         * 判断路由是否匹配
         * @param  {[type]} app_route [路由]
         * @return {[type]}           [description]
         */
        is_match: function (appRouteObj, route) {

            var routeTpl = appRouteObj.route.replace(/(\?|\/)/g, '\\$1');
            for (var p in appRouteObj.params) {
                routeTpl = routeTpl.replace(':' + p, '(.+)');
            }
            var pattern = new RegExp('^' + routeTpl + '$');
            return pattern.test(route);
        },
        /**
         * 匹配路由信息
         * @param  {[type]} app_route [路由]
         * @return {[type]}           [description]
         */
        match_app_route: function (appRouteObj, route) {

            var route = decodeURI(route);
            var routeTpl = appRouteObj.route.replace(/(\?|\/)/g, '\\$1');//正则待完善
            console.log(appRouteObj.route, routeTpl);
            for (var p in appRouteObj.params) {
                routeTpl = routeTpl.replace(':' + p, '(.+)');
            }
            var pattern = new RegExp(routeTpl);
            var info = route.match(pattern),
                params = {}
                , i = 1;

            for (var p in appRouteObj.params) {
                params[p] = info[i++];
            }
            return params;
        }
    };
    return BaseSelector;

});




/*jshint curly:true, eqeqeq:true, laxbreak:true, noempty:false */
/*

  The MIT License (MIT)

  Copyright (c) 2007-2013 Einar Lielmanis and contributors.

  Permission is hereby granted, free of charge, to any person
  obtaining a copy of this software and associated documentation files
  (the "Software"), to deal in the Software without restriction,
  including without limitation the rights to use, copy, modify, merge,
  publish, distribute, sublicense, and/or sell copies of the Software,
  and to permit persons to whom the Software is furnished to do so,
  subject to the following conditions:

  The above copyright notice and this permission notice shall be
  included in all copies or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
  ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
  SOFTWARE.


 CSS Beautifier
---------------

    Written by Harutyun Amirjanyan, (amirjanyan@gmail.com)

    Based on code initially developed by: Einar Lielmanis, <einar@jsbeautifier.org>
        http://jsbeautifier.org/

    Usage:
        css_beautify(source_text);
        css_beautify(source_text, options);

    The options are (default in brackets):
        indent_size (4)                   — indentation size,
        indent_char (space)               — character to indent with,
        selector_separator_newline (true) - separate selectors with newline or
                                            not (e.g. "a,\nbr" or "a, br")
        end_with_newline (false)          - end with a newline
        newline_between_rules (true)      - add a new line after every css rule

    e.g

    css_beautify(css_source_text, {
      'indent_size': 1,
      'indent_char': '\t',
      'selector_separator': ' ',
      'end_with_newline': false,
      'newline_between_rules': true
    });
*/

// http://www.w3.org/TR/CSS21/syndata.html#tokenization
// http://www.w3.org/TR/css3-syntax/

(function() {
    function css_beautify(source_text, options) {
        options = options || {};
        source_text = source_text || '';
        // HACK: newline parsing inconsistent. This brute force normalizes the input.
        source_text = source_text.replace(/\r\n|[\r\u2028\u2029]/g, '\n')

        var indentSize = options.indent_size || 4;
        var indentCharacter = options.indent_char || ' ';
        var selectorSeparatorNewline = (options.selector_separator_newline === undefined) ? true : options.selector_separator_newline;
        var end_with_newline = (options.end_with_newline === undefined) ? false : options.end_with_newline;
        var newline_between_rules = (options.newline_between_rules === undefined) ? true : options.newline_between_rules;
        var eol = options.eol ? options.eol : '\n';

        // compatibility
        if (typeof indentSize === "string") {
            indentSize = parseInt(indentSize, 10);
        }

        if(options.indent_with_tabs){
            indentCharacter = '\t';
            indentSize = 1;
        }

        eol = eol.replace(/\\r/, '\r').replace(/\\n/, '\n')


        // tokenizer
        var whiteRe = /^\s+$/;
        var wordRe = /[\w$\-_]/;

        var pos = -1,
            ch;
        var parenLevel = 0;

        function next() {
            ch = source_text.charAt(++pos);
            return ch || '';
        }

        function peek(skipWhitespace) {
            var result = '';
            var prev_pos = pos;
            if (skipWhitespace) {
                eatWhitespace();
            }
            result = source_text.charAt(pos + 1) || '';
            pos = prev_pos - 1;
            next();
            return result;
        }

        function eatString(endChars) {
            var start = pos;
            while (next()) {
                if (ch === "\\") {
                    next();
                } else if (endChars.indexOf(ch) !== -1) {
                    break;
                } else if (ch === "\n") {
                    break;
                }
            }
            return source_text.substring(start, pos + 1);
        }

        function peekString(endChar) {
            var prev_pos = pos;
            var str = eatString(endChar);
            pos = prev_pos - 1;
            next();
            return str;
        }

        function eatWhitespace() {
            var result = '';
            while (whiteRe.test(peek())) {
                next();
                result += ch;
            }
            return result;
        }

        function skipWhitespace() {
            var result = '';
            if (ch && whiteRe.test(ch)) {
                result = ch;
            }
            while (whiteRe.test(next())) {
                result += ch;
            }
            return result;
        }

        function eatComment(singleLine) {
            var start = pos;
            singleLine = peek() === "/";
            next();
            while (next()) {
                if (!singleLine && ch === "*" && peek() === "/") {
                    next();
                    break;
                } else if (singleLine && ch === "\n") {
                    return source_text.substring(start, pos);
                }
            }

            return source_text.substring(start, pos) + ch;
        }


        function lookBack(str) {
            return source_text.substring(pos - str.length, pos).toLowerCase() ===
                str;
        }

        // Nested pseudo-class if we are insideRule
        // and the next special character found opens
        // a new block
        function foundNestedPseudoClass() {
            var openParen = 0;
            for (var i = pos + 1; i < source_text.length; i++) {
                var ch = source_text.charAt(i);
                if (ch === "{") {
                    return true;
                } else if (ch === '(') {
                    // pseudoclasses can contain ()
                    openParen += 1;
                } else if (ch === ')') {
                    if (openParen == 0) {
                        return false;
                    }
                    openParen -= 1;
                } else if (ch === ";" || ch === "}") {
                    return false;
                }
            }
            return false;
        }

        // printer
        var basebaseIndentString = source_text.match(/^[\t ]*/)[0];
        var singleIndent = new Array(indentSize + 1).join(indentCharacter);
        var indentLevel = 0;
        var nestedLevel = 0;

        function indent() {
            indentLevel++;
            basebaseIndentString += singleIndent;
        }

        function outdent() {
            indentLevel--;
            basebaseIndentString = basebaseIndentString.slice(0, -indentSize);
        }

        var print = {};
        print["{"] = function(ch) {
            print.singleSpace();
            output.push(ch);
            print.newLine();
        };
        print["}"] = function(ch) {
            print.newLine();
            output.push(ch);
            print.newLine();
        };

        print._lastCharWhitespace = function() {
            return whiteRe.test(output[output.length - 1]);
        };

        print.newLine = function(keepWhitespace) {
            if (output.length) {
                if (!keepWhitespace && output[output.length - 1] !== '\n') {
                    print.trim();
                }

                output.push('\n');

                if (basebaseIndentString) {
                    output.push(basebaseIndentString);
                }
            }
        };
        print.singleSpace = function() {
            if (output.length && !print._lastCharWhitespace()) {
                output.push(' ');
            }
        };

        print.preserveSingleSpace = function() {
            if (isAfterSpace) {
                print.singleSpace();
            }
        };

        print.trim = function() {
            while (print._lastCharWhitespace()) {
                output.pop();
            }
        };


        var output = [];
        /*_____________________--------------------_____________________*/

        var insideRule = false;
        var insidePropertyValue = false;
        var enteringConditionalGroup = false;
        var top_ch = '';
        var last_top_ch = '';

        while (true) {
            var whitespace = skipWhitespace();
            var isAfterSpace = whitespace !== '';
            var isAfterNewline = whitespace.indexOf('\n') !== -1;
            last_top_ch = top_ch;
            top_ch = ch;

            if (!ch) {
                break;
            } else if (ch === '/' && peek() === '*') { /* css comment */
                var header = indentLevel === 0;

                if (isAfterNewline || header) {
                    print.newLine();
                }

                output.push(eatComment());
                print.newLine();
                if (header) {
                    print.newLine(true);
                }
            } else if (ch === '/' && peek() === '/') { // single line comment
                if (!isAfterNewline && last_top_ch !== '{' ) {
                    print.trim();
                }
                print.singleSpace();
                output.push(eatComment());
                print.newLine();
            } else if (ch === '@') {
                print.preserveSingleSpace();
                output.push(ch);

                // strip trailing space, if present, for hash property checks
                var variableOrRule = peekString(": ,;{}()[]/='\"");

                if (variableOrRule.match(/[ :]$/)) {
                    // we have a variable or pseudo-class, add it and insert one space before continuing
                    next();
                    variableOrRule = eatString(": ").replace(/\s$/, '');
                    output.push(variableOrRule);
                    print.singleSpace();
                }

                variableOrRule = variableOrRule.replace(/\s$/, '')

                // might be a nesting at-rule
                if (variableOrRule in css_beautify.NESTED_AT_RULE) {
                    nestedLevel += 1;
                    if (variableOrRule in css_beautify.CONDITIONAL_GROUP_RULE) {
                        enteringConditionalGroup = true;
                    }
                }
            } else if (ch === '#' && peek() === '{') {
              print.preserveSingleSpace();
              output.push(eatString('}'));
            } else if (ch === '{') {
                if (peek(true) === '}') {
                    eatWhitespace();
                    next();
                    print.singleSpace();
                    output.push("{}");
                    print.newLine();
                    if (newline_between_rules && indentLevel === 0) {
                        print.newLine(true);
                    }
                } else {
                    indent();
                    print["{"](ch);
                    // when entering conditional groups, only rulesets are allowed
                    if (enteringConditionalGroup) {
                        enteringConditionalGroup = false;
                        insideRule = (indentLevel > nestedLevel);
                    } else {
                        // otherwise, declarations are also allowed
                        insideRule = (indentLevel >= nestedLevel);
                    }
                }
            } else if (ch === '}') {
                outdent();
                print["}"](ch);
                insideRule = false;
                insidePropertyValue = false;
                if (nestedLevel) {
                    nestedLevel--;
                }
                if (newline_between_rules && indentLevel === 0) {
                    print.newLine(true);
                }
            } else if (ch === ":") {
                eatWhitespace();
                if ((insideRule || enteringConditionalGroup) &&
                    !(lookBack("&") || foundNestedPseudoClass())) {
                    // 'property: value' delimiter
                    // which could be in a conditional group query
                    insidePropertyValue = true;
                    output.push(':');
                    print.singleSpace();
                } else {
                    // sass/less parent reference don't use a space
                    // sass nested pseudo-class don't use a space
                    if (peek() === ":") {
                        // pseudo-element
                        next();
                        output.push("::");
                    } else {
                        // pseudo-class
                        output.push(':');
                    }
                }
            } else if (ch === '"' || ch === '\'') {
                print.preserveSingleSpace();
                output.push(eatString(ch));
            } else if (ch === ';') {
                insidePropertyValue = false;
                output.push(ch);
                print.newLine();
            } else if (ch === '(') { // may be a url
                if (lookBack("url")) {
                    output.push(ch);
                    eatWhitespace();
                    if (next()) {
                        if (ch !== ')' && ch !== '"' && ch !== '\'') {
                            output.push(eatString(')'));
                        } else {
                            pos--;
                        }
                    }
                } else {
                    parenLevel++;
                    print.preserveSingleSpace();
                    output.push(ch);
                    eatWhitespace();
                }
            } else if (ch === ')') {
                output.push(ch);
                parenLevel--;
            } else if (ch === ',') {
                output.push(ch);
                eatWhitespace();
                if (selectorSeparatorNewline && !insidePropertyValue && parenLevel < 1) {
                    print.newLine();
                } else {
                    print.singleSpace();
                }
            } else if (ch === ']') {
                output.push(ch);
            } else if (ch === '[') {
                print.preserveSingleSpace();
                output.push(ch);
            } else if (ch === '=') { // no whitespace before or after
                eatWhitespace()
                ch = '=';
                output.push(ch);
            } else {
                print.preserveSingleSpace();
                output.push(ch);
            }
        }


        var sweetCode = '';
        if (basebaseIndentString) {
            sweetCode += basebaseIndentString;
        }

        sweetCode += output.join('').replace(/[\r\n\t ]+$/, '');

        // establish end_with_newline
        if (end_with_newline) {
            sweetCode += '\n';
        }

        if (eol != '\n') {
            sweetCode = sweetCode.replace(/[\n]/g, eol);
        }

        return sweetCode;
    }

    // https://developer.mozilla.org/en-US/docs/Web/CSS/At-rule
    css_beautify.NESTED_AT_RULE = {
        "@page": true,
        "@font-face": true,
        "@keyframes": true,
        // also in CONDITIONAL_GROUP_RULE below
        "@media": true,
        "@supports": true,
        "@document": true
    };
    css_beautify.CONDITIONAL_GROUP_RULE = {
        "@media": true,
        "@supports": true,
        "@document": true
    };
    define('plugin/beautify-css', [], function() {
        return {
            css_beautify: css_beautify
        };
    });
    /*global define */
    /*if (typeof define === "function" && define.amd) {
        // Add support for AMD ( https://github.com/amdjs/amdjs-api/wiki/AMD#defineamd-property- )
        define([], function() {
            return {
                css_beautify: css_beautify
            };
        });
    } else if (typeof exports !== "undefined") {
        // Add support for CommonJS. Just put this file somewhere on your require.paths
        // and you will be able to `var html_beautify = require("beautify").html_beautify`.
        exports.css_beautify = css_beautify;
    } else if (typeof window !== "undefined") {
        // If we're running a web page and don't have either of the above, add our one global
        window.css_beautify = css_beautify;
    } else if (typeof global !== "undefined") {
        // If we don't even have window, try global.
        global.css_beautify = css_beautify;
    }
*/
}());

/*jshint curly:true, eqeqeq:true, laxbreak:true, noempty:false */
/*

  The MIT License (MIT)

  Copyright (c) 2007-2013 Einar Lielmanis and contributors.

  Permission is hereby granted, free of charge, to any person
  obtaining a copy of this software and associated documentation files
  (the "Software"), to deal in the Software without restriction,
  including without limitation the rights to use, copy, modify, merge,
  publish, distribute, sublicense, and/or sell copies of the Software,
  and to permit persons to whom the Software is furnished to do so,
  subject to the following conditions:

  The above copyright notice and this permission notice shall be
  included in all copies or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
  ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
  SOFTWARE.


 Style HTML
---------------

  Written by Nochum Sossonko, (nsossonko@hotmail.com)

  Based on code initially developed by: Einar Lielmanis, <einar@jsbeautifier.org>
    http://jsbeautifier.org/

  Usage:
    style_html(html_source);

    style_html(html_source, options);

  The options are:
    indent_inner_html (default false)  — indent <head> and <body> sections,
    indent_size (default 4)          — indentation size,
    indent_char (default space)      — character to indent with,
    wrap_line_length (default 250)            -  maximum amount of characters per line (0 = disable)
    brace_style (default "collapse") - "collapse" | "expand" | "end-expand" | "none"
            put braces on the same line as control statements (default), or put braces on own line (Allman / ANSI style), or just put end braces on own line, or attempt to keep them where they are.
    unformatted (defaults to inline tags) - list of tags, that shouldn't be reformatted
    indent_scripts (default normal)  - "keep"|"separate"|"normal"
    preserve_newlines (default true) - whether existing line breaks before elements should be preserved
                                        Only works before elements, not inside tags or for text.
    max_preserve_newlines (default unlimited) - maximum number of line breaks to be preserved in one chunk
    indent_handlebars (default false) - format and indent {{#foo}} and {{/foo}}
    end_with_newline (false)          - end with a newline
    extra_liners (default [head,body,/html]) -List of tags that should have an extra newline before them.

    e.g.

    style_html(html_source, {
      'indent_inner_html': false,
      'indent_size': 2,
      'indent_char': ' ',
      'wrap_line_length': 78,
      'brace_style': 'expand',
      'preserve_newlines': true,
      'max_preserve_newlines': 5,
      'indent_handlebars': false,
      'extra_liners': ['/html']
    });
*/

(function() {

    function trim(s) {
        return s.replace(/^\s+|\s+$/g, '');
    }

    function ltrim(s) {
        return s.replace(/^\s+/g, '');
    }

    function rtrim(s) {
        return s.replace(/\s+$/g,'');
    }

    function style_html(html_source, options, js_beautify, css_beautify) {
        //Wrapper function to invoke all the necessary constructors and deal with the output.

        var multi_parser,
            indent_inner_html,
            indent_size,
            indent_character,
            wrap_line_length,
            brace_style,
            unformatted,
            preserve_newlines,
            max_preserve_newlines,
            indent_handlebars,
            wrap_attributes,
            wrap_attributes_indent_size,
            end_with_newline,
            extra_liners,
            eol;

        options = options || {};

        // backwards compatibility to 1.3.4
        if ((options.wrap_line_length === undefined || parseInt(options.wrap_line_length, 10) === 0) &&
                (options.max_char !== undefined && parseInt(options.max_char, 10) !== 0)) {
            options.wrap_line_length = options.max_char;
        }

        indent_inner_html = (options.indent_inner_html === undefined) ? false : options.indent_inner_html;
        indent_size = (options.indent_size === undefined) ? 4 : parseInt(options.indent_size, 10);
        indent_character = (options.indent_char === undefined) ? ' ' : options.indent_char;
        brace_style = (options.brace_style === undefined) ? 'collapse' : options.brace_style;
        wrap_line_length =  parseInt(options.wrap_line_length, 10) === 0 ? 32786 : parseInt(options.wrap_line_length || 250, 10);
        unformatted = options.unformatted || [
            // https://www.w3.org/TR/html5/dom.html#phrasing-content
            'a', 'abbr', 'area', 'audio', 'b', 'bdi', 'bdo', 'br', 'button', 'canvas', 'cite',
            'code', 'data', 'datalist', 'del', 'dfn', 'em', 'embed', 'i', 'iframe', 'img',
            'input', 'ins', 'kbd', 'keygen', 'label', 'map', 'mark', 'math', 'meter', 'noscript',
            'object', 'output', 'progress', 'q', 'ruby', 's', 'samp', /* 'script', */ 'select', 'small',
            'span', 'strong', 'sub', 'sup', 'svg', 'template', 'textarea', 'time', 'u', 'var',
            'video', 'wbr', 'text',
            // prexisting - not sure of full effect of removing, leaving in
            'acronym', 'address', 'big', 'dt', 'ins', 'small', 'strike', 'tt',
            'pre',
            'h1', 'h2', 'h3', 'h4', 'h5', 'h6'
        ];
        preserve_newlines = (options.preserve_newlines === undefined) ? true : options.preserve_newlines;
        max_preserve_newlines = preserve_newlines ?
            (isNaN(parseInt(options.max_preserve_newlines, 10)) ? 32786 : parseInt(options.max_preserve_newlines, 10))
            : 0;
        indent_handlebars = (options.indent_handlebars === undefined) ? false : options.indent_handlebars;
        wrap_attributes = (options.wrap_attributes === undefined) ? 'auto' : options.wrap_attributes;
        wrap_attributes_indent_size = (isNaN(parseInt(options.wrap_attributes_indent_size, 10))) ? indent_size : parseInt(options.wrap_attributes_indent_size, 10);
        end_with_newline = (options.end_with_newline === undefined) ? false : options.end_with_newline;
        extra_liners = (typeof options.extra_liners == 'object') && options.extra_liners ?
            options.extra_liners.concat() : (typeof options.extra_liners === 'string') ?
            options.extra_liners.split(',') : 'head,body,/html'.split(',');
        eol = options.eol ? options.eol : '\n';

        if(options.indent_with_tabs){
            indent_character = '\t';
            indent_size = 1;
        }

        eol = eol.replace(/\\r/, '\r').replace(/\\n/, '\n')

        function Parser() {

            this.pos = 0; //Parser position
            this.token = '';
            this.current_mode = 'CONTENT'; //reflects the current Parser mode: TAG/CONTENT
            this.tags = { //An object to hold tags, their position, and their parent-tags, initiated with default values
                parent: 'parent1',
                parentcount: 1,
                parent1: ''
            };
            this.tag_type = '';
            this.token_text = this.last_token = this.last_text = this.token_type = '';
            this.newlines = 0;
            this.indent_content = indent_inner_html;

            this.Utils = { //Uilities made available to the various functions
                whitespace: "\n\r\t ".split(''),

                single_token: [
                    // HTLM void elements - aka self-closing tags - aka singletons
                    // https://www.w3.org/html/wg/drafts/html/master/syntax.html#void-elements
                    'area', 'base', 'br', 'col', 'embed', 'hr', 'img', 'input', 'keygen',
                    'link', 'menuitem', 'meta', 'param', 'source', 'track', 'wbr',
                    // NOTE: Optional tags - are not understood.
                    // https://www.w3.org/TR/html5/syntax.html#optional-tags
                    // The rules for optional tags are too complex for a simple list
                    // Also, the content of these tags should still be indented in many cases.
                    // 'li' is a good exmple.

                    // Doctype and xml elements
                    '!doctype', '?xml',
                    // ?php tag
                    '?php',
                    // other tags that were in this list, keeping just in case
                    'basefont', 'isindex'
                ],
                extra_liners: extra_liners, //for tags that need a line of whitespace before them
                in_array: function(what, arr) {
                    for (var i = 0; i < arr.length; i++) {
                        if (what === arr[i]) {
                            return true;
                        }
                    }
                    return false;
                }
            };

            // Return true if the given text is composed entirely of whitespace.
            this.is_whitespace = function(text) {
                for (var n = 0; n < text.length; n++) {
                    if (!this.Utils.in_array(text.charAt(n), this.Utils.whitespace)) {
                        return false;
                    }
                }
                return true;
            };

            this.traverse_whitespace = function() {
                var input_char = '';

                input_char = this.input.charAt(this.pos);
                if (this.Utils.in_array(input_char, this.Utils.whitespace)) {
                    this.newlines = 0;
                    while (this.Utils.in_array(input_char, this.Utils.whitespace)) {
                        if (preserve_newlines && input_char === '\n' && this.newlines <= max_preserve_newlines) {
                            this.newlines += 1;
                        }

                        this.pos++;
                        input_char = this.input.charAt(this.pos);
                    }
                    return true;
                }
                return false;
            };

            // Append a space to the given content (string array) or, if we are
            // at the wrap_line_length, append a newline/indentation.
            // return true if a newline was added, false if a space was added
            this.space_or_wrap = function(content) {
                if (this.line_char_count >= this.wrap_line_length) { //insert a line when the wrap_line_length is reached
                    this.print_newline(false, content);
                    this.print_indentation(content);
                    return true;
                } else {
                    this.line_char_count++;
                    content.push(' ');
                    return false;
                }
            };

            this.get_content = function() { //function to capture regular content between tags
                var input_char = '',
                    content = [],
                    space = false; //if a space is needed

                while (this.input.charAt(this.pos) !== '<') {
                    if (this.pos >= this.input.length) {
                        return content.length ? content.join('') : ['', 'TK_EOF'];
                    }

                    if (this.traverse_whitespace()) {
                        this.space_or_wrap(content);
                        continue;
                    }

                    if (indent_handlebars) {
                        // Handlebars parsing is complicated.
                        // {{#foo}} and {{/foo}} are formatted tags.
                        // {{something}} should get treated as content, except:
                        // {{else}} specifically behaves like {{#if}} and {{/if}}
                        var peek3 = this.input.substr(this.pos, 3);
                        if (peek3 === '{{#' || peek3 === '{{/') {
                            // These are tags and not content.
                            break;
                        } else if (peek3 === '{{!') {
                            return [this.get_tag(), 'TK_TAG_HANDLEBARS_COMMENT'];
                        } else if (this.input.substr(this.pos, 2) === '{{') {
                            if (this.get_tag(true) === '{{else}}') {
                                break;
                            }
                        }
                    }

                    input_char = this.input.charAt(this.pos);
                    this.pos++;
                    this.line_char_count++;
                    content.push(input_char); //letter at-a-time (or string) inserted to an array
                }
                return content.length ? content.join('') : '';
            };

            this.get_contents_to = function(name) { //get the full content of a script or style to pass to js_beautify
                if (this.pos === this.input.length) {
                    return ['', 'TK_EOF'];
                }
                var input_char = '';
                var content = '';
                var reg_match = new RegExp('</' + name + '\\s*>', 'igm');
                reg_match.lastIndex = this.pos;
                var reg_array = reg_match.exec(this.input);
                var end_script = reg_array ? reg_array.index : this.input.length; //absolute end of script
                if (this.pos < end_script) { //get everything in between the script tags
                    content = this.input.substring(this.pos, end_script);
                    this.pos = end_script;
                }
                return content;
            };

            this.record_tag = function(tag) { //function to record a tag and its parent in this.tags Object
                if (this.tags[tag + 'count']) { //check for the existence of this tag type
                    this.tags[tag + 'count']++;
                    this.tags[tag + this.tags[tag + 'count']] = this.indent_level; //and record the present indent level
                } else { //otherwise initialize this tag type
                    this.tags[tag + 'count'] = 1;
                    this.tags[tag + this.tags[tag + 'count']] = this.indent_level; //and record the present indent level
                }
                this.tags[tag + this.tags[tag + 'count'] + 'parent'] = this.tags.parent; //set the parent (i.e. in the case of a div this.tags.div1parent)
                this.tags.parent = tag + this.tags[tag + 'count']; //and make this the current parent (i.e. in the case of a div 'div1')
            };

            this.retrieve_tag = function(tag) { //function to retrieve the opening tag to the corresponding closer
                if (this.tags[tag + 'count']) { //if the openener is not in the Object we ignore it
                    var temp_parent = this.tags.parent; //check to see if it's a closable tag.
                    while (temp_parent) { //till we reach '' (the initial value);
                        if (tag + this.tags[tag + 'count'] === temp_parent) { //if this is it use it
                            break;
                        }
                        temp_parent = this.tags[temp_parent + 'parent']; //otherwise keep on climbing up the DOM Tree
                    }
                    if (temp_parent) { //if we caught something
                        this.indent_level = this.tags[tag + this.tags[tag + 'count']]; //set the indent_level accordingly
                        this.tags.parent = this.tags[temp_parent + 'parent']; //and set the current parent
                    }
                    delete this.tags[tag + this.tags[tag + 'count'] + 'parent']; //delete the closed tags parent reference...
                    delete this.tags[tag + this.tags[tag + 'count']]; //...and the tag itself
                    if (this.tags[tag + 'count'] === 1) {
                        delete this.tags[tag + 'count'];
                    } else {
                        this.tags[tag + 'count']--;
                    }
                }
            };

            this.indent_to_tag = function(tag) {
                // Match the indentation level to the last use of this tag, but don't remove it.
                if (!this.tags[tag + 'count']) {
                    return;
                }
                var temp_parent = this.tags.parent;
                while (temp_parent) {
                    if (tag + this.tags[tag + 'count'] === temp_parent) {
                        break;
                    }
                    temp_parent = this.tags[temp_parent + 'parent'];
                }
                if (temp_parent) {
                    this.indent_level = this.tags[tag + this.tags[tag + 'count']];
                }
            };

            this.get_tag = function(peek) { //function to get a full tag and parse its type
                var input_char = '',
                    content = [],
                    comment = '',
                    space = false,
                    first_attr = true,
                    tag_start, tag_end,
                    tag_start_char,
                    orig_pos = this.pos,
                    orig_line_char_count = this.line_char_count;

                peek = peek !== undefined ? peek : false;

                do {
                    if (this.pos >= this.input.length) {
                        if (peek) {
                            this.pos = orig_pos;
                            this.line_char_count = orig_line_char_count;
                        }
                        return content.length ? content.join('') : ['', 'TK_EOF'];
                    }

                    input_char = this.input.charAt(this.pos);
                    this.pos++;

                    if (this.Utils.in_array(input_char, this.Utils.whitespace)) { //don't want to insert unnecessary space
                        space = true;
                        continue;
                    }

                    if (input_char === "'" || input_char === '"') {
                        input_char += this.get_unformatted(input_char);
                        space = true;

                    }

                    if (input_char === '=') { //no space before =
                        space = false;
                    }

                    if (content.length && content[content.length - 1] !== '=' && input_char !== '>' && space) {
                        //no space after = or before >
                        var wrapped = this.space_or_wrap(content);
                        var indentAttrs = wrapped && input_char !== '/' && wrap_attributes !== 'force';
                        space = false;
                        if (!first_attr && wrap_attributes === 'force' &&  input_char !== '/') {
                            this.print_newline(false, content);
                            this.print_indentation(content);
                            indentAttrs = true;
                        }
                        if (indentAttrs) {
                            //indent attributes an auto or forced line-wrap
                            for (var count = 0; count < wrap_attributes_indent_size; count++) {
                                content.push(indent_character);
                            }
                        }
                        for (var i = 0; i < content.length; i++) {
                          if (content[i] === ' ') {
                            first_attr = false;
                            break;
                          }
                        }
                    }

                    if (indent_handlebars && tag_start_char === '<') {
                        // When inside an angle-bracket tag, put spaces around
                        // handlebars not inside of strings.
                        if ((input_char + this.input.charAt(this.pos)) === '{{') {
                            input_char += this.get_unformatted('}}');
                            if (content.length && content[content.length - 1] !== ' ' && content[content.length - 1] !== '<') {
                                input_char = ' ' + input_char;
                            }
                            space = true;
                        }
                    }

                    if (input_char === '<' && !tag_start_char) {
                        tag_start = this.pos - 1;
                        tag_start_char = '<';
                    }

                    if (indent_handlebars && !tag_start_char) {
                        if (content.length >= 2 && content[content.length - 1] === '{' && content[content.length - 2] === '{') {
                            if (input_char === '#' || input_char === '/' || input_char === '!') {
                                tag_start = this.pos - 3;
                            } else {
                                tag_start = this.pos - 2;
                            }
                            tag_start_char = '{';
                        }
                    }

                    this.line_char_count++;
                    content.push(input_char); //inserts character at-a-time (or string)

                    if (content[1] && (content[1] === '!' || content[1] === '?' || content[1] === '%')) { //if we're in a comment, do something special
                        // We treat all comments as literals, even more than preformatted tags
                        // we just look for the appropriate close tag
                        content = [this.get_comment(tag_start)];
                        break;
                    }

                    if (indent_handlebars && content[1] && content[1] === '{' && content[2] && content[2] === '!') { //if we're in a comment, do something special
                        // We treat all comments as literals, even more than preformatted tags
                        // we just look for the appropriate close tag
                        content = [this.get_comment(tag_start)];
                        break;
                    }

                    if (indent_handlebars && tag_start_char === '{' && content.length > 2 && content[content.length - 2] === '}' && content[content.length - 1] === '}') {
                        break;
                    }
                } while (input_char !== '>');

                var tag_complete = content.join('');
                var tag_index;
                var tag_offset;

                if (tag_complete.indexOf(' ') !== -1) { //if there's whitespace, thats where the tag name ends
                    tag_index = tag_complete.indexOf(' ');
                } else if (tag_complete.charAt(0) === '{') {
                    tag_index = tag_complete.indexOf('}');
                } else { //otherwise go with the tag ending
                    tag_index = tag_complete.indexOf('>');
                }
                if (tag_complete.charAt(0) === '<' || !indent_handlebars) {
                    tag_offset = 1;
                } else {
                    tag_offset = tag_complete.charAt(2) === '#' ? 3 : 2;
                }
                var tag_check = tag_complete.substring(tag_offset, tag_index).toLowerCase();
                if (tag_complete.charAt(tag_complete.length - 2) === '/' ||
                    this.Utils.in_array(tag_check, this.Utils.single_token)) { //if this tag name is a single tag type (either in the list or has a closing /)
                    if (!peek) {
                        this.tag_type = 'SINGLE';
                    }
                } else if (indent_handlebars && tag_complete.charAt(0) === '{' && tag_check === 'else') {
                    if (!peek) {
                        this.indent_to_tag('if');
                        this.tag_type = 'HANDLEBARS_ELSE';
                        this.indent_content = true;
                        this.traverse_whitespace();
                    }
                } else if (this.is_unformatted(tag_check, unformatted)) { // do not reformat the "unformatted" tags
                    comment = this.get_unformatted('</' + tag_check + '>', tag_complete); //...delegate to get_unformatted function
                    content.push(comment);
                    tag_end = this.pos - 1;
                    this.tag_type = 'SINGLE';
                } else if (tag_check === 'script' &&
                    (tag_complete.search('type') === -1 ||
                    (tag_complete.search('type') > -1 &&
                    tag_complete.search(/\b(text|application)\/(x-)?(javascript|ecmascript|jscript|livescript|(ld\+)?json)/) > -1))) {
                    if (!peek) {
                        this.record_tag(tag_check);
                        this.tag_type = 'SCRIPT';
                    }
                } else if (tag_check === 'style' &&
                    (tag_complete.search('type') === -1 ||
                    (tag_complete.search('type') > -1 && tag_complete.search('text/css') > -1))) {
                    if (!peek) {
                        this.record_tag(tag_check);
                        this.tag_type = 'STYLE';
                    }
                } else if (tag_check.charAt(0) === '!') { //peek for <! comment
                    // for comments content is already correct.
                    if (!peek) {
                        this.tag_type = 'SINGLE';
                        this.traverse_whitespace();
                    }
                } else if (!peek) {
                    if (tag_check.charAt(0) === '/') { //this tag is a double tag so check for tag-ending
                        this.retrieve_tag(tag_check.substring(1)); //remove it and all ancestors
                        this.tag_type = 'END';
                    } else { //otherwise it's a start-tag
                        this.record_tag(tag_check); //push it on the tag stack
                        if (tag_check.toLowerCase() !== 'html') {
                            this.indent_content = true;
                        }
                        this.tag_type = 'START';
                    }

                    // Allow preserving of newlines after a start or end tag
                    if (this.traverse_whitespace()) {
                        this.space_or_wrap(content);
                    }

                    if (this.Utils.in_array(tag_check, this.Utils.extra_liners)) { //check if this double needs an extra line
                        this.print_newline(false, this.output);
                        if (this.output.length && this.output[this.output.length - 2] !== '\n') {
                            this.print_newline(true, this.output);
                        }
                    }
                }

                if (peek) {
                    this.pos = orig_pos;
                    this.line_char_count = orig_line_char_count;
                }

                return content.join(''); //returns fully formatted tag
            };

            this.get_comment = function(start_pos) { //function to return comment content in its entirety
                // this is will have very poor perf, but will work for now.
                var comment = '',
                    delimiter = '>',
                    matched = false;

                this.pos = start_pos;
                var input_char = this.input.charAt(this.pos);
                this.pos++;

                while (this.pos <= this.input.length) {
                    comment += input_char;

                    // only need to check for the delimiter if the last chars match
                    if (comment.charAt(comment.length - 1) === delimiter.charAt(delimiter.length - 1) &&
                        comment.indexOf(delimiter) !== -1) {
                        break;
                    }

                    // only need to search for custom delimiter for the first few characters
                    if (!matched && comment.length < 10) {
                        if (comment.indexOf('<![if') === 0) { //peek for <![if conditional comment
                            delimiter = '<![endif]>';
                            matched = true;
                        } else if (comment.indexOf('<![cdata[') === 0) { //if it's a <[cdata[ comment...
                            delimiter = ']]>';
                            matched = true;
                        } else if (comment.indexOf('<![') === 0) { // some other ![ comment? ...
                            delimiter = ']>';
                            matched = true;
                        } else if (comment.indexOf('<!--') === 0) { // <!-- comment ...
                            delimiter = '-->';
                            matched = true;
                        } else if (comment.indexOf('{{!') === 0) { // {{! handlebars comment
                            delimiter = '}}';
                            matched = true;
                        } else if (comment.indexOf('<?') === 0) { // {{! handlebars comment
                            delimiter = '?>';
                            matched = true;
                        } else if (comment.indexOf('<%') === 0) { // {{! handlebars comment
                            delimiter = '%>';
                            matched = true;
                        }
                    }

                    input_char = this.input.charAt(this.pos);
                    this.pos++;
                }

                return comment;
            };

            function tokenMatcher(delimiter) {
              var token = '';

              var add = function (str) {
                var newToken = token + str.toLowerCase();
                token = newToken.length <= delimiter.length ? newToken : newToken.substr(newToken.length - delimiter.length, delimiter.length);
              };

              var doesNotMatch = function () {
                return token.indexOf(delimiter) === -1;
              };

              return {
                add: add,
                doesNotMatch: doesNotMatch
              };
            }

            this.get_unformatted = function(delimiter, orig_tag) { //function to return unformatted content in its entirety
                if (orig_tag && orig_tag.toLowerCase().indexOf(delimiter) !== -1) {
                    return '';
                }
                var input_char = '';
                var content = '';
                var space = true;

                var delimiterMatcher = tokenMatcher(delimiter);

                do {

                    if (this.pos >= this.input.length) {
                        return content;
                    }

                    input_char = this.input.charAt(this.pos);
                    this.pos++;

                    if (this.Utils.in_array(input_char, this.Utils.whitespace)) {
                        if (!space) {
                            this.line_char_count--;
                            continue;
                        }
                        if (input_char === '\n' || input_char === '\r') {
                            content += '\n';
                            /*  Don't change tab indention for unformatted blocks.  If using code for html editing, this will greatly affect <pre> tags if they are specified in the 'unformatted array'
                for (var i=0; i<this.indent_level; i++) {
                  content += this.indent_string;
                }
                space = false; //...and make sure other indentation is erased
                */
                            this.line_char_count = 0;
                            continue;
                        }
                    }
                    content += input_char;
                    delimiterMatcher.add(input_char);
                    this.line_char_count++;
                    space = true;

                    if (indent_handlebars && input_char === '{' && content.length && content.charAt(content.length - 2) === '{') {
                        // Handlebars expressions in strings should also be unformatted.
                        content += this.get_unformatted('}}');
                        // Don't consider when stopping for delimiters.
                    }
                } while (delimiterMatcher.doesNotMatch());

                return content;
            };

            this.get_token = function() { //initial handler for token-retrieval
                var token;

                if (this.last_token === 'TK_TAG_SCRIPT' || this.last_token === 'TK_TAG_STYLE') { //check if we need to format javascript
                    var type = this.last_token.substr(7);
                    token = this.get_contents_to(type);
                    if (typeof token !== 'string') {
                        return token;
                    }
                    return [token, 'TK_' + type];
                }
                if (this.current_mode === 'CONTENT') {
                    token = this.get_content();
                    if (typeof token !== 'string') {
                        return token;
                    } else {
                        return [token, 'TK_CONTENT'];
                    }
                }

                if (this.current_mode === 'TAG') {
                    token = this.get_tag();
                    if (typeof token !== 'string') {
                        return token;
                    } else {
                        var tag_name_type = 'TK_TAG_' + this.tag_type;
                        return [token, tag_name_type];
                    }
                }
            };

            this.get_full_indent = function(level) {
                level = this.indent_level + level || 0;
                if (level < 1) {
                    return '';
                }

                return Array(level + 1).join(this.indent_string);
            };

            this.is_unformatted = function(tag_check, unformatted) {
                //is this an HTML5 block-level link?
                if (!this.Utils.in_array(tag_check, unformatted)) {
                    return false;
                }

                if (tag_check.toLowerCase() !== 'a' || !this.Utils.in_array('a', unformatted)) {
                    return true;
                }

                //at this point we have an  tag; is its first child something we want to remain
                //unformatted?
                var next_tag = this.get_tag(true /* peek. */ );

                // test next_tag to see if it is just html tag (no external content)
                var tag = (next_tag || "").match(/^\s*<\s*\/?([a-z]*)\s*[^>]*>\s*$/);

                // if next_tag comes back but is not an isolated tag, then
                // let's treat the 'a' tag as having content
                // and respect the unformatted option
                if (!tag || this.Utils.in_array(tag, unformatted)) {
                    return true;
                } else {
                    return false;
                }
            };

            this.printer = function(js_source, indent_character, indent_size, wrap_line_length, brace_style) { //handles input/output and some other printing functions

                this.input = js_source || ''; //gets the input for the Parser

                // HACK: newline parsing inconsistent. This brute force normalizes the input.
                this.input = this.input.replace(/\r\n|[\r\u2028\u2029]/g, '\n')

                this.output = [];
                this.indent_character = indent_character;
                this.indent_string = '';
                this.indent_size = indent_size;
                this.brace_style = brace_style;
                this.indent_level = 0;
                this.wrap_line_length = wrap_line_length;
                this.line_char_count = 0; //count to see if wrap_line_length was exceeded

                for (var i = 0; i < this.indent_size; i++) {
                    this.indent_string += this.indent_character;
                }

                this.print_newline = function(force, arr) {
                    this.line_char_count = 0;
                    if (!arr || !arr.length) {
                        return;
                    }
                    if (force || (arr[arr.length - 1] !== '\n')) { //we might want the extra line
                        if ((arr[arr.length - 1] !== '\n')) {
                            arr[arr.length - 1] = rtrim(arr[arr.length - 1]);
                        }
                        arr.push('\n');
                    }
                };

                this.print_indentation = function(arr) {
                    for (var i = 0; i < this.indent_level; i++) {
                        arr.push(this.indent_string);
                        this.line_char_count += this.indent_string.length;
                    }
                };

                this.print_token = function(text) {
                    // Avoid printing initial whitespace.
                    if (this.is_whitespace(text) && !this.output.length) {
                        return;
                    }
                    if (text || text !== '') {
                        if (this.output.length && this.output[this.output.length - 1] === '\n') {
                            this.print_indentation(this.output);
                            text = ltrim(text);
                        }
                    }
                    this.print_token_raw(text);
                };

                this.print_token_raw = function(text) {
                    // If we are going to print newlines, truncate trailing
                    // whitespace, as the newlines will represent the space.
                    if (this.newlines > 0) {
                        text = rtrim(text);
                    }

                    if (text && text !== '') {
                        if (text.length > 1 && text.charAt(text.length - 1) === '\n') {
                            // unformatted tags can grab newlines as their last character
                            this.output.push(text.slice(0, -1));
                            this.print_newline(false, this.output);
                        } else {
                            this.output.push(text);
                        }
                    }

                    for (var n = 0; n < this.newlines; n++) {
                        this.print_newline(n > 0, this.output);
                    }
                    this.newlines = 0;
                };

                this.indent = function() {
                    this.indent_level++;
                };

                this.unindent = function() {
                    if (this.indent_level > 0) {
                        this.indent_level--;
                    }
                };
            };
            return this;
        }

        /*_____________________--------------------_____________________*/

        multi_parser = new Parser(); //wrapping functions Parser
        multi_parser.printer(html_source, indent_character, indent_size, wrap_line_length, brace_style); //initialize starting values

        while (true) {
            var t = multi_parser.get_token();
            multi_parser.token_text = t[0];
            multi_parser.token_type = t[1];

            if (multi_parser.token_type === 'TK_EOF') {
                break;
            }

            switch (multi_parser.token_type) {
                case 'TK_TAG_START':
                    multi_parser.print_newline(false, multi_parser.output);
                    multi_parser.print_token(multi_parser.token_text);
                    if (multi_parser.indent_content) {
                        multi_parser.indent();
                        multi_parser.indent_content = false;
                    }
                    multi_parser.current_mode = 'CONTENT';
                    break;
                case 'TK_TAG_STYLE':
                case 'TK_TAG_SCRIPT':
                    multi_parser.print_newline(false, multi_parser.output);
                    multi_parser.print_token(multi_parser.token_text);
                    multi_parser.current_mode = 'CONTENT';
                    break;
                case 'TK_TAG_END':
                    //Print new line only if the tag has no content and has child
                    if (multi_parser.last_token === 'TK_CONTENT' && multi_parser.last_text === '') {
                        var tag_name = multi_parser.token_text.match(/\w+/)[0];
                        var tag_extracted_from_last_output = null;
                        if (multi_parser.output.length) {
                            tag_extracted_from_last_output = multi_parser.output[multi_parser.output.length - 1].match(/(?:<|{{#)\s*(\w+)/);
                        }
                        if (tag_extracted_from_last_output === null ||
                            (tag_extracted_from_last_output[1] !== tag_name && !multi_parser.Utils.in_array(tag_extracted_from_last_output[1], unformatted))) {
                            multi_parser.print_newline(false, multi_parser.output);
                        }
                    }
                    multi_parser.print_token(multi_parser.token_text);
                    multi_parser.current_mode = 'CONTENT';
                    break;
                case 'TK_TAG_SINGLE':
                    // Don't add a newline before elements that should remain unformatted.
                    var tag_check = multi_parser.token_text.match(/^\s*<([a-z-]+)/i);
                    if (!tag_check || !multi_parser.Utils.in_array(tag_check[1], unformatted)) {
                        multi_parser.print_newline(false, multi_parser.output);
                    }
                    multi_parser.print_token(multi_parser.token_text);
                    multi_parser.current_mode = 'CONTENT';
                    break;
                case 'TK_TAG_HANDLEBARS_ELSE':
                    // Don't add a newline if opening {{#if}} tag is on the current line
                    var foundIfOnCurrentLine = false;
                    for (var lastCheckedOutput=multi_parser.output.length-1; lastCheckedOutput>=0; lastCheckedOutput--) {
		        if (multi_parser.output[lastCheckedOutput] === '\n') {
		            break;
                        } else {
                            if (multi_parser.output[lastCheckedOutput].match(/{{#if/)) {
                                foundIfOnCurrentLine = true;
                                break;
                            }
                        }
                    }
                    if (!foundIfOnCurrentLine) {
                        multi_parser.print_newline(false, multi_parser.output);
                    }
                    multi_parser.print_token(multi_parser.token_text);
                    if (multi_parser.indent_content) {
                        multi_parser.indent();
                        multi_parser.indent_content = false;
                    }
                    multi_parser.current_mode = 'CONTENT';
                    break;
                case 'TK_TAG_HANDLEBARS_COMMENT':
                    multi_parser.print_token(multi_parser.token_text);
                    multi_parser.current_mode = 'TAG';
                    break;
                case 'TK_CONTENT':
                    multi_parser.print_token(multi_parser.token_text);
                    multi_parser.current_mode = 'TAG';
                    break;
                case 'TK_STYLE':
                case 'TK_SCRIPT':
                    if (multi_parser.token_text !== '') {
                        multi_parser.print_newline(false, multi_parser.output);
                        var text = multi_parser.token_text,
                            _beautifier,
                            script_indent_level = 1;
                        if (multi_parser.token_type === 'TK_SCRIPT') {
                            _beautifier = typeof js_beautify === 'function' && js_beautify;
                        } else if (multi_parser.token_type === 'TK_STYLE') {
                            _beautifier = typeof css_beautify === 'function' && css_beautify;
                        }

                        if (options.indent_scripts === "keep") {
                            script_indent_level = 0;
                        } else if (options.indent_scripts === "separate") {
                            script_indent_level = -multi_parser.indent_level;
                        }

                        var indentation = multi_parser.get_full_indent(script_indent_level);
                        if (_beautifier) {

                            // call the Beautifier if avaliable
                            var Child_options = function() {
                                this.eol = '\n';
                            };
                            Child_options.prototype = options;
                            var child_options = new Child_options();
                            text = _beautifier(text.replace(/^\s*/, indentation), child_options);
                        } else {
                            // simply indent the string otherwise
                            var white = text.match(/^\s*/)[0];
                            var _level = white.match(/[^\n\r]*$/)[0].split(multi_parser.indent_string).length - 1;
                            var reindent = multi_parser.get_full_indent(script_indent_level - _level);
                            text = text.replace(/^\s*/, indentation)
                                .replace(/\r\n|\r|\n/g, '\n' + reindent)
                                .replace(/\s+$/, '');
                        }
                        if (text) {
                            multi_parser.print_token_raw(text);
                            multi_parser.print_newline(true, multi_parser.output);
                        }
                    }
                    multi_parser.current_mode = 'TAG';
                    break;
                default:
                    // We should not be getting here but we don't want to drop input on the floor
                    // Just output the text and move on
                    if (multi_parser.token_text !== '') {
                        multi_parser.print_token(multi_parser.token_text);
                    }
                    break;
            }
            multi_parser.last_token = multi_parser.token_type;
            multi_parser.last_text = multi_parser.token_text;
        }
        var sweet_code = multi_parser.output.join('').replace(/[\r\n\t ]+$/, '');

        // establish end_with_newline
        if (end_with_newline) {
            sweet_code += '\n';
        }

        if (eol != '\n') {
            sweet_code = sweet_code.replace(/[\n]/g, eol);
        }

        return sweet_code;
    }
    define('plugin/beautify-html', ["plugin/beautify", "plugin/beautify-css"], function(require) {
        var js_beautify =  require("plugin/beautify");
        var css_beautify =  require("plugin/beautify-css");

        return {
            html_beautify: function(html_source, options) {
                return style_html(html_source, options, js_beautify.js_beautify, css_beautify.css_beautify);
            }
        };
    });
    /*if (typeof define === "function" && define.amd) {
        // Add support for AMD ( https://github.com/amdjs/amdjs-api/wiki/AMD#defineamd-property- )
        define(["require", "./beautify", "./beautify-css"], function(requireamd) {
            var js_beautify =  requireamd("./beautify");
            var css_beautify =  requireamd("./beautify-css");

            return {
              html_beautify: function(html_source, options) {
                return style_html(html_source, options, js_beautify.js_beautify, css_beautify.css_beautify);
              }
            };
        });
    } else if (typeof exports !== "undefined") {
        // Add support for CommonJS. Just put this file somewhere on your require.paths
        // and you will be able to `var html_beautify = require("beautify").html_beautify`.
        var js_beautify = require('./beautify.js');
        var css_beautify = require('./beautify-css.js');

        exports.html_beautify = function(html_source, options) {
            return style_html(html_source, options, js_beautify.js_beautify, css_beautify.css_beautify);
        };
    } else if (typeof window !== "undefined") {
        // If we're running a web page and don't have either of the above, add our one global
        window.html_beautify = function(html_source, options) {
            return style_html(html_source, options, window.js_beautify, window.css_beautify);
        };
    } else if (typeof global !== "undefined") {
        // If we don't even have window, try global.
        global.html_beautify = function(html_source, options) {
            return style_html(html_source, options, global.js_beautify, global.css_beautify);
        };
    }
*/
}());

/*jshint curly:true, eqeqeq:true, laxbreak:true, noempty:false */
/*

  The MIT License (MIT)

  Copyright (c) 2007-2013 Einar Lielmanis and contributors.

  Permission is hereby granted, free of charge, to any person
  obtaining a copy of this software and associated documentation files
  (the "Software"), to deal in the Software without restriction,
  including without limitation the rights to use, copy, modify, merge,
  publish, distribute, sublicense, and/or sell copies of the Software,
  and to permit persons to whom the Software is furnished to do so,
  subject to the following conditions:

  The above copyright notice and this permission notice shall be
  included in all copies or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
  ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
  SOFTWARE.

 JS Beautifier
---------------


  Written by Einar Lielmanis, <einar@jsbeautifier.org>
      http://jsbeautifier.org/

  Originally converted to javascript by Vital, <vital76@gmail.com>
  "End braces on own line" added by Chris J. Shull, <chrisjshull@gmail.com>
  Parsing improvements for brace-less statements by Liam Newman <bitwiseman@gmail.com>


  Usage:
    js_beautify(js_source_text);
    js_beautify(js_source_text, options);

  The options are:
    indent_size (default 4)          - indentation size,
    indent_char (default space)      - character to indent with,
    preserve_newlines (default true) - whether existing line breaks should be preserved,
    max_preserve_newlines (default unlimited) - maximum number of line breaks to be preserved in one chunk,

    jslint_happy (default false) - if true, then jslint-stricter mode is enforced.

            jslint_happy        !jslint_happy
            ---------------------------------
            function ()         function()

            switch () {         switch() {
            case 1:               case 1:
              break;                break;
            }                   }

    space_after_anon_function (default false) - should the space before an anonymous function's parens be added, "function()" vs "function ()",
          NOTE: This option is overriden by jslint_happy (i.e. if jslint_happy is true, space_after_anon_function is true by design)

    brace_style (default "collapse") - "collapse-preserve-inline" | "collapse" | "expand" | "end-expand" | "none"
            put braces on the same line as control statements (default), or put braces on own line (Allman / ANSI style), or just put end braces on own line, or attempt to keep them where they are.

    space_before_conditional (default true) - should the space before conditional statement be added, "if(true)" vs "if (true)",

    unescape_strings (default false) - should printable characters in strings encoded in \xNN notation be unescaped, "example" vs "\x65\x78\x61\x6d\x70\x6c\x65"

    wrap_line_length (default unlimited) - lines should wrap at next opportunity after this number of characters.
          NOTE: This is not a hard limit. Lines will continue until a point where a newline would
                be preserved if it were present.

    end_with_newline (default false)  - end output with a newline


    e.g

    js_beautify(js_source_text, {
      'indent_size': 1,
      'indent_char': '\t'
    });

*/

(function() {

    var acorn = {};
    (function (exports) {
      // This section of code is taken from acorn.
      //
      // Acorn was written by Marijn Haverbeke and released under an MIT
      // license. The Unicode regexps (for identifiers and whitespace) were
      // taken from [Esprima](http://esprima.org) by Ariya Hidayat.
      //
      // Git repositories for Acorn are available at
      //
      //     http://marijnhaverbeke.nl/git/acorn
      //     https://github.com/marijnh/acorn.git

      // ## Character categories

      // Big ugly regular expressions that match characters in the
      // whitespace, identifier, and identifier-start categories. These
      // are only applied when a character is found to actually have a
      // code point above 128.

      var nonASCIIwhitespace = /[\u1680\u180e\u2000-\u200a\u202f\u205f\u3000\ufeff]/;
      var nonASCIIidentifierStartChars = "\xaa\xb5\xba\xc0-\xd6\xd8-\xf6\xf8-\u02c1\u02c6-\u02d1\u02e0-\u02e4\u02ec\u02ee\u0370-\u0374\u0376\u0377\u037a-\u037d\u0386\u0388-\u038a\u038c\u038e-\u03a1\u03a3-\u03f5\u03f7-\u0481\u048a-\u0527\u0531-\u0556\u0559\u0561-\u0587\u05d0-\u05ea\u05f0-\u05f2\u0620-\u064a\u066e\u066f\u0671-\u06d3\u06d5\u06e5\u06e6\u06ee\u06ef\u06fa-\u06fc\u06ff\u0710\u0712-\u072f\u074d-\u07a5\u07b1\u07ca-\u07ea\u07f4\u07f5\u07fa\u0800-\u0815\u081a\u0824\u0828\u0840-\u0858\u08a0\u08a2-\u08ac\u0904-\u0939\u093d\u0950\u0958-\u0961\u0971-\u0977\u0979-\u097f\u0985-\u098c\u098f\u0990\u0993-\u09a8\u09aa-\u09b0\u09b2\u09b6-\u09b9\u09bd\u09ce\u09dc\u09dd\u09df-\u09e1\u09f0\u09f1\u0a05-\u0a0a\u0a0f\u0a10\u0a13-\u0a28\u0a2a-\u0a30\u0a32\u0a33\u0a35\u0a36\u0a38\u0a39\u0a59-\u0a5c\u0a5e\u0a72-\u0a74\u0a85-\u0a8d\u0a8f-\u0a91\u0a93-\u0aa8\u0aaa-\u0ab0\u0ab2\u0ab3\u0ab5-\u0ab9\u0abd\u0ad0\u0ae0\u0ae1\u0b05-\u0b0c\u0b0f\u0b10\u0b13-\u0b28\u0b2a-\u0b30\u0b32\u0b33\u0b35-\u0b39\u0b3d\u0b5c\u0b5d\u0b5f-\u0b61\u0b71\u0b83\u0b85-\u0b8a\u0b8e-\u0b90\u0b92-\u0b95\u0b99\u0b9a\u0b9c\u0b9e\u0b9f\u0ba3\u0ba4\u0ba8-\u0baa\u0bae-\u0bb9\u0bd0\u0c05-\u0c0c\u0c0e-\u0c10\u0c12-\u0c28\u0c2a-\u0c33\u0c35-\u0c39\u0c3d\u0c58\u0c59\u0c60\u0c61\u0c85-\u0c8c\u0c8e-\u0c90\u0c92-\u0ca8\u0caa-\u0cb3\u0cb5-\u0cb9\u0cbd\u0cde\u0ce0\u0ce1\u0cf1\u0cf2\u0d05-\u0d0c\u0d0e-\u0d10\u0d12-\u0d3a\u0d3d\u0d4e\u0d60\u0d61\u0d7a-\u0d7f\u0d85-\u0d96\u0d9a-\u0db1\u0db3-\u0dbb\u0dbd\u0dc0-\u0dc6\u0e01-\u0e30\u0e32\u0e33\u0e40-\u0e46\u0e81\u0e82\u0e84\u0e87\u0e88\u0e8a\u0e8d\u0e94-\u0e97\u0e99-\u0e9f\u0ea1-\u0ea3\u0ea5\u0ea7\u0eaa\u0eab\u0ead-\u0eb0\u0eb2\u0eb3\u0ebd\u0ec0-\u0ec4\u0ec6\u0edc-\u0edf\u0f00\u0f40-\u0f47\u0f49-\u0f6c\u0f88-\u0f8c\u1000-\u102a\u103f\u1050-\u1055\u105a-\u105d\u1061\u1065\u1066\u106e-\u1070\u1075-\u1081\u108e\u10a0-\u10c5\u10c7\u10cd\u10d0-\u10fa\u10fc-\u1248\u124a-\u124d\u1250-\u1256\u1258\u125a-\u125d\u1260-\u1288\u128a-\u128d\u1290-\u12b0\u12b2-\u12b5\u12b8-\u12be\u12c0\u12c2-\u12c5\u12c8-\u12d6\u12d8-\u1310\u1312-\u1315\u1318-\u135a\u1380-\u138f\u13a0-\u13f4\u1401-\u166c\u166f-\u167f\u1681-\u169a\u16a0-\u16ea\u16ee-\u16f0\u1700-\u170c\u170e-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176c\u176e-\u1770\u1780-\u17b3\u17d7\u17dc\u1820-\u1877\u1880-\u18a8\u18aa\u18b0-\u18f5\u1900-\u191c\u1950-\u196d\u1970-\u1974\u1980-\u19ab\u19c1-\u19c7\u1a00-\u1a16\u1a20-\u1a54\u1aa7\u1b05-\u1b33\u1b45-\u1b4b\u1b83-\u1ba0\u1bae\u1baf\u1bba-\u1be5\u1c00-\u1c23\u1c4d-\u1c4f\u1c5a-\u1c7d\u1ce9-\u1cec\u1cee-\u1cf1\u1cf5\u1cf6\u1d00-\u1dbf\u1e00-\u1f15\u1f18-\u1f1d\u1f20-\u1f45\u1f48-\u1f4d\u1f50-\u1f57\u1f59\u1f5b\u1f5d\u1f5f-\u1f7d\u1f80-\u1fb4\u1fb6-\u1fbc\u1fbe\u1fc2-\u1fc4\u1fc6-\u1fcc\u1fd0-\u1fd3\u1fd6-\u1fdb\u1fe0-\u1fec\u1ff2-\u1ff4\u1ff6-\u1ffc\u2071\u207f\u2090-\u209c\u2102\u2107\u210a-\u2113\u2115\u2119-\u211d\u2124\u2126\u2128\u212a-\u212d\u212f-\u2139\u213c-\u213f\u2145-\u2149\u214e\u2160-\u2188\u2c00-\u2c2e\u2c30-\u2c5e\u2c60-\u2ce4\u2ceb-\u2cee\u2cf2\u2cf3\u2d00-\u2d25\u2d27\u2d2d\u2d30-\u2d67\u2d6f\u2d80-\u2d96\u2da0-\u2da6\u2da8-\u2dae\u2db0-\u2db6\u2db8-\u2dbe\u2dc0-\u2dc6\u2dc8-\u2dce\u2dd0-\u2dd6\u2dd8-\u2dde\u2e2f\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303c\u3041-\u3096\u309d-\u309f\u30a1-\u30fa\u30fc-\u30ff\u3105-\u312d\u3131-\u318e\u31a0-\u31ba\u31f0-\u31ff\u3400-\u4db5\u4e00-\u9fcc\ua000-\ua48c\ua4d0-\ua4fd\ua500-\ua60c\ua610-\ua61f\ua62a\ua62b\ua640-\ua66e\ua67f-\ua697\ua6a0-\ua6ef\ua717-\ua71f\ua722-\ua788\ua78b-\ua78e\ua790-\ua793\ua7a0-\ua7aa\ua7f8-\ua801\ua803-\ua805\ua807-\ua80a\ua80c-\ua822\ua840-\ua873\ua882-\ua8b3\ua8f2-\ua8f7\ua8fb\ua90a-\ua925\ua930-\ua946\ua960-\ua97c\ua984-\ua9b2\ua9cf\uaa00-\uaa28\uaa40-\uaa42\uaa44-\uaa4b\uaa60-\uaa76\uaa7a\uaa80-\uaaaf\uaab1\uaab5\uaab6\uaab9-\uaabd\uaac0\uaac2\uaadb-\uaadd\uaae0-\uaaea\uaaf2-\uaaf4\uab01-\uab06\uab09-\uab0e\uab11-\uab16\uab20-\uab26\uab28-\uab2e\uabc0-\uabe2\uac00-\ud7a3\ud7b0-\ud7c6\ud7cb-\ud7fb\uf900-\ufa6d\ufa70-\ufad9\ufb00-\ufb06\ufb13-\ufb17\ufb1d\ufb1f-\ufb28\ufb2a-\ufb36\ufb38-\ufb3c\ufb3e\ufb40\ufb41\ufb43\ufb44\ufb46-\ufbb1\ufbd3-\ufd3d\ufd50-\ufd8f\ufd92-\ufdc7\ufdf0-\ufdfb\ufe70-\ufe74\ufe76-\ufefc\uff21-\uff3a\uff41-\uff5a\uff66-\uffbe\uffc2-\uffc7\uffca-\uffcf\uffd2-\uffd7\uffda-\uffdc";
      var nonASCIIidentifierChars = "\u0300-\u036f\u0483-\u0487\u0591-\u05bd\u05bf\u05c1\u05c2\u05c4\u05c5\u05c7\u0610-\u061a\u0620-\u0649\u0672-\u06d3\u06e7-\u06e8\u06fb-\u06fc\u0730-\u074a\u0800-\u0814\u081b-\u0823\u0825-\u0827\u0829-\u082d\u0840-\u0857\u08e4-\u08fe\u0900-\u0903\u093a-\u093c\u093e-\u094f\u0951-\u0957\u0962-\u0963\u0966-\u096f\u0981-\u0983\u09bc\u09be-\u09c4\u09c7\u09c8\u09d7\u09df-\u09e0\u0a01-\u0a03\u0a3c\u0a3e-\u0a42\u0a47\u0a48\u0a4b-\u0a4d\u0a51\u0a66-\u0a71\u0a75\u0a81-\u0a83\u0abc\u0abe-\u0ac5\u0ac7-\u0ac9\u0acb-\u0acd\u0ae2-\u0ae3\u0ae6-\u0aef\u0b01-\u0b03\u0b3c\u0b3e-\u0b44\u0b47\u0b48\u0b4b-\u0b4d\u0b56\u0b57\u0b5f-\u0b60\u0b66-\u0b6f\u0b82\u0bbe-\u0bc2\u0bc6-\u0bc8\u0bca-\u0bcd\u0bd7\u0be6-\u0bef\u0c01-\u0c03\u0c46-\u0c48\u0c4a-\u0c4d\u0c55\u0c56\u0c62-\u0c63\u0c66-\u0c6f\u0c82\u0c83\u0cbc\u0cbe-\u0cc4\u0cc6-\u0cc8\u0cca-\u0ccd\u0cd5\u0cd6\u0ce2-\u0ce3\u0ce6-\u0cef\u0d02\u0d03\u0d46-\u0d48\u0d57\u0d62-\u0d63\u0d66-\u0d6f\u0d82\u0d83\u0dca\u0dcf-\u0dd4\u0dd6\u0dd8-\u0ddf\u0df2\u0df3\u0e34-\u0e3a\u0e40-\u0e45\u0e50-\u0e59\u0eb4-\u0eb9\u0ec8-\u0ecd\u0ed0-\u0ed9\u0f18\u0f19\u0f20-\u0f29\u0f35\u0f37\u0f39\u0f41-\u0f47\u0f71-\u0f84\u0f86-\u0f87\u0f8d-\u0f97\u0f99-\u0fbc\u0fc6\u1000-\u1029\u1040-\u1049\u1067-\u106d\u1071-\u1074\u1082-\u108d\u108f-\u109d\u135d-\u135f\u170e-\u1710\u1720-\u1730\u1740-\u1750\u1772\u1773\u1780-\u17b2\u17dd\u17e0-\u17e9\u180b-\u180d\u1810-\u1819\u1920-\u192b\u1930-\u193b\u1951-\u196d\u19b0-\u19c0\u19c8-\u19c9\u19d0-\u19d9\u1a00-\u1a15\u1a20-\u1a53\u1a60-\u1a7c\u1a7f-\u1a89\u1a90-\u1a99\u1b46-\u1b4b\u1b50-\u1b59\u1b6b-\u1b73\u1bb0-\u1bb9\u1be6-\u1bf3\u1c00-\u1c22\u1c40-\u1c49\u1c5b-\u1c7d\u1cd0-\u1cd2\u1d00-\u1dbe\u1e01-\u1f15\u200c\u200d\u203f\u2040\u2054\u20d0-\u20dc\u20e1\u20e5-\u20f0\u2d81-\u2d96\u2de0-\u2dff\u3021-\u3028\u3099\u309a\ua640-\ua66d\ua674-\ua67d\ua69f\ua6f0-\ua6f1\ua7f8-\ua800\ua806\ua80b\ua823-\ua827\ua880-\ua881\ua8b4-\ua8c4\ua8d0-\ua8d9\ua8f3-\ua8f7\ua900-\ua909\ua926-\ua92d\ua930-\ua945\ua980-\ua983\ua9b3-\ua9c0\uaa00-\uaa27\uaa40-\uaa41\uaa4c-\uaa4d\uaa50-\uaa59\uaa7b\uaae0-\uaae9\uaaf2-\uaaf3\uabc0-\uabe1\uabec\uabed\uabf0-\uabf9\ufb20-\ufb28\ufe00-\ufe0f\ufe20-\ufe26\ufe33\ufe34\ufe4d-\ufe4f\uff10-\uff19\uff3f";
      var nonASCIIidentifierStart = new RegExp("[" + nonASCIIidentifierStartChars + "]");
      var nonASCIIidentifier = new RegExp("[" + nonASCIIidentifierStartChars + nonASCIIidentifierChars + "]");

      // Whether a single character denotes a newline.

      var newline = exports.newline = /[\n\r\u2028\u2029]/;

      // Matches a whole line break (where CRLF is considered a single
      // line break). Used to count lines.

      // in javascript, these two differ
      // in python they are the same, different methods are called on them
      var lineBreak = exports.lineBreak = /\r\n|[\n\r\u2028\u2029]/;
      var allLineBreaks = exports.allLineBreaks = new RegExp(lineBreak.source, 'g');


      // Test whether a given character code starts an identifier.

      var isIdentifierStart = exports.isIdentifierStart = function(code) {
        // permit $ (36) and @ (64). @ is used in ES7 decorators.
        if (code < 65) return code === 36 || code === 64;
        // 65 through 91 are uppercase letters.
        if (code < 91) return true;
        // permit _ (95).
        if (code < 97) return code === 95;
        // 97 through 123 are lowercase letters.
        if (code < 123)return true;
        return code >= 0xaa && nonASCIIidentifierStart.test(String.fromCharCode(code));
      };

      // Test whether a given character is part of an identifier.

      var isIdentifierChar = exports.isIdentifierChar = function(code) {
        if (code < 48) return code === 36;
        if (code < 58) return true;
        if (code < 65) return false;
        if (code < 91) return true;
        if (code < 97) return code === 95;
        if (code < 123)return true;
        return code >= 0xaa && nonASCIIidentifier.test(String.fromCharCode(code));
      };
    })(acorn);

    function in_array(what, arr) {
        for (var i = 0; i < arr.length; i += 1) {
            if (arr[i] === what) {
                return true;
            }
        }
        return false;
    }

    function trim(s) {
        return s.replace(/^\s+|\s+$/g, '');
    }

    function ltrim(s) {
        return s.replace(/^\s+/g, '');
    }

    function rtrim(s) {
        return s.replace(/\s+$/g, '');
    }

    function js_beautify(js_source_text, options) {
        "use strict";
        var beautifier = new Beautifier(js_source_text, options);
        return beautifier.beautify();
    }

    var MODE = {
            BlockStatement: 'BlockStatement', // 'BLOCK'
            Statement: 'Statement', // 'STATEMENT'
            ObjectLiteral: 'ObjectLiteral', // 'OBJECT',
            ArrayLiteral: 'ArrayLiteral', //'[EXPRESSION]',
            ForInitializer: 'ForInitializer', //'(FOR-EXPRESSION)',
            Conditional: 'Conditional', //'(COND-EXPRESSION)',
            Expression: 'Expression' //'(EXPRESSION)'
        };

    function Beautifier(js_source_text, options) {
        "use strict";
        var output
        var tokens = [], token_pos;
        var Tokenizer;
        var current_token;
        var last_type, last_last_text, indent_string;
        var flags, previous_flags, flag_store;
        var prefix;

        var handlers, opt;
        var baseIndentString = '';

        handlers = {
            'TK_START_EXPR': handle_start_expr,
            'TK_END_EXPR': handle_end_expr,
            'TK_START_BLOCK': handle_start_block,
            'TK_END_BLOCK': handle_end_block,
            'TK_WORD': handle_word,
            'TK_RESERVED': handle_word,
            'TK_SEMICOLON': handle_semicolon,
            'TK_STRING': handle_string,
            'TK_EQUALS': handle_equals,
            'TK_OPERATOR': handle_operator,
            'TK_COMMA': handle_comma,
            'TK_BLOCK_COMMENT': handle_block_comment,
            'TK_COMMENT': handle_comment,
            'TK_DOT': handle_dot,
            'TK_UNKNOWN': handle_unknown,
            'TK_EOF': handle_eof
        };

        function create_flags(flags_base, mode) {
            var next_indent_level = 0;
            if (flags_base) {
                next_indent_level = flags_base.indentation_level;
                if (!output.just_added_newline() &&
                    flags_base.line_indent_level > next_indent_level) {
                    next_indent_level = flags_base.line_indent_level;
                }
            }

            var next_flags = {
                mode: mode,
                parent: flags_base,
                last_text: flags_base ? flags_base.last_text : '', // last token text
                last_word: flags_base ? flags_base.last_word : '', // last 'TK_WORD' passed
                declaration_statement: false,
                declaration_assignment: false,
                multiline_frame: false,
                inline_frame: false,
                if_block: false,
                else_block: false,
                do_block: false,
                do_while: false,
                import_block: false,
                in_case_statement: false, // switch(..){ INSIDE HERE }
                in_case: false, // we're on the exact line with "case 0:"
                case_body: false, // the indented case-action block
                indentation_level: next_indent_level,
                line_indent_level: flags_base ? flags_base.line_indent_level : next_indent_level,
                start_line_index: output.get_line_number(),
                ternary_depth: 0
            };
            return next_flags;
        }

        // Some interpreters have unexpected results with foo = baz || bar;
        options = options ? options : {};
        opt = {};

        // compatibility
        if (options.braces_on_own_line !== undefined) { //graceful handling of deprecated option
            opt.brace_style = options.braces_on_own_line ? "expand" : "collapse";
        }
        opt.brace_style = options.brace_style ? options.brace_style : (opt.brace_style ? opt.brace_style : "collapse");

        // graceful handling of deprecated option
        if (opt.brace_style === "expand-strict") {
            opt.brace_style = "expand";
        }

        opt.indent_size = options.indent_size ? parseInt(options.indent_size, 10) : 4;
        opt.indent_char = options.indent_char ? options.indent_char : ' ';
        opt.eol = options.eol ? options.eol : 'auto';
        opt.preserve_newlines = (options.preserve_newlines === undefined) ? true : options.preserve_newlines;
        opt.break_chained_methods = (options.break_chained_methods === undefined) ? false : options.break_chained_methods;
        opt.max_preserve_newlines = (options.max_preserve_newlines === undefined) ? 0 : parseInt(options.max_preserve_newlines, 10);
        opt.space_in_paren = (options.space_in_paren === undefined) ? false : options.space_in_paren;
        opt.space_in_empty_paren = (options.space_in_empty_paren === undefined) ? false : options.space_in_empty_paren;
        opt.jslint_happy = (options.jslint_happy === undefined) ? false : options.jslint_happy;
        opt.space_after_anon_function = (options.space_after_anon_function === undefined) ? false : options.space_after_anon_function;
        opt.keep_array_indentation = (options.keep_array_indentation === undefined) ? false : options.keep_array_indentation;
        opt.space_before_conditional = (options.space_before_conditional === undefined) ? true : options.space_before_conditional;
        opt.unescape_strings = (options.unescape_strings === undefined) ? false : options.unescape_strings;
        opt.wrap_line_length = (options.wrap_line_length === undefined) ? 0 : parseInt(options.wrap_line_length, 10);
        opt.e4x = (options.e4x === undefined) ? false : options.e4x;
        opt.end_with_newline = (options.end_with_newline === undefined) ? false : options.end_with_newline;
        opt.comma_first = (options.comma_first === undefined) ? false : options.comma_first;

        // For testing of beautify ignore:start directive
        opt.test_output_raw = (options.test_output_raw === undefined) ? false : options.test_output_raw;

        // force opt.space_after_anon_function to true if opt.jslint_happy
        if(opt.jslint_happy) {
            opt.space_after_anon_function = true;
        }

        if(options.indent_with_tabs){
            opt.indent_char = '\t';
            opt.indent_size = 1;
        }

        if (opt.eol === 'auto') {
            opt.eol = '\n';
            if (js_source_text && acorn.lineBreak.test(js_source_text || '')) {
                opt.eol = js_source_text.match(acorn.lineBreak)[0];
            }
        }

        opt.eol = opt.eol.replace(/\\r/, '\r').replace(/\\n/, '\n')

        //----------------------------------
        indent_string = '';
        while (opt.indent_size > 0) {
            indent_string += opt.indent_char;
            opt.indent_size -= 1;
        }

        var preindent_index = 0;
        if(js_source_text && js_source_text.length) {
            while ( (js_source_text.charAt(preindent_index) === ' ' ||
                    js_source_text.charAt(preindent_index) === '\t')) {
                baseIndentString += js_source_text.charAt(preindent_index);
                preindent_index += 1;
            }
            js_source_text = js_source_text.substring(preindent_index);
        }

        last_type = 'TK_START_BLOCK'; // last token type
        last_last_text = ''; // pre-last token text
        output = new Output(indent_string, baseIndentString);

        // If testing the ignore directive, start with output disable set to true
        output.raw = opt.test_output_raw;


        // Stack of parsing/formatting states, including MODE.
        // We tokenize, parse, and output in an almost purely a forward-only stream of token input
        // and formatted output.  This makes the beautifier less accurate than full parsers
        // but also far more tolerant of syntax errors.
        //
        // For example, the default mode is MODE.BlockStatement. If we see a '{' we push a new frame of type
        // MODE.BlockStatement on the the stack, even though it could be object literal.  If we later
        // encounter a ":", we'll switch to to MODE.ObjectLiteral.  If we then see a ";",
        // most full parsers would die, but the beautifier gracefully falls back to
        // MODE.BlockStatement and continues on.
        flag_store = [];
        set_mode(MODE.BlockStatement);

        this.beautify = function() {

            /*jshint onevar:true */
            var local_token, sweet_code;
            Tokenizer = new tokenizer(js_source_text, opt, indent_string);
            tokens = Tokenizer.tokenize();
            token_pos = 0;

            while (local_token = get_token()) {
                for(var i = 0; i < local_token.comments_before.length; i++) {
                    // The cleanest handling of inline comments is to treat them as though they aren't there.
                    // Just continue formatting and the behavior should be logical.
                    // Also ignore unknown tokens.  Again, this should result in better behavior.
                    handle_token(local_token.comments_before[i]);
                }
                handle_token(local_token);

                last_last_text = flags.last_text;
                last_type = local_token.type;
                flags.last_text = local_token.text;

                token_pos += 1;
            }

            sweet_code = output.get_code();
            if (opt.end_with_newline) {
                sweet_code += '\n';
            }

            if (opt.eol != '\n') {
                sweet_code = sweet_code.replace(/[\n]/g, opt.eol);
            }

            return sweet_code;
        };

        function handle_token(local_token) {
            var newlines = local_token.newlines;
            var keep_whitespace = opt.keep_array_indentation && is_array(flags.mode);

            if (keep_whitespace) {
                for (i = 0; i < newlines; i += 1) {
                    print_newline(i > 0);
                }
            } else {
                if (opt.max_preserve_newlines && newlines > opt.max_preserve_newlines) {
                    newlines = opt.max_preserve_newlines;
                }

                if (opt.preserve_newlines) {
                    if (local_token.newlines > 1) {
                        print_newline();
                        for (var i = 1; i < newlines; i += 1) {
                            print_newline(true);
                        }
                    }
                }
            }

            current_token = local_token;
            handlers[current_token.type]();
        }

        // we could use just string.split, but
        // IE doesn't like returning empty strings
        function split_linebreaks(s) {
            //return s.split(/\x0d\x0a|\x0a/);

            s = s.replace(acorn.allLineBreaks, '\n');
            var out = [],
                idx = s.indexOf("\n");
            while (idx !== -1) {
                out.push(s.substring(0, idx));
                s = s.substring(idx + 1);
                idx = s.indexOf("\n");
            }
            if (s.length) {
                out.push(s);
            }
            return out;
        }

        var newline_restricted_tokens = ['break','contiue','return', 'throw'];
        function allow_wrap_or_preserved_newline(force_linewrap) {
            force_linewrap = (force_linewrap === undefined) ? false : force_linewrap;

            // Never wrap the first token on a line
            if (output.just_added_newline()) {
                return
            }

            if ((opt.preserve_newlines && current_token.wanted_newline) || force_linewrap) {
                print_newline(false, true);
            } else if (opt.wrap_line_length) {
                if (last_type === 'TK_RESERVED' && in_array(flags.last_text, newline_restricted_tokens)) {
                    // These tokens should never have a newline inserted
                    // between them and the following expression.
                    return
                }
                var proposed_line_length = output.current_line.get_character_count() + current_token.text.length +
                    (output.space_before_token ? 1 : 0);
                if (proposed_line_length >= opt.wrap_line_length) {
                    print_newline(false, true);
                }
            }
        }

        function print_newline(force_newline, preserve_statement_flags) {
            if (!preserve_statement_flags) {
                if (flags.last_text !== ';' && flags.last_text !== ',' && flags.last_text !== '=' && last_type !== 'TK_OPERATOR') {
                    while (flags.mode === MODE.Statement && !flags.if_block && !flags.do_block) {
                        restore_mode();
                    }
                }
            }

            if (output.add_new_line(force_newline)) {
                flags.multiline_frame = true;
            }
        }

        function print_token_line_indentation() {
            if (output.just_added_newline()) {
                if (opt.keep_array_indentation && is_array(flags.mode) && current_token.wanted_newline) {
                    output.current_line.push(current_token.whitespace_before);
                    output.space_before_token = false;
                } else if (output.set_indent(flags.indentation_level)) {
                    flags.line_indent_level = flags.indentation_level;
                }
            }
        }

        function print_token(printable_token) {
            if (output.raw) {
                output.add_raw_token(current_token)
                return;
            }

            if (opt.comma_first && last_type === 'TK_COMMA'
                && output.just_added_newline()) {
                if(output.previous_line.last() === ',') {
                    var popped = output.previous_line.pop();
                    // if the comma was already at the start of the line,
                    // pull back onto that line and reprint the indentation
                    if(output.previous_line.is_empty()) {
                         output.previous_line.push(popped);
                         output.trim(true);
                         output.current_line.pop();
                         output.trim();
                    }

                    // add the comma in front of the next token
                    print_token_line_indentation();
                    output.add_token(',');
                    output.space_before_token = true;
                }
            }

            printable_token = printable_token || current_token.text;
            print_token_line_indentation();
            output.add_token(printable_token);
        }

        function indent() {
            flags.indentation_level += 1;
        }

        function deindent() {
            if (flags.indentation_level > 0 &&
                ((!flags.parent) || flags.indentation_level > flags.parent.indentation_level))
                flags.indentation_level -= 1;
        }

        function set_mode(mode) {
            if (flags) {
                flag_store.push(flags);
                previous_flags = flags;
            } else {
                previous_flags = create_flags(null, mode);
            }

            flags = create_flags(previous_flags, mode);
        }

        function is_array(mode) {
            return mode === MODE.ArrayLiteral;
        }

        function is_expression(mode) {
            return in_array(mode, [MODE.Expression, MODE.ForInitializer, MODE.Conditional]);
        }

        function restore_mode() {
            if (flag_store.length > 0) {
                previous_flags = flags;
                flags = flag_store.pop();
                if (previous_flags.mode === MODE.Statement) {
                    output.remove_redundant_indentation(previous_flags);
                }
            }
        }

        function start_of_object_property() {
            return flags.parent.mode === MODE.ObjectLiteral && flags.mode === MODE.Statement && (
                (flags.last_text === ':' && flags.ternary_depth === 0) || (last_type === 'TK_RESERVED' && in_array(flags.last_text, ['get', 'set'])));
        }

        function start_of_statement() {
            if (
                    (last_type === 'TK_RESERVED' && in_array(flags.last_text, ['var', 'let', 'const']) && current_token.type === 'TK_WORD') ||
                    (last_type === 'TK_RESERVED' && flags.last_text === 'do') ||
                    (last_type === 'TK_RESERVED' && in_array(flags.last_text, ['return', 'throw']) && !current_token.wanted_newline) ||
                    (last_type === 'TK_RESERVED' && flags.last_text === 'else' && !(current_token.type === 'TK_RESERVED' && current_token.text === 'if')) ||
                    (last_type === 'TK_END_EXPR' && (previous_flags.mode === MODE.ForInitializer || previous_flags.mode === MODE.Conditional)) ||
                    (last_type === 'TK_WORD' && flags.mode === MODE.BlockStatement
                        && !flags.in_case
                        && !(current_token.text === '--' || current_token.text === '++')
                        && last_last_text !== 'function'
                        && current_token.type !== 'TK_WORD' && current_token.type !== 'TK_RESERVED') ||
                    (flags.mode === MODE.ObjectLiteral && (
                        (flags.last_text === ':' && flags.ternary_depth === 0) || (last_type === 'TK_RESERVED' && in_array(flags.last_text, ['get', 'set']))))
                ) {

                set_mode(MODE.Statement);
                indent();

                if (last_type === 'TK_RESERVED' && in_array(flags.last_text, ['var', 'let', 'const']) && current_token.type === 'TK_WORD') {
                    flags.declaration_statement = true;
                }

                // Issue #276:
                // If starting a new statement with [if, for, while, do], push to a new line.
                // if (a) if (b) if(c) d(); else e(); else f();
                if (!start_of_object_property()) {
                    allow_wrap_or_preserved_newline(
                        current_token.type === 'TK_RESERVED' && in_array(current_token.text, ['do', 'for', 'if', 'while']));
                }

                return true;
            }
            return false;
        }

        function all_lines_start_with(lines, c) {
            for (var i = 0; i < lines.length; i++) {
                var line = trim(lines[i]);
                if (line.charAt(0) !== c) {
                    return false;
                }
            }
            return true;
        }

        function each_line_matches_indent(lines, indent) {
            var i = 0,
                len = lines.length,
                line;
            for (; i < len; i++) {
                line = lines[i];
                // allow empty lines to pass through
                if (line && line.indexOf(indent) !== 0) {
                    return false;
                }
            }
            return true;
        }

        function is_special_word(word) {
            return in_array(word, ['case', 'return', 'do', 'if', 'throw', 'else']);
        }

        function get_token(offset) {
            var index = token_pos + (offset || 0);
            return (index < 0 || index >= tokens.length) ? null : tokens[index];
        }

        function handle_start_expr() {
            if (start_of_statement()) {
                // The conditional starts the statement if appropriate.
            }

            var next_mode = MODE.Expression;
            if (current_token.text === '[') {

                if (last_type === 'TK_WORD' || flags.last_text === ')') {
                    // this is array index specifier, break immediately
                    // a[x], fn()[x]
                    if (last_type === 'TK_RESERVED' && in_array(flags.last_text, Tokenizer.line_starters)) {
                        output.space_before_token = true;
                    }
                    set_mode(next_mode);
                    print_token();
                    indent();
                    if (opt.space_in_paren) {
                        output.space_before_token = true;
                    }
                    return;
                }

                next_mode = MODE.ArrayLiteral;
                if (is_array(flags.mode)) {
                    if (flags.last_text === '[' ||
                        (flags.last_text === ',' && (last_last_text === ']' || last_last_text === '}'))) {
                        // ], [ goes to new line
                        // }, [ goes to new line
                        if (!opt.keep_array_indentation) {
                            print_newline();
                        }
                    }
                }

            } else {
                if (last_type === 'TK_RESERVED' && flags.last_text === 'for') {
                    next_mode = MODE.ForInitializer;
                } else if (last_type === 'TK_RESERVED' && in_array(flags.last_text, ['if', 'while'])) {
                    next_mode = MODE.Conditional;
                } else {
                    // next_mode = MODE.Expression;
                }
            }

            if (flags.last_text === ';' || last_type === 'TK_START_BLOCK') {
                print_newline();
            } else if (last_type === 'TK_END_EXPR' || last_type === 'TK_START_EXPR' || last_type === 'TK_END_BLOCK' || flags.last_text === '.') {
                // TODO: Consider whether forcing this is required.  Review failing tests when removed.
                allow_wrap_or_preserved_newline(current_token.wanted_newline);
                // do nothing on (( and )( and ][ and ]( and .(
            } else if (!(last_type === 'TK_RESERVED' && current_token.text === '(') && last_type !== 'TK_WORD' && last_type !== 'TK_OPERATOR') {
                output.space_before_token = true;
            } else if ((last_type === 'TK_RESERVED' && (flags.last_word === 'function' || flags.last_word === 'typeof')) ||
                (flags.last_text === '*' && last_last_text === 'function')) {
                // function() vs function ()
                if (opt.space_after_anon_function) {
                    output.space_before_token = true;
                }
            } else if (last_type === 'TK_RESERVED' && (in_array(flags.last_text, Tokenizer.line_starters) || flags.last_text === 'catch')) {
                if (opt.space_before_conditional) {
                    output.space_before_token = true;
                }
            }

            // Should be a space between await and an IIFE
            if(current_token.text === '(' && last_type === 'TK_RESERVED' && flags.last_word === 'await'){
                output.space_before_token = true;
            }

            // Support of this kind of newline preservation.
            // a = (b &&
            //     (c || d));
            if (current_token.text === '(') {
                if (last_type === 'TK_EQUALS' || last_type === 'TK_OPERATOR') {
                    if (!start_of_object_property()) {
                        allow_wrap_or_preserved_newline();
                    }
                }
            }

            // Support preserving wrapped arrow function expressions
            // a.b('c',
            //     () => d.e
            // )
            if (current_token.text === '(' && last_type !== 'TK_WORD' && last_type !== 'TK_RESERVED') {
                allow_wrap_or_preserved_newline();
            }

            set_mode(next_mode);
            print_token();
            if (opt.space_in_paren) {
                output.space_before_token = true;
            }

            // In all cases, if we newline while inside an expression it should be indented.
            indent();
        }

        function handle_end_expr() {
            // statements inside expressions are not valid syntax, but...
            // statements must all be closed when their container closes
            while (flags.mode === MODE.Statement) {
                restore_mode();
            }

            if (flags.multiline_frame) {
                allow_wrap_or_preserved_newline(current_token.text === ']' && is_array(flags.mode) && !opt.keep_array_indentation);
            }

            if (opt.space_in_paren) {
                if (last_type === 'TK_START_EXPR' && ! opt.space_in_empty_paren) {
                    // () [] no inner space in empty parens like these, ever, ref #320
                    output.trim();
                    output.space_before_token = false;
                } else {
                    output.space_before_token = true;
                }
            }
            if (current_token.text === ']' && opt.keep_array_indentation) {
                print_token();
                restore_mode();
            } else {
                restore_mode();
                print_token();
            }
            output.remove_redundant_indentation(previous_flags);

            // do {} while () // no statement required after
            if (flags.do_while && previous_flags.mode === MODE.Conditional) {
                previous_flags.mode = MODE.Expression;
                flags.do_block = false;
                flags.do_while = false;

            }
        }

        function handle_start_block() {
            // Check if this is should be treated as a ObjectLiteral
            var next_token = get_token(1)
            var second_token = get_token(2)
            if (second_token && (
                    (in_array(second_token.text, [':', ',']) && in_array(next_token.type, ['TK_STRING', 'TK_WORD', 'TK_RESERVED']))
                    || (in_array(next_token.text, ['get', 'set']) && in_array(second_token.type, ['TK_WORD', 'TK_RESERVED']))
                )) {
                // We don't support TypeScript,but we didn't break it for a very long time.
                // We'll try to keep not breaking it.
                if (!in_array(last_last_text, ['class','interface'])) {
                    set_mode(MODE.ObjectLiteral);
                } else {
                    set_mode(MODE.BlockStatement);
                }
            } else if (last_type === 'TK_OPERATOR' && flags.last_text === '=>') {
                // arrow function: (param1, paramN) => { statements }
                set_mode(MODE.BlockStatement);
            } else if (in_array(last_type, ['TK_EQUALS', 'TK_START_EXPR', 'TK_COMMA', 'TK_OPERATOR']) ||
                (last_type === 'TK_RESERVED' && in_array(flags.last_text, ['return', 'throw', 'import']))
                ) {
                // Detecting shorthand function syntax is difficult by scanning forward,
                //     so check the surrounding context.
                // If the block is being returned, imported, passed as arg,
                //     assigned with = or assigned in a nested object, treat as an ObjectLiteral.
                set_mode(MODE.ObjectLiteral);
            } else {
                set_mode(MODE.BlockStatement);
            }

            var empty_braces = !next_token.comments_before.length &&  next_token.text === '}';
            var empty_anonymous_function = empty_braces && flags.last_word === 'function' &&
                last_type === 'TK_END_EXPR';


            if (opt.brace_style === "expand" ||
                (opt.brace_style === "none" && current_token.wanted_newline)) {
                if (last_type !== 'TK_OPERATOR' &&
                    (empty_anonymous_function ||
                        last_type === 'TK_EQUALS' ||
                        (last_type === 'TK_RESERVED' && is_special_word(flags.last_text) && flags.last_text !== 'else'))) {
                    output.space_before_token = true;
                } else {
                    print_newline(false, true);
                }
            } else { // collapse
                if (opt.brace_style === 'collapse-preserve-inline') {
                    // search forward for a newline wanted inside this block
                    var index = 0;
                    var check_token = null;
                    flags.inline_frame = true;
                    do {
                        index += 1;
                        check_token = get_token(index);
                        if (check_token.wanted_newline) {
                            flags.inline_frame = false;
                            break;
                        }
                    } while (check_token.type !== 'TK_EOF' &&
                          !(check_token.type === 'TK_END_BLOCK' && check_token.opened === current_token))
                }

                if (is_array(previous_flags.mode) && (last_type === 'TK_START_EXPR' || last_type === 'TK_COMMA')) {
                    // if we're preserving inline,
                    // allow newline between comma and next brace.
                    if (flags.inline_frame) {
                        allow_wrap_or_preserved_newline();
                        flags.inline_frame = true;
                        previous_flags.multiline_frame = previous_flags.multiline_frame || flags.multiline_frame;
                        flags.multiline_frame = false;
                    } else if (last_type === 'TK_COMMA') {
                        output.space_before_token = true;
                    }
                } else if (last_type !== 'TK_OPERATOR' && last_type !== 'TK_START_EXPR') {
                    if (last_type === 'TK_START_BLOCK') {
                        print_newline();
                    } else {
                        output.space_before_token = true;
                    }
                }
            }
            print_token();
            indent();
        }

        function handle_end_block() {
            // statements must all be closed when their container closes
            while (flags.mode === MODE.Statement) {
                restore_mode();
            }
            var empty_braces = last_type === 'TK_START_BLOCK';

            if (opt.brace_style === "expand") {
                if (!empty_braces) {
                    print_newline();
                }
            } else {
                // skip {}
                if (!empty_braces) {
                    if (flags.inline_frame) {
                        output.space_before_token = true;
                    } else if (is_array(flags.mode) && opt.keep_array_indentation) {
                        // we REALLY need a newline here, but newliner would skip that
                        opt.keep_array_indentation = false;
                        print_newline();
                        opt.keep_array_indentation = true;

                    } else {
                        print_newline();
                    }
                }
            }
            restore_mode();
            print_token();
        }

        function handle_word() {
            if (current_token.type === 'TK_RESERVED') {
                if (in_array(current_token.text, ['set', 'get']) && flags.mode !== MODE.ObjectLiteral) {
                    current_token.type = 'TK_WORD';
                } else if (in_array(current_token.text, ['as', 'from']) && !flags.import_block) {
                    current_token.type = 'TK_WORD';
                } else if (flags.mode === MODE.ObjectLiteral) {
                    var next_token = get_token(1);
                    if (next_token.text == ':') {
                        current_token.type = 'TK_WORD';
                    }
                }
            }

            if (start_of_statement()) {
                // The conditional starts the statement if appropriate.
            } else if (current_token.wanted_newline && !is_expression(flags.mode) &&
                (last_type !== 'TK_OPERATOR' || (flags.last_text === '--' || flags.last_text === '++')) &&
                last_type !== 'TK_EQUALS' &&
                (opt.preserve_newlines || !(last_type === 'TK_RESERVED' && in_array(flags.last_text, ['var', 'let', 'const', 'set', 'get'])))) {

                print_newline();
            }

            if (flags.do_block && !flags.do_while) {
                if (current_token.type === 'TK_RESERVED' && current_token.text === 'while') {
                    // do {} ## while ()
                    output.space_before_token = true;
                    print_token();
                    output.space_before_token = true;
                    flags.do_while = true;
                    return;
                } else {
                    // do {} should always have while as the next word.
                    // if we don't see the expected while, recover
                    print_newline();
                    flags.do_block = false;
                }
            }

            // if may be followed by else, or not
            // Bare/inline ifs are tricky
            // Need to unwind the modes correctly: if (a) if (b) c(); else d(); else e();
            if (flags.if_block) {
                if (!flags.else_block && (current_token.type === 'TK_RESERVED' && current_token.text === 'else')) {
                    flags.else_block = true;
                } else {
                    while (flags.mode === MODE.Statement) {
                        restore_mode();
                    }
                    flags.if_block = false;
                    flags.else_block = false;
                }
            }

            if (current_token.type === 'TK_RESERVED' && (current_token.text === 'case' || (current_token.text === 'default' && flags.in_case_statement))) {
                print_newline();
                if (flags.case_body || opt.jslint_happy) {
                    // switch cases following one another
                    deindent();
                    flags.case_body = false;
                }
                print_token();
                flags.in_case = true;
                flags.in_case_statement = true;
                return;
            }

            if (current_token.type === 'TK_RESERVED' && current_token.text === 'function') {
                if (in_array(flags.last_text, ['}', ';']) || (output.just_added_newline() && ! in_array(flags.last_text, ['[', '{', ':', '=', ',']))) {
                    // make sure there is a nice clean space of at least one blank line
                    // before a new function definition
                    if ( !output.just_added_blankline() && !current_token.comments_before.length) {
                        print_newline();
                        print_newline(true);
                    }
                }
                if (last_type === 'TK_RESERVED' || last_type === 'TK_WORD') {
                    if (last_type === 'TK_RESERVED' && in_array(flags.last_text, ['get', 'set', 'new', 'return', 'export', 'async'])) {
                        output.space_before_token = true;
                    } else if (last_type === 'TK_RESERVED' && flags.last_text === 'default' && last_last_text === 'export') {
                        output.space_before_token = true;
                    } else {
                        print_newline();
                    }
                } else if (last_type === 'TK_OPERATOR' || flags.last_text === '=') {
                    // foo = function
                    output.space_before_token = true;
                } else if (!flags.multiline_frame && (is_expression(flags.mode) || is_array(flags.mode))) {
                    // (function
                } else {
                    print_newline();
                }
            }

            if (last_type === 'TK_COMMA' || last_type === 'TK_START_EXPR' || last_type === 'TK_EQUALS' || last_type === 'TK_OPERATOR') {
                if (!start_of_object_property()) {
                    allow_wrap_or_preserved_newline();
                }
            }

            if (current_token.type === 'TK_RESERVED' &&  in_array(current_token.text, ['function', 'get', 'set'])) {
                print_token();
                flags.last_word = current_token.text;
                return;
            }

            prefix = 'NONE';

            if (last_type === 'TK_END_BLOCK') {

                if (!(current_token.type === 'TK_RESERVED' && in_array(current_token.text, ['else', 'catch', 'finally', 'from']))) {
                    prefix = 'NEWLINE';
                } else {
                    if (opt.brace_style === "expand" ||
                        opt.brace_style === "end-expand" ||
                        (opt.brace_style === "none" && current_token.wanted_newline)) {
                        prefix = 'NEWLINE';
                    } else {
                        prefix = 'SPACE';
                        output.space_before_token = true;
                    }
                }
            } else if (last_type === 'TK_SEMICOLON' && flags.mode === MODE.BlockStatement) {
                // TODO: Should this be for STATEMENT as well?
                prefix = 'NEWLINE';
            } else if (last_type === 'TK_SEMICOLON' && is_expression(flags.mode)) {
                prefix = 'SPACE';
            } else if (last_type === 'TK_STRING') {
                prefix = 'NEWLINE';
            } else if (last_type === 'TK_RESERVED' || last_type === 'TK_WORD' ||
                (flags.last_text === '*' && last_last_text === 'function')) {
                prefix = 'SPACE';
            } else if (last_type === 'TK_START_BLOCK') {
                if (flags.inline_frame) {
                    prefix = 'SPACE';
                } else {
                    prefix = 'NEWLINE';
                }
            } else if (last_type === 'TK_END_EXPR') {
                output.space_before_token = true;
                prefix = 'NEWLINE';
            }

            if (current_token.type === 'TK_RESERVED' && in_array(current_token.text, Tokenizer.line_starters) && flags.last_text !== ')') {
                if (flags.last_text === 'else' || flags.last_text === 'export') {
                    prefix = 'SPACE';
                } else {
                    prefix = 'NEWLINE';
                }

            }

            if (current_token.type === 'TK_RESERVED' && in_array(current_token.text, ['else', 'catch', 'finally'])) {
                if (!(last_type === 'TK_END_BLOCK' && previous_flags.mode === MODE.BlockStatement) ||
                    opt.brace_style === "expand" ||
                    opt.brace_style === "end-expand" ||
                    (opt.brace_style === "none" && current_token.wanted_newline)) {
                    print_newline();
                } else {
                    output.trim(true);
                    var line = output.current_line;
                    // If we trimmed and there's something other than a close block before us
                    // put a newline back in.  Handles '} // comment' scenario.
                    if (line.last() !== '}') {
                        print_newline();
                    }
                    output.space_before_token = true;
                }
            } else if (prefix === 'NEWLINE') {
                if (last_type === 'TK_RESERVED' && is_special_word(flags.last_text)) {
                    // no newline between 'return nnn'
                    output.space_before_token = true;
                } else if (last_type !== 'TK_END_EXPR') {
                    if ((last_type !== 'TK_START_EXPR' || !(current_token.type === 'TK_RESERVED' && in_array(current_token.text, ['var', 'let', 'const']))) && flags.last_text !== ':') {
                        // no need to force newline on 'var': for (var x = 0...)
                        if (current_token.type === 'TK_RESERVED' && current_token.text === 'if' && flags.last_text === 'else') {
                            // no newline for } else if {
                            output.space_before_token = true;
                        } else {
                            print_newline();
                        }
                    }
                } else if (current_token.type === 'TK_RESERVED' && in_array(current_token.text, Tokenizer.line_starters) && flags.last_text !== ')') {
                    print_newline();
                }
            } else if (flags.multiline_frame && is_array(flags.mode) && flags.last_text === ',' && last_last_text === '}') {
                print_newline(); // }, in lists get a newline treatment
            } else if (prefix === 'SPACE') {
                output.space_before_token = true;
            }
            print_token();
            flags.last_word = current_token.text;

            if (current_token.type === 'TK_RESERVED') {
                if (current_token.text === 'do') {
                    flags.do_block = true;
                } else if (current_token.text === 'if') {
                    flags.if_block = true;
                } else if (current_token.text === 'import') {
                    flags.import_block = true;
                } else if (flags.import_block && current_token.type === 'TK_RESERVED' && current_token.text === 'from') {
                    flags.import_block = false;
                }
            }
        }

        function handle_semicolon() {
            if (start_of_statement()) {
                // The conditional starts the statement if appropriate.
                // Semicolon can be the start (and end) of a statement
                output.space_before_token = false;
            }
            while (flags.mode === MODE.Statement && !flags.if_block && !flags.do_block) {
                restore_mode();
            }

            // hacky but effective for the moment
            if (flags.import_block) {
                flags.import_block = false;
            }
            print_token();
        }

        function handle_string() {
            if (start_of_statement()) {
                // The conditional starts the statement if appropriate.
                // One difference - strings want at least a space before
                output.space_before_token = true;
            } else if (last_type === 'TK_RESERVED' || last_type === 'TK_WORD' || flags.inline_frame) {
                output.space_before_token = true;
            } else if (last_type === 'TK_COMMA' || last_type === 'TK_START_EXPR' || last_type === 'TK_EQUALS' || last_type === 'TK_OPERATOR') {
                if (!start_of_object_property()) {
                    allow_wrap_or_preserved_newline();
                }
            } else {
                print_newline();
            }
            print_token();
        }

        function handle_equals() {
            if (start_of_statement()) {
                // The conditional starts the statement if appropriate.
            }

            if (flags.declaration_statement) {
                // just got an '=' in a var-line, different formatting/line-breaking, etc will now be done
                flags.declaration_assignment = true;
            }
            output.space_before_token = true;
            print_token();
            output.space_before_token = true;
        }

        function handle_comma() {
            print_token();
            output.space_before_token = true;
            if (flags.declaration_statement) {
                if (is_expression(flags.parent.mode)) {
                    // do not break on comma, for(var a = 1, b = 2)
                    flags.declaration_assignment = false;
                }

                if (flags.declaration_assignment) {
                    flags.declaration_assignment = false;
                    print_newline(false, true);
                } else if (opt.comma_first) {
                    // for comma-first, we want to allow a newline before the comma
                    // to turn into a newline after the comma, which we will fixup later
                    allow_wrap_or_preserved_newline();
                }
            } else if (flags.mode === MODE.ObjectLiteral ||
                (flags.mode === MODE.Statement && flags.parent.mode === MODE.ObjectLiteral)) {
                if (flags.mode === MODE.Statement) {
                    restore_mode();
                }

                if (!flags.inline_frame) {
                    print_newline();
                }
            } else if (opt.comma_first) {
                // EXPR or DO_BLOCK
                // for comma-first, we want to allow a newline before the comma
                // to turn into a newline after the comma, which we will fixup later
                allow_wrap_or_preserved_newline();
            }
        }

        function handle_operator() {
            if (start_of_statement()) {
                // The conditional starts the statement if appropriate.
            }

            if (last_type === 'TK_RESERVED' && is_special_word(flags.last_text)) {
                // "return" had a special handling in TK_WORD. Now we need to return the favor
                output.space_before_token = true;
                print_token();
                return;
            }

            // hack for actionscript's import .*;
            if (current_token.text === '*' && last_type === 'TK_DOT') {
                print_token();
                return;
            }

            if (current_token.text === ':' && flags.in_case) {
                flags.case_body = true;
                indent();
                print_token();
                print_newline();
                flags.in_case = false;
                return;
            }

            if (current_token.text === '::') {
                // no spaces around exotic namespacing syntax operator
                print_token();
                return;
            }

            // Allow line wrapping between operators
            if (last_type === 'TK_OPERATOR') {
                allow_wrap_or_preserved_newline();
            }

            var space_before = true;
            var space_after = true;

            if (in_array(current_token.text, ['--', '++', '!', '~']) || (in_array(current_token.text, ['-', '+']) && (in_array(last_type, ['TK_START_BLOCK', 'TK_START_EXPR', 'TK_EQUALS', 'TK_OPERATOR']) || in_array(flags.last_text, Tokenizer.line_starters) || flags.last_text === ','))) {
                // unary operators (and binary +/- pretending to be unary) special cases

                space_before = false;
                space_after = false;

                // http://www.ecma-international.org/ecma-262/5.1/#sec-7.9.1
                // if there is a newline between -- or ++ and anything else we should preserve it.
                if (current_token.wanted_newline && (current_token.text === '--' || current_token.text === '++')) {
                    print_newline(false, true);
                }

                if (flags.last_text === ';' && is_expression(flags.mode)) {
                    // for (;; ++i)
                    //        ^^^
                    space_before = true;
                }

                if (last_type === 'TK_RESERVED') {
                    space_before = true;
                } else if (last_type === 'TK_END_EXPR') {
                    space_before = !(flags.last_text === ']' && (current_token.text === '--' || current_token.text === '++'));
                } else if (last_type === 'TK_OPERATOR') {
                    // a++ + ++b;
                    // a - -b
                    space_before = in_array(current_token.text, ['--', '-', '++', '+']) && in_array(flags.last_text, ['--', '-', '++', '+']);
                    // + and - are not unary when preceeded by -- or ++ operator
                    // a-- + b
                    // a * +b
                    // a - -b
                    if (in_array(current_token.text, ['+', '-']) && in_array(flags.last_text, ['--', '++'])) {
                        space_after = true;
                    }
                }


                if (((flags.mode === MODE.BlockStatement && !flags.inline_frame) || flags.mode === MODE.Statement)
                    && (flags.last_text === '{' || flags.last_text === ';')) {
                    // { foo; --i }
                    // foo(); --bar;
                    print_newline();
                }
            } else if (current_token.text === ':') {
                if (flags.ternary_depth === 0) {
                    // Colon is invalid javascript outside of ternary and object, but do our best to guess what was meant.
                    space_before = false;
                } else {
                    flags.ternary_depth -= 1;
                }
            } else if (current_token.text === '?') {
                flags.ternary_depth += 1;
            } else if (current_token.text === '*' && last_type === 'TK_RESERVED' && flags.last_text === 'function') {
                space_before = false;
                space_after = false;
            }
            output.space_before_token = output.space_before_token || space_before;
            print_token();
            output.space_before_token = space_after;
        }

        function handle_block_comment() {
            if (output.raw) {
                output.add_raw_token(current_token)
                if (current_token.directives && current_token.directives['preserve'] === 'end') {
                    // If we're testing the raw output behavior, do not allow a directive to turn it off.
                    if (!opt.test_output_raw) {
                        output.raw = false;
                    }
                }
                return;
            }

            if (current_token.directives) {
                print_newline(false, true);
                print_token();
                if (current_token.directives['preserve'] === 'start') {
                    output.raw = true;
                }
                print_newline(false, true);
                return;
            }

            // inline block
            if (!acorn.newline.test(current_token.text) && !current_token.wanted_newline) {
                output.space_before_token = true;
                print_token();
                output.space_before_token = true;
                return;
            }

            var lines = split_linebreaks(current_token.text);
            var j; // iterator for this case
            var javadoc = false;
            var starless = false;
            var lastIndent = current_token.whitespace_before;
            var lastIndentLength = lastIndent.length;

            // block comment starts with a new line
            print_newline(false, true);
            if (lines.length > 1) {
                if (all_lines_start_with(lines.slice(1), '*')) {
                    javadoc = true;
                }
                else if (each_line_matches_indent(lines.slice(1), lastIndent)) {
                    starless = true;
                }
            }

            // first line always indented
            print_token(lines[0]);
            for (j = 1; j < lines.length; j++) {
                print_newline(false, true);
                if (javadoc) {
                    // javadoc: reformat and re-indent
                    print_token(' ' + ltrim(lines[j]));
                } else if (starless && lines[j].length > lastIndentLength) {
                    // starless: re-indent non-empty content, avoiding trim
                    print_token(lines[j].substring(lastIndentLength));
                } else {
                    // normal comments output raw
                    output.add_token(lines[j]);
                }
            }

            // for comments of more than one line, make sure there's a new line after
            print_newline(false, true);
        }

        function handle_comment() {
            if (current_token.wanted_newline) {
                print_newline(false, true);
            } else {
                output.trim(true);
            }

            output.space_before_token = true;
            print_token();
            print_newline(false, true);
        }

        function handle_dot() {
            if (start_of_statement()) {
                // The conditional starts the statement if appropriate.
            }

            if (last_type === 'TK_RESERVED' && is_special_word(flags.last_text)) {
                output.space_before_token = true;
            } else {
                // allow preserved newlines before dots in general
                // force newlines on dots after close paren when break_chained - for bar().baz()
                allow_wrap_or_preserved_newline(flags.last_text === ')' && opt.break_chained_methods);
            }

            print_token();
        }

        function handle_unknown() {
            print_token();

            if (current_token.text[current_token.text.length - 1] === '\n') {
                print_newline();
            }
        }

        function handle_eof() {
            // Unwind any open statements
            while (flags.mode === MODE.Statement) {
                restore_mode();
            }
        }
    }


    function OutputLine(parent) {
        var _character_count = 0;
        // use indent_count as a marker for lines that have preserved indentation
        var _indent_count = -1;

        var _items = [];
        var _empty = true;

        this.set_indent = function(level) {
            _character_count = parent.baseIndentLength + level * parent.indent_length
            _indent_count = level;
        }

        this.get_character_count = function() {
            return _character_count;
        }

        this.is_empty = function() {
            return _empty;
        }

        this.last = function() {
            if (!this._empty) {
              return _items[_items.length - 1];
            } else {
              return null;
            }
        }

        this.push = function(input) {
            _items.push(input);
            _character_count += input.length;
            _empty = false;
        }

        this.pop = function() {
            var item = null;
            if (!_empty) {
                item = _items.pop();
                _character_count -= item.length;
                _empty = _items.length === 0;
            }
            return item;
        }

        this.remove_indent = function() {
            if (_indent_count > 0) {
                _indent_count -= 1;
                _character_count -= parent.indent_length
            }
        }

        this.trim = function() {
            while (this.last() === ' ') {
                var item = _items.pop();
                _character_count -= 1;
            }
            _empty = _items.length === 0;
        }

        this.toString = function() {
            var result = '';
            if (!this._empty) {
                if (_indent_count >= 0) {
                    result = parent.indent_cache[_indent_count];
                }
                result += _items.join('')
            }
            return result;
        }
    }

    function Output(indent_string, baseIndentString) {
        baseIndentString = baseIndentString || '';
        this.indent_cache = [ baseIndentString ];
        this.baseIndentLength = baseIndentString.length;
        this.indent_length = indent_string.length;
        this.raw = false;

        var lines =[];
        this.baseIndentString = baseIndentString;
        this.indent_string = indent_string;
        this.previous_line = null;
        this.current_line = null;
        this.space_before_token = false;

        this.add_outputline = function() {
            this.previous_line = this.current_line;
            this.current_line = new OutputLine(this);
            lines.push(this.current_line);
        }

        // initialize
        this.add_outputline();


        this.get_line_number = function() {
            return lines.length;
        }

        // Using object instead of string to allow for later expansion of info about each line
        this.add_new_line = function(force_newline) {
            if (this.get_line_number() === 1 && this.just_added_newline()) {
                return false; // no newline on start of file
            }

            if (force_newline || !this.just_added_newline()) {
                if (!this.raw) {
                    this.add_outputline();
                }
                return true;
            }

            return false;
        }

        this.get_code = function() {
            var sweet_code = lines.join('\n').replace(/[\r\n\t ]+$/, '');
            return sweet_code;
        }

        this.set_indent = function(level) {
            // Never indent your first output indent at the start of the file
            if (lines.length > 1) {
                while(level >= this.indent_cache.length) {
                    this.indent_cache.push(this.indent_cache[this.indent_cache.length - 1] + this.indent_string);
                }

                this.current_line.set_indent(level);
                return true;
            }
            this.current_line.set_indent(0);
            return false;
        }

        this.add_raw_token = function(token) {
            for (var x = 0; x < token.newlines; x++) {
                this.add_outputline();
            }
            this.current_line.push(token.whitespace_before);
            this.current_line.push(token.text);
            this.space_before_token = false;
        }

        this.add_token = function(printable_token) {
            this.add_space_before_token();
            this.current_line.push(printable_token);
        }

        this.add_space_before_token = function() {
            if (this.space_before_token && !this.just_added_newline()) {
                this.current_line.push(' ');
            }
            this.space_before_token = false;
        }

        this.remove_redundant_indentation = function (frame) {
            // This implementation is effective but has some issues:
            //     - can cause line wrap to happen too soon due to indent removal
            //           after wrap points are calculated
            // These issues are minor compared to ugly indentation.

            if (frame.multiline_frame ||
                frame.mode === MODE.ForInitializer ||
                frame.mode === MODE.Conditional) {
                return;
            }

            // remove one indent from each line inside this section
            var index = frame.start_line_index;
            var line;

            var output_length = lines.length;
            while (index < output_length) {
                lines[index].remove_indent();
                index++;
            }
        }

        this.trim = function(eat_newlines) {
            eat_newlines = (eat_newlines === undefined) ? false : eat_newlines;

            this.current_line.trim(indent_string, baseIndentString);

            while (eat_newlines && lines.length > 1 &&
                this.current_line.is_empty()) {
                lines.pop();
                this.current_line = lines[lines.length - 1]
                this.current_line.trim();
            }

            this.previous_line = lines.length > 1 ? lines[lines.length - 2] : null;
        }

        this.just_added_newline = function() {
            return this.current_line.is_empty();
        }

        this.just_added_blankline = function() {
            if (this.just_added_newline()) {
                if (lines.length === 1) {
                    return true; // start of the file and newline = blank
                }

                var line = lines[lines.length - 2];
                return line.is_empty();
            }
            return false;
        }
    }


    var Token = function(type, text, newlines, whitespace_before, mode, parent) {
        this.type = type;
        this.text = text;
        this.comments_before = [];
        this.newlines = newlines || 0;
        this.wanted_newline = newlines > 0;
        this.whitespace_before = whitespace_before || '';
        this.parent = null;
        this.opened = null;
        this.directives = null;
    }

    function tokenizer(input, opts, indent_string) {

        var whitespace = "\n\r\t ".split('');
        var digit = /[0-9]/;
        var digit_bin = /[01]/;
        var digit_oct = /[01234567]/;
        var digit_hex = /[0123456789abcdefABCDEF]/;

        var punct = ('+ - * / % & ++ -- = += -= *= /= %= == === != !== > < >= <= >> << >>> >>>= >>= <<= && &= | || ! ~ , : ? ^ ^= |= :: => **').split(' ');
        // words which should always start on new line.
        this.line_starters = 'continue,try,throw,return,var,let,const,if,switch,case,default,for,while,break,function,import,export'.split(',');
        var reserved_words = this.line_starters.concat(['do', 'in', 'else', 'get', 'set', 'new', 'catch', 'finally', 'typeof', 'yield', 'async', 'await', 'from', 'as']);

        //  /* ... */ comment ends with nearest */ or end of file
        var block_comment_pattern = /([\s\S]*?)((?:\*\/)|$)/g;

        // comment ends just before nearest linefeed or end of file
        var comment_pattern = /([^\n\r\u2028\u2029]*)/g;

        var directives_block_pattern = /\/\* beautify( \w+[:]\w+)+ \*\//g;
        var directive_pattern = / (\w+)[:](\w+)/g;
        var directives_end_ignore_pattern = /([\s\S]*?)((?:\/\*\sbeautify\signore:end\s\*\/)|$)/g;

        var template_pattern = /((<\?php|<\?=)[\s\S]*?\?>)|(<%[\s\S]*?%>)/g

        var n_newlines, whitespace_before_token, in_html_comment, tokens, parser_pos;
        var input_length;

        this.tokenize = function() {
            // cache the source's length.
            input_length = input.length
            parser_pos = 0;
            in_html_comment = false
            tokens = [];

            var next, last;
            var token_values;
            var open = null;
            var open_stack = [];
            var comments = [];

            while (!(last && last.type === 'TK_EOF')) {
                token_values = tokenize_next();
                next = new Token(token_values[1], token_values[0], n_newlines, whitespace_before_token);
                while(next.type === 'TK_COMMENT' || next.type === 'TK_BLOCK_COMMENT' || next.type === 'TK_UNKNOWN') {
                    if (next.type === 'TK_BLOCK_COMMENT') {
                        next.directives = token_values[2];
                    }
                    comments.push(next);
                    token_values = tokenize_next();
                    next = new Token(token_values[1], token_values[0], n_newlines, whitespace_before_token);
                }

                if (comments.length) {
                    next.comments_before = comments;
                    comments = [];
                }

                if (next.type === 'TK_START_BLOCK' || next.type === 'TK_START_EXPR') {
                    next.parent = last;
                    open_stack.push(open);
                    open = next;
                }  else if ((next.type === 'TK_END_BLOCK' || next.type === 'TK_END_EXPR') &&
                    (open && (
                        (next.text === ']' && open.text === '[') ||
                        (next.text === ')' && open.text === '(') ||
                        (next.text === '}' && open.text === '{')))) {
                    next.parent = open.parent;
                    next.opened = open

                    open = open_stack.pop();
                }

                tokens.push(next);
                last = next;
            }

            return tokens;
        }

        function get_directives (text) {
            if (!text.match(directives_block_pattern)) {
                return null;
            }

            var directives = {};
            directive_pattern.lastIndex = 0;
            var directive_match = directive_pattern.exec(text);

            while (directive_match) {
                directives[directive_match[1]] = directive_match[2];
                directive_match = directive_pattern.exec(text);
            }

            return directives;
        }

        function tokenize_next() {
            var i, resulting_string;
            var whitespace_on_this_line = [];

            n_newlines = 0;
            whitespace_before_token = '';

            if (parser_pos >= input_length) {
                return ['', 'TK_EOF'];
            }

            var last_token;
            if (tokens.length) {
                last_token = tokens[tokens.length-1];
            } else {
                // For the sake of tokenizing we can pretend that there was on open brace to start
                last_token = new Token('TK_START_BLOCK', '{');
            }


            var c = input.charAt(parser_pos);
            parser_pos += 1;

            while (in_array(c, whitespace)) {

                if (acorn.newline.test(c)) {
                    if (!(c === '\n' && input.charAt(parser_pos-2) === '\r')) {
                        n_newlines += 1;
                        whitespace_on_this_line = [];
                    }
                } else {
                    whitespace_on_this_line.push(c);
                }

                if (parser_pos >= input_length) {
                    return ['', 'TK_EOF'];
                }

                c = input.charAt(parser_pos);
                parser_pos += 1;
            }

            if(whitespace_on_this_line.length) {
                whitespace_before_token = whitespace_on_this_line.join('');
            }

            if (digit.test(c) || (c === '.' && digit.test(input.charAt(parser_pos)))) {
                var allow_decimal = true;
                var allow_e = true;
                var local_digit = digit;

                if (c === '0' && parser_pos < input_length && /[XxOoBb]/.test(input.charAt(parser_pos))) {
                    // switch to hex/oct/bin number, no decimal or e, just hex/oct/bin digits
                    allow_decimal = false;
                    allow_e = false;
                    if ( /[Bb]/.test(input.charAt(parser_pos)) ) {
                        local_digit = digit_bin;
                    } else if ( /[Oo]/.test(input.charAt(parser_pos)) ) {
                        local_digit = digit_oct;
                    } else {
                        local_digit = digit_hex;
                    }
                    c += input.charAt(parser_pos);
                    parser_pos += 1;
                } else if (c === '.') {
                    // Already have a decimal for this literal, don't allow another
                    allow_decimal = false;
                } else {
                    // we know this first loop will run.  It keeps the logic simpler.
                    c = '';
                    parser_pos -= 1;
                }

                // Add the digits
                while (parser_pos < input_length && local_digit.test(input.charAt(parser_pos))) {
                    c += input.charAt(parser_pos);
                    parser_pos += 1;

                    if (allow_decimal && parser_pos < input_length && input.charAt(parser_pos) === '.') {
                        c += input.charAt(parser_pos);
                        parser_pos += 1;
                        allow_decimal = false;
                    } else if (allow_e && parser_pos < input_length && /[Ee]/.test(input.charAt(parser_pos))) {
                        c += input.charAt(parser_pos);
                        parser_pos += 1;

                        if (parser_pos < input_length && /[+-]/.test(input.charAt(parser_pos))) {
                            c += input.charAt(parser_pos);
                            parser_pos += 1;
                        }

                        allow_e = false;
                        allow_decimal = false;
                    }
                }

                return [c, 'TK_WORD'];
            }

            if (acorn.isIdentifierStart(input.charCodeAt(parser_pos-1))) {
                if (parser_pos < input_length) {
                    while (acorn.isIdentifierChar(input.charCodeAt(parser_pos))) {
                        c += input.charAt(parser_pos);
                        parser_pos += 1;
                        if (parser_pos === input_length) {
                            break;
                        }
                    }
                }

                if (!(last_token.type === 'TK_DOT' ||
                        (last_token.type === 'TK_RESERVED' && in_array(last_token.text, ['set', 'get'])))
                    && in_array(c, reserved_words)) {
                    if (c === 'in') { // hack for 'in' operator
                        return [c, 'TK_OPERATOR'];
                    }
                    return [c, 'TK_RESERVED'];
                }

                return [c, 'TK_WORD'];
            }

            if (c === '(' || c === '[') {
                return [c, 'TK_START_EXPR'];
            }

            if (c === ')' || c === ']') {
                return [c, 'TK_END_EXPR'];
            }

            if (c === '{') {
                return [c, 'TK_START_BLOCK'];
            }

            if (c === '}') {
                return [c, 'TK_END_BLOCK'];
            }

            if (c === ';') {
                return [c, 'TK_SEMICOLON'];
            }

            if (c === '/') {
                var comment = '';
                // peek for comment /* ... */
                if (input.charAt(parser_pos) === '*') {
                    parser_pos += 1;
                    block_comment_pattern.lastIndex = parser_pos;
                    var comment_match = block_comment_pattern.exec(input);
                    comment = '/*' + comment_match[0];
                    parser_pos += comment_match[0].length;
                    var directives = get_directives(comment);
                    if (directives && directives['ignore'] === 'start') {
                        directives_end_ignore_pattern.lastIndex = parser_pos;
                        comment_match = directives_end_ignore_pattern.exec(input)
                        comment += comment_match[0];
                        parser_pos += comment_match[0].length;
                    }
                    comment = comment.replace(acorn.allLineBreaks, '\n');
                    return [comment, 'TK_BLOCK_COMMENT', directives];
                }
                // peek for comment // ...
                if (input.charAt(parser_pos) === '/') {
                    parser_pos += 1;
                    comment_pattern.lastIndex = parser_pos;
                    var comment_match = comment_pattern.exec(input);
                    comment = '//' + comment_match[0];
                    parser_pos += comment_match[0].length;
                    return [comment, 'TK_COMMENT'];
                }

            }

            var startXmlRegExp = /^<([-a-zA-Z:0-9_.]+|{.+?}|!\[CDATA\[[\s\S]*?\]\])(\s+{.+?}|\s+[-a-zA-Z:0-9_.]+|\s+[-a-zA-Z:0-9_.]+\s*=\s*('[^']*'|"[^"]*"|{.+?}))*\s*(\/?)\s*>/

            if (c === '`' || c === "'" || c === '"' || // string
                (
                    (c === '/') || // regexp
                    (opts.e4x && c === "<" && input.slice(parser_pos - 1).match(startXmlRegExp)) // xml
                ) && ( // regex and xml can only appear in specific locations during parsing
                    (last_token.type === 'TK_RESERVED' && in_array(last_token.text , ['return', 'case', 'throw', 'else', 'do', 'typeof', 'yield'])) ||
                    (last_token.type === 'TK_END_EXPR' && last_token.text === ')' &&
                        last_token.parent && last_token.parent.type === 'TK_RESERVED' && in_array(last_token.parent.text, ['if', 'while', 'for'])) ||
                    (in_array(last_token.type, ['TK_COMMENT', 'TK_START_EXPR', 'TK_START_BLOCK',
                        'TK_END_BLOCK', 'TK_OPERATOR', 'TK_EQUALS', 'TK_EOF', 'TK_SEMICOLON', 'TK_COMMA'
                    ]))
                )) {

                var sep = c,
                    esc = false,
                    has_char_escapes = false;

                resulting_string = c;

                if (sep === '/') {
                    //
                    // handle regexp
                    //
                    var in_char_class = false;
                    while (parser_pos < input_length &&
                            ((esc || in_char_class || input.charAt(parser_pos) !== sep) &&
                            !acorn.newline.test(input.charAt(parser_pos)))) {
                        resulting_string += input.charAt(parser_pos);
                        if (!esc) {
                            esc = input.charAt(parser_pos) === '\\';
                            if (input.charAt(parser_pos) === '[') {
                                in_char_class = true;
                            } else if (input.charAt(parser_pos) === ']') {
                                in_char_class = false;
                            }
                        } else {
                            esc = false;
                        }
                        parser_pos += 1;
                    }
                } else if (opts.e4x && sep === '<') {
                    //
                    // handle e4x xml literals
                    //

                    var xmlRegExp = /<(\/?)([-a-zA-Z:0-9_.]+|{.+?}|!\[CDATA\[[\s\S]*?\]\])(\s+{.+?}|\s+[-a-zA-Z:0-9_.]+|\s+[-a-zA-Z:0-9_.]+\s*=\s*('[^']*'|"[^"]*"|{.+?}))*\s*(\/?)\s*>/g;
                    var xmlStr = input.slice(parser_pos - 1);
                    var match = xmlRegExp.exec(xmlStr);
                    if (match && match.index === 0) {
                        var rootTag = match[2];
                        var depth = 0;
                        while (match) {
                            var isEndTag = !! match[1];
                            var tagName = match[2];
                            var isSingletonTag = ( !! match[match.length - 1]) || (tagName.slice(0, 8) === "![CDATA[");
                            if (tagName === rootTag && !isSingletonTag) {
                                if (isEndTag) {
                                    --depth;
                                } else {
                                    ++depth;
                                }
                            }
                            if (depth <= 0) {
                                break;
                            }
                            match = xmlRegExp.exec(xmlStr);
                        }
                        var xmlLength = match ? match.index + match[0].length : xmlStr.length;
                        xmlStr = xmlStr.slice(0, xmlLength);
                        parser_pos += xmlLength - 1;
                        xmlStr = xmlStr.replace(acorn.allLineBreaks, '\n');
                        return [xmlStr, "TK_STRING"];
                    }
                } else {
                    //
                    // handle string
                    //
                    var parse_string = function(delimiter, allow_unescaped_newlines, start_sub) {
                        // Template strings can travers lines without escape characters.
                        // Other strings cannot
                        var current_char;
                        while (parser_pos < input_length) {
                            current_char = input.charAt(parser_pos);
                            if (!(esc || (current_char !== delimiter &&
                                (allow_unescaped_newlines || !acorn.newline.test(current_char))))) {
                                break;
                            }

                            // Handle \r\n linebreaks after escapes or in template strings
                            if ((esc || allow_unescaped_newlines) && acorn.newline.test(current_char)) {
                                if (current_char === '\r' && input.charAt(parser_pos + 1) === '\n') {
                                    parser_pos += 1;
                                    current_char = input.charAt(parser_pos);
                                }
                                resulting_string += '\n';
                            } else {
                                resulting_string += current_char;
                            }
                            if (esc) {
                                if (current_char === 'x' || current_char === 'u') {
                                    has_char_escapes = true;
                                }
                                esc = false;
                            } else {
                                esc = current_char === '\\';
                            }

                            parser_pos += 1;

                            if (start_sub && resulting_string.indexOf(start_sub, resulting_string.length - start_sub.length) !== -1) {
                                if (delimiter === '`') {
                                    parse_string('}', allow_unescaped_newlines, '`')
                                }  else {
                                    parse_string('`', allow_unescaped_newlines, '${')
                                }
                            }
                        }
                    }
                    if (sep === '`') {
                        parse_string('`', true, '${')
                    }  else {
                        parse_string(sep)
                    }
                }

                if (has_char_escapes && opts.unescape_strings) {
                    resulting_string = unescape_string(resulting_string);
                }

                if (parser_pos < input_length && input.charAt(parser_pos) === sep) {
                    resulting_string += sep;
                    parser_pos += 1;

                    if (sep === '/') {
                        // regexps may have modifiers /regexp/MOD , so fetch those, too
                        // Only [gim] are valid, but if the user puts in garbage, do what we can to take it.
                        while (parser_pos < input_length && acorn.isIdentifierStart(input.charCodeAt(parser_pos))) {
                            resulting_string += input.charAt(parser_pos);
                            parser_pos += 1;
                        }
                    }
                }
                return [resulting_string, 'TK_STRING'];
            }

            if (c === '#') {

                if (tokens.length === 0 && input.charAt(parser_pos) === '!') {
                    // shebang
                    resulting_string = c;
                    while (parser_pos < input_length && c !== '\n') {
                        c = input.charAt(parser_pos);
                        resulting_string += c;
                        parser_pos += 1;
                    }
                    return [trim(resulting_string) + '\n', 'TK_UNKNOWN'];
                }



                // Spidermonkey-specific sharp variables for circular references
                // https://developer.mozilla.org/En/Sharp_variables_in_JavaScript
                // http://mxr.mozilla.org/mozilla-central/source/js/src/jsscan.cpp around line 1935
                var sharp = '#';
                if (parser_pos < input_length && digit.test(input.charAt(parser_pos))) {
                    do {
                        c = input.charAt(parser_pos);
                        sharp += c;
                        parser_pos += 1;
                    } while (parser_pos < input_length && c !== '#' && c !== '=');
                    if (c === '#') {
                        //
                    } else if (input.charAt(parser_pos) === '[' && input.charAt(parser_pos + 1) === ']') {
                        sharp += '[]';
                        parser_pos += 2;
                    } else if (input.charAt(parser_pos) === '{' && input.charAt(parser_pos + 1) === '}') {
                        sharp += '{}';
                        parser_pos += 2;
                    }
                    return [sharp, 'TK_WORD'];
                }
            }

            if (c === '<' && (input.charAt(parser_pos) === '?' || input.charAt(parser_pos) === '%')) {
                template_pattern.lastIndex = parser_pos - 1;
                var template_match = template_pattern.exec(input);
                if(template_match) {
                    c = template_match[0];
                    parser_pos += c.length - 1;
                    c = c.replace(acorn.allLineBreaks, '\n');
                    return [c, 'TK_STRING'];
                }
            }

            if (c === '<' && input.substring(parser_pos - 1, parser_pos + 3) === '<!--') {
                parser_pos += 3;
                c = '<!--';
                while (!acorn.newline.test(input.charAt(parser_pos)) && parser_pos < input_length) {
                    c += input.charAt(parser_pos);
                    parser_pos++;
                }
                in_html_comment = true;
                return [c, 'TK_COMMENT'];
            }

            if (c === '-' && in_html_comment && input.substring(parser_pos - 1, parser_pos + 2) === '-->') {
                in_html_comment = false;
                parser_pos += 2;
                return ['-->', 'TK_COMMENT'];
            }

            if (c === '.') {
                return [c, 'TK_DOT'];
            }

            if (in_array(c, punct)) {
                while (parser_pos < input_length && in_array(c + input.charAt(parser_pos), punct)) {
                    c += input.charAt(parser_pos);
                    parser_pos += 1;
                    if (parser_pos >= input_length) {
                        break;
                    }
                }

                if (c === ',') {
                    return [c, 'TK_COMMA'];
                } else if (c === '=') {
                    return [c, 'TK_EQUALS'];
                } else {
                    return [c, 'TK_OPERATOR'];
                }
            }

            return [c, 'TK_UNKNOWN'];
        }


        function unescape_string(s) {
            var esc = false,
                out = '',
                pos = 0,
                s_hex = '',
                escaped = 0,
                c;

            while (esc || pos < s.length) {

                c = s.charAt(pos);
                pos++;

                if (esc) {
                    esc = false;
                    if (c === 'x') {
                        // simple hex-escape \x24
                        s_hex = s.substr(pos, 2);
                        pos += 2;
                    } else if (c === 'u') {
                        // unicode-escape, \u2134
                        s_hex = s.substr(pos, 4);
                        pos += 4;
                    } else {
                        // some common escape, e.g \n
                        out += '\\' + c;
                        continue;
                    }
                    if (!s_hex.match(/^[0123456789abcdefABCDEF]+$/)) {
                        // some weird escaping, bail out,
                        // leaving whole string intact
                        return s;
                    }

                    escaped = parseInt(s_hex, 16);

                    if (escaped >= 0x00 && escaped < 0x20) {
                        // leave 0x00...0x1f escaped
                        if (c === 'x') {
                            out += '\\x' + s_hex;
                        } else {
                            out += '\\u' + s_hex;
                        }
                        continue;
                    } else if (escaped === 0x22 || escaped === 0x27 || escaped === 0x5c) {
                        // single-quote, apostrophe, backslash - escape these
                        out += '\\' + String.fromCharCode(escaped);
                    } else if (c === 'x' && escaped > 0x7e && escaped <= 0xff) {
                        // we bail out on \x7f..\xff,
                        // leaving whole string escaped,
                        // as it's probably completely binary
                        return s;
                    } else {
                        out += String.fromCharCode(escaped);
                    }
                } else if (c === '\\') {
                    esc = true;
                } else {
                    out += c;
                }
            }
            return out;
        }

    }

    define('plugin/beautify', [], function() {
        return { js_beautify: js_beautify };
    });
/*

    if (typeof define === "function" && define.amd) {console.log(1);
        // Add support for AMD ( https://github.com/amdjs/amdjs-api/wiki/AMD#defineamd-property- )
        define('plugin/beautify', [], function() {
            return { js_beautify: js_beautify };
        });
    } else if (typeof exports !== "undefined") {
        // Add support for CommonJS. Just put this file somewhere on your require.paths
        // and you will be able to `var js_beautify = require("beautify").js_beautify`.
        exports.js_beautify = js_beautify;
    } else if (typeof window !== "undefined") {
        // If we're running a web page and don't have either of the above, add our one global
        window.js_beautify = js_beautify;
    } else if (typeof global !== "undefined") {
        // If we don't even have window, try global.
        global.js_beautify = js_beautify;
    }
*/

}());

define('plugin/component-picker', [], function (require) {
    "use strict";

    var BaseSelector = require('plugin/base-selector');
    //组件数据
    var componentData = [
        {
            "group": "常用",
            "items": [
                {
                    'enabled': true,
                    'name': '领优惠券',
                    'route': '<img data-component="coupon-obtain" data-coupon-ids=":coupon_ids" data-obtained-src=":obtained_image" src=":image" data-stats-category="点击领优惠券" data-stats-action="券:coupon_ids">',
                    'params': {
                        'coupon_ids': '优惠券id',
                        'image': {
                            name: '领取前图片',
                            type: 'image'
                        },
                        'obtained_image': {
                            name: '领取后图片',
                            type: 'image'
                        }
                    }
                },
                {
                    'enabled': true,
                    'name': '插入视频',
                    'route': '<div data-component="video" data-poster=":poster" data-src=":src"></div>',
                    'params': {
                        'poster': {
                            name: '封面链接',
                            type: 'image'
                        },
                        'src': '视频链接'
                    }
                },
                {
                    'enabled': true,
                    'name': '插入视频-图片',
                    'route': '<div data-component="image-video" data-video-src=":src" data-image-src=":poster"></div>',
                    'params': {
                        'poster': {
                            name: '图片链接',
                            type: 'image'
                        },
                        'src': '视频链接'
                    }
                },
                {
                    'enabled': true,
                    'name': '插入视频-帖子',
                    'route': '<video width="100%" controls="controls" preload="preload" poster=":poster"><source src=":src">您的版本不支持视频</video>',
                    'params': {
                        'poster': {
                            name: '封面链接',
                            type: 'image'
                        },
                        'src': '视频链接'
                    }
                },
                {
                    'enabled': true,
                    'name': '大转盘',
                    'route': '<div data-component="turntable" data-bg-image=":bg_image" data-pointer-image=":pointer_image"></div><p>剩余抽奖次数<span data-module="turntableTime"></span></p>',
                    'params': {
                        'bg_image': {
                            name: '转盘背景图',
                            type: 'image'
                        },
                        'pointer_image': {
                            name: '转盘指针图',
                            type: 'image'
                        }
                    }
                },
                {
                    'enabled': true,
                    'name': '申请试用单元',
                    'route': '<div data-component="apply-test" data-image=":image" data-title=":title" data-desc1=":desc1" data-desc2=":desc2" data-start-time=":start_time" data-end-time=":end_time" data-app-route="手动填写哦"></div>',
                    'params': {
                        'image': {
                            name: '封面图',
                            type: 'image'
                        },
                        'title': '标题',
                        'desc1': '描述1',
                        'desc2': '描述2',
                        'start_time': {
                            name: '开始时间',
                            type: 'datetime'
                        },
                        'end_time': {
                            name: '结束时间',
                            type: 'datetime'
                        }
                    }
                },
                {
                    'enabled': true,
                    'name': '关注某人',
                    'route': '<div data-component="follow-user" data-uid=":uid"></div>',
                    'params': {
                        'uid': '用户ID'
                    }
                },
                {
                    'enabled': true,
                    'name': '导航栏',
                    'route': '<div data-component="navigator-tabs" data-image=":image" data-active-image=":active_image" data-url=":url"></div>',
                    'params': {
                        'image': '导航tap',
                        'active_image': '导航tap(选中状态)',
                        'url': '页面链接'
                    }
                },
                {
                    'enabled': true,
                    'name': '定时组件',
                    'route': '<div data-component="timing" data-start-image=":start_image" data-not-start-image=":not_start_image" data-out-image=":out_image" data-time=":start_time" data-end-time=":end_time" data-id=":id"></div>',
                    'params': {
                        'start_image': {
                            'name': '开售图片',
                            'type': 'image'
                        },
                        'not_start_image': {
                            'name': '未开售图片',
                            'type': 'image',
                            can_null: true
                        },
                        'out_image': {
                            'name': '售完图片',
                            'type': 'image'
                        },
                        'start_time': {
                            name: '开售时间',
                            type: 'datetime'
                        },
                        'end_time': {
                            name: '下架时间',
                            type: 'datetime'
                        },
                        'id': '商品ID'

                    }
                },
                {
                    'enabled': true,
                    'name': '直播信息',
                    'route': '<div data-component="live-detail" data-live-id=":id"></div>',
                    'params': {
                        'id': '直播ID',
                    }
                },
                {
                    'enabled': true,
                    'name': '倒计时',
                    'route': '<div data-component="count-down" data-start-time=":start_time" data-end-time=":end_time" data-bg-img=":image"></div>',
                    'params': {
                        'image': {
                            name: '背景图',
                            type: 'image'
                        },
                        'start_time': {
                            name: '开始时间',
                            type: 'datetime'
                        },
                        'end_time': {
                            name: '结束时间',
                            type: 'datetime'
                        }
                    }
                },
                {
                    'enabled': true,
                    'name': '快速添加商品(一行一个)',
                    'route': '<div data-component="add-good" data-id=":id" data-bg-color=":bg_color" data-text=":text"></div>',
                    'params': {
                        'id': '商品id',
                        'bg_color': '背景色号#',
                        'text': '按键文案'
                    }
                },
                {
                    'enabled': true,
                    'name': '快速添加商品(一行两个)',
                    'route': '<div data-component="add-goods" data-id=":id" data-bg-color=":bg_color" data-text=":text"></div>',
                    'params': {
                        'id': '商品id',
                        'bg_color': '背景色号#',
                        'text': '按键文案'
                    }
                },
                {
                    'enabled': true,
                    'name': '锚点框架',
                    'route': '<div data-component="tab-location"><div class=tab><div class=container><div id=title-img></div><div class=nav-container data-height=":height"><div class=nav><!--导航区域--></div></div><div class=tab-container><!--内容区域--></div></div></div></div>',
                    'params': {
                        'height': '导航栏高度'
                    }
                },
                {
                    'enabled': true,
                    'name': '锚点框架1',
                    'route': '<div data-component="tab-location-1" class="tab-location-container"></div>',
                    'params': {}
                },
                {
                    'enabled': true,
                    'name': '锚点导航栏框架',
                    'route': '<div class="nav"></div>',
                    'params': {}
                },
                {
                    'enabled': true,
                    'name': '锚点导航栏',
                    'route': '<div data-component="add-nav" data-img=":image" data-img-active=":active-image" data-class=":class" data-height=":height"></div>',
                    'params': {
                        'class': '跳转锚点(Eng)',
                        'image': {
                            name: '导航图',
                            type: 'image'
                        },
                        'active-image': {
                            name: '激活导航图',
                            type: 'image'
                        },
                        'height': '高度'
                    }
                },
                {
                    'enabled': true,
                    'name': '锚点',
                    'route': '<div data-component="add-content" id=":id"></div>',
                    'params': {
                        'id': '锚点名'
                    }
                },
                {
                    'enabled': true,
                    'name': '轮播',
                    'route': '<div data-component="carousel"><div class="carousel"><div class="img clearfloat"><!--在此处插入图片--></div></div></div>',
                    'params': {}
                },
                {
                    'enabled': true,
                    'name': '分享按钮',
                    'route': '<div data-component="share-btn" data-image=":image" data-img=":shareImg" data-title=":title" data-content=":content" data-link=":link"></div>',
                    'params': {
                        'image': {
                            name: '按钮图',
                            type: 'image'
                        },
                        'shareImg': {
                            name: '分享图',
                            type: 'image'
                        },
                        'title': '分享标题',
                        'content': '分享副文本',
                        'link': '跳转链接'
                    }
                },
                {
                    'enabled': true,
                    'name': '插入投票',
                    'route': '<div data-component="vote" data-id=":id"></div>',
                    'params': {
                        'id': '投票ID'
                    }
                },
                {
                    'enabled': true,
                    'name': '领取金币',
                    'route': '<div data-component="draw-reward" data-not-active-image=":notActiveImage" data-active-image=":activeImage" data-reward-number=":rewardNumber"></div>',
                    'params': {
                        'notActiveImage': {
                            name: '领取前图片',
                            type: 'image'
                        },
                        'activeImage': {
                            name: '领取后图片',
                            type: 'image'
                        },
                        'rewardNumber': '领取金额'
                    }
                }
            ]
        },
        {
            "group": "导航",
            "items": [
                {
                    'enabled': true,
                    'name': '导航栏基础',
                    'route': '<div data-component="navigator-tabs-base" data-width=":width" data-height=":height">\n<!-- 请添加导航栏组件 -->\n\n</div>',
                    'params': {
                        'width': '宽度',
                        'height': '高度'
                    }
                },
                {
                    'enabled': true,
                    'name': '导航栏',
                    'route': '<div data-component="navigator-tabs" data-image=":image" data-active-image=":active_image" data-url=":url"></div>',
                    'params': {
                        'image': {
                            name: 'tab图片',
                            type: 'image'
                        },
                        'active_image': {
                            name: 'tab(选中状态)',
                            type: 'image'
                        },
                        'url': '链接'
                    }
                },
                {
                    'enabled': true,
                    'name': '侧边导航栏基础',
                    'route': '<div data-component="navigator-side-base" data-width=":width" data-action-tab-image=":image">\n<!-- 请添加侧边导航栏组件 -->\n\n</div>',
                    'params': {
                        'width': '宽度',
                        'image': {
                            name: '导航触发tab',
                            type: 'image'
                        }
                    }
                },
                {
                    'enabled': true,
                    'name': '侧边导航栏',
                    'route': '<div data-component="navigator-side" data-image=":image" data-url=":url"></div>',
                    'params': {
                        'image': {
                            name: '导航图片',
                            type: 'image'
                        },
                        'url': '链接'
                    }
                }
            ]
        }
    ];
    $.fn.componentPicker = function (options) {
        $(this).on("click", function () {
            var defaultOptions = {
                selectorData: componentData,
                //默认回调，插入到目标textarea光标位置
                callback: function (opts) {
                    if (options.el != undefined) {
                        var el = options.el;
                        var pos = parseInt(el[0].selectionStart);
                        var val = el.val();

                        if (el.attr('length') != undefined) {
                            var maxLength = parseInt(el.attr('length'));
                            if (val.length + opts.route.length > maxLength)
                                return false;
                        }

                        var begin = val.substr(0, pos);
                        var end = val.substr(pos);
                        el.val(begin + opts.route + end);
                        el.attr({"position": pos + opts.route.length});
                        $.Recount_Word(el.get(0));
                    }

                    if (typeof (options.callback) == 'function') {
                        options.callback({'html': opts.route});
                    }
                },
                notEncode: true
            }

            var selector = new BaseSelector(defaultOptions);

            selector.init();

            $('#select_approute .s_title p').html('选择组件');
        });
        return this;
    };
});
/*
* jQuery timepicker addon
* By: Trent Richardson [http://trentrichardson.com]
* Version 0.9.9
* Last Modified: 02/05/2012
* 
* Copyright 2012 Trent Richardson
* Dual licensed under the MIT and GPL licenses.
* http://trentrichardson.com/Impromptu/GPL-LICENSE.txt
* http://trentrichardson.com/Impromptu/MIT-LICENSE.txt
* 
* HERES THE CSS:
* .ui-timepicker-div .ui-widget-header { margin-bottom: 8px; }
* .ui-timepicker-div dl { text-align: left; }
* .ui-timepicker-div dl dt { height: 25px; margin-bottom: -25px; }
* .ui-timepicker-div dl dd { margin: 0 10px 10px 65px; }
* .ui-timepicker-div td { font-size: 90%; }
* .ui-tpicker-grid-label { background: none; border: none; margin: 0; padding: 0; }
*/
define('plugins/datetime-picker', [], function(require){
	"use strict";
	/*
	 * jQuery timepicker addon
	 * By: Trent Richardson [http://trentrichardson.com]
	 * Version 0.9.9
	 * Last Modified: 02/05/2012
	 *
	 * Copyright 2012 Trent Richardson
	 * Dual licensed under the MIT and GPL licenses.
	 * http://trentrichardson.com/Impromptu/GPL-LICENSE.txt
	 * http://trentrichardson.com/Impromptu/MIT-LICENSE.txt
	 *
	 * HERES THE CSS:
	 * .ui-timepicker-div .ui-widget-header { margin-bottom: 8px; }
	 * .ui-timepicker-div dl { text-align: left; }
	 * .ui-timepicker-div dl dt { height: 25px; margin-bottom: -25px; }
	 * .ui-timepicker-div dl dd { margin: 0 10px 10px 65px; }
	 * .ui-timepicker-div td { font-size: 90%; }
	 * .ui-tpicker-grid-label { background: none; border: none; margin: 0; padding: 0; }
	 */

	(function($) {

		$.extend($.ui, { timepicker: { version: "0.9.9" } });

		/* Time picker manager.
		 Use the singleton instance of this class, $.timepicker, to interact with the time picker.
		 Settings for (groups of) time pickers are maintained in an instance object,
		 allowing multiple different settings on the same page. */

		function Timepicker() {
			this.regional = []; // Available regional settings, indexed by language code
			this.regional[''] = { // Default regional settings
				currentText: '当前时间',
				closeText: '确定',
				ampm: false,
				amNames: ['AM', 'A'],
				pmNames: ['PM', 'P'],
				timeFormat: 'hh:mm tt',
				timeSuffix: '',
				timeOnlyTitle: '选择时间',
				timeText: '时间',
				hourText: '时',
				minuteText: '分',
				secondText: '秒',
				millisecText: '毫秒',
				timezoneText: 'Time Zone'
			};
			this._defaults = { // Global defaults for all the datetime picker instances
				showButtonPanel: true,
				timeOnly: false,
				showHour: true,
				showMinute: true,
				showSecond: false,
				showMillisec: false,
				showTimezone: false,
				showTime: true,
				stepHour: 1,
				stepMinute: 1,
				stepSecond: 1,
				stepMillisec: 1,
				hour: 0,
				minute: 0,
				second: 0,
				millisec: 0,
				timezone: '+0000',
				hourMin: 0,
				minuteMin: 0,
				secondMin: 0,
				millisecMin: 0,
				hourMax: 23,
				minuteMax: 59,
				secondMax: 59,
				millisecMax: 999,
				minDateTime: null,
				maxDateTime: null,
				onSelect: null,
				hourGrid: 0,
				minuteGrid: 0,
				secondGrid: 0,
				millisecGrid: 0,
				alwaysSetTime: true,
				separator: ' ',
				altFieldTimeOnly: true,
				showTimepicker: true,
				timezoneIso8609: false,
				timezoneList: null,
				addSliderAccess: false,
				sliderAccessArgs: null
			};
			$.extend(this._defaults, this.regional['']);
		};

		$.extend(Timepicker.prototype, {
			$input: null,
			$altInput: null,
			$timeObj: null,
			inst: null,
			hour_slider: null,
			minute_slider: null,
			second_slider: null,
			millisec_slider: null,
			timezone_select: null,
			hour: 0,
			minute: 0,
			second: 0,
			millisec: 0,
			timezone: '+0000',
			hourMinOriginal: null,
			minuteMinOriginal: null,
			secondMinOriginal: null,
			millisecMinOriginal: null,
			hourMaxOriginal: null,
			minuteMaxOriginal: null,
			secondMaxOriginal: null,
			millisecMaxOriginal: null,
			ampm: '',
			formattedDate: '',
			formattedTime: '',
			formattedDateTime: '',
			timezoneList: null,

			/* Override the default settings for all instances of the time picker.
			 @param  settings  object - the new settings to use as defaults (anonymous object)
			 @return the manager object */
			setDefaults: function(settings) {
				extendRemove(this._defaults, settings || {});
				return this;
			},

			//########################################################################
			// Create a new Timepicker instance
			//########################################################################
			_newInst: function($input, o) {
				var tp_inst = new Timepicker(),
					inlineSettings = {};

				for (var attrName in this._defaults) {
					var attrValue = $input.attr('time:' + attrName);
					if (attrValue) {
						try {
							inlineSettings[attrName] = eval(attrValue);
						} catch (err) {
							inlineSettings[attrName] = attrValue;
						}
					}
				}
				tp_inst._defaults = $.extend({}, this._defaults, inlineSettings, o, {
					beforeShow: function(input, dp_inst) {
						if ($.isFunction(o.beforeShow))
							return o.beforeShow(input, dp_inst, tp_inst);
					},
					onChangeMonthYear: function(year, month, dp_inst) {
						// Update the time as well : this prevents the time from disappearing from the $input field.
						tp_inst._updateDateTime(dp_inst);
						if ($.isFunction(o.onChangeMonthYear))
							o.onChangeMonthYear.call($input[0], year, month, dp_inst, tp_inst);
					},
					onClose: function(dateText, dp_inst) {
						if (tp_inst.timeDefined === true && $input.val() != '')
							tp_inst._updateDateTime(dp_inst);
						if ($.isFunction(o.onClose))
							o.onClose.call($input[0], dateText, dp_inst, tp_inst);
					},
					timepicker: tp_inst // add timepicker as a property of datepicker: $.datepicker._get(dp_inst, 'timepicker');
				});
				tp_inst.amNames = $.map(tp_inst._defaults.amNames, function(val) { return val.toUpperCase() });
				tp_inst.pmNames = $.map(tp_inst._defaults.pmNames, function(val) { return val.toUpperCase() });

				if (tp_inst._defaults.timezoneList === null) {
					var timezoneList = [];
					for (var i = -11; i <= 12; i++)
						timezoneList.push((i >= 0 ? '+' : '-') + ('0' + Math.abs(i).toString()).slice(-2) + '00');
					if (tp_inst._defaults.timezoneIso8609)
						timezoneList = $.map(timezoneList, function(val) {
							return val == '+0000' ? 'Z' : (val.substring(0, 3) + ':' + val.substring(3));
						});
					tp_inst._defaults.timezoneList = timezoneList;
				}

				tp_inst.hour = tp_inst._defaults.hour;
				tp_inst.minute = tp_inst._defaults.minute;
				tp_inst.second = tp_inst._defaults.second;
				tp_inst.millisec = tp_inst._defaults.millisec;
				tp_inst.ampm = '';
				tp_inst.$input = $input;

				if (o.altField)
					tp_inst.$altInput = $(o.altField)
						.css({ cursor: 'pointer' })
						.focus(function(){ $input.trigger("focus"); });

				if(tp_inst._defaults.minDate==0 || tp_inst._defaults.minDateTime==0)
				{
					tp_inst._defaults.minDate=new Date();
				}
				if(tp_inst._defaults.maxDate==0 || tp_inst._defaults.maxDateTime==0)
				{
					tp_inst._defaults.maxDate=new Date();
				}

				// datepicker needs minDate/maxDate, timepicker needs minDateTime/maxDateTime..
				if(tp_inst._defaults.minDate !== undefined && tp_inst._defaults.minDate instanceof Date)
					tp_inst._defaults.minDateTime = new Date(tp_inst._defaults.minDate.getTime());
				if(tp_inst._defaults.minDateTime !== undefined && tp_inst._defaults.minDateTime instanceof Date)
					tp_inst._defaults.minDate = new Date(tp_inst._defaults.minDateTime.getTime());
				if(tp_inst._defaults.maxDate !== undefined && tp_inst._defaults.maxDate instanceof Date)
					tp_inst._defaults.maxDateTime = new Date(tp_inst._defaults.maxDate.getTime());
				if(tp_inst._defaults.maxDateTime !== undefined && tp_inst._defaults.maxDateTime instanceof Date)
					tp_inst._defaults.maxDate = new Date(tp_inst._defaults.maxDateTime.getTime());
				return tp_inst;
			},

			//########################################################################
			// add our sliders to the calendar
			//########################################################################
			_addTimePicker: function(dp_inst) {
				var currDT = (this.$altInput && this._defaults.altFieldTimeOnly) ?
				this.$input.val() + ' ' + this.$altInput.val() :
					this.$input.val();

				this.timeDefined = this._parseTime(currDT);
				this._limitMinMaxDateTime(dp_inst, false);
				this._injectTimePicker();
			},

			//########################################################################
			// parse the time string from input value or _setTime
			//########################################################################
			_parseTime: function(timeString, withDate) {
				var regstr = this._defaults.timeFormat.toString()
						.replace(/h{1,2}/ig, '(\\d?\\d)')
						.replace(/m{1,2}/ig, '(\\d?\\d)')
						.replace(/s{1,2}/ig, '(\\d?\\d)')
						.replace(/l{1}/ig, '(\\d?\\d?\\d)')
						.replace(/t{1,2}/ig, this._getPatternAmpm())
						.replace(/z{1}/ig, '(z|[-+]\\d\\d:?\\d\\d)?')
						.replace(/\s/g, '\\s?') + this._defaults.timeSuffix + '$',
					order = this._getFormatPositions(),
					ampm = '',
					treg;

				if (!this.inst) this.inst = $.datepicker._getInst(this.$input[0]);

				if (withDate || !this._defaults.timeOnly) {
					// the time should come after x number of characters and a space.
					// x = at least the length of text specified by the date format
					var dp_dateFormat = $.datepicker._get(this.inst, 'dateFormat');
					// escape special regex characters in the seperator
					var specials = new RegExp("[.*+?|()\\[\\]{}\\\\]", "g");
					regstr = '^.{' + dp_dateFormat.length + ',}?' + this._defaults.separator.replace(specials, "\\$&") + regstr;
				}

				treg = timeString.match(new RegExp(regstr, 'i'));

				if (treg) {
					if (order.t !== -1) {
						if (treg[order.t] === undefined || treg[order.t].length === 0) {
							ampm = '';
							this.ampm = '';
						} else {
							ampm = $.inArray(treg[order.t].toUpperCase(), this.amNames) !== -1 ? 'AM' : 'PM';
							this.ampm = this._defaults[ampm == 'AM' ? 'amNames' : 'pmNames'][0];
						}
					}

					if (order.h !== -1) {
						if (ampm == 'AM' && treg[order.h] == '12')
							this.hour = 0; // 12am = 0 hour
						else if (ampm == 'PM' && treg[order.h] != '12')
							this.hour = (parseFloat(treg[order.h]) + 12).toFixed(0); // 12pm = 12 hour, any other pm = hour + 12
						else this.hour = Number(treg[order.h]);
					}

					if (order.m !== -1) this.minute = Number(treg[order.m]);
					if (order.s !== -1) this.second = Number(treg[order.s]);
					if (order.l !== -1) this.millisec = Number(treg[order.l]);
					if (order.z !== -1 && treg[order.z] !== undefined) {
						var tz = treg[order.z].toUpperCase();
						switch (tz.length) {
							case 1:	// Z
								tz = this._defaults.timezoneIso8609 ? 'Z' : '+0000';
								break;
							case 5:	// +hhmm
								if (this._defaults.timezoneIso8609)
									tz = tz.substring(1) == '0000'
										? 'Z'
										: tz.substring(0, 3) + ':' + tz.substring(3);
								break;
							case 6:	// +hh:mm
								if (!this._defaults.timezoneIso8609)
									tz = tz == 'Z' || tz.substring(1) == '00:00'
										? '+0000'
										: tz.replace(/:/, '');
								else if (tz.substring(1) == '00:00')
									tz = 'Z';
								break;
						}
						this.timezone = tz;
					}

					return true;

				}
				return false;
			},

			//########################################################################
			// pattern for standard and localized AM/PM markers
			//########################################################################
			_getPatternAmpm: function() {
				var markers = [];
				var o = this._defaults;
				if (o.amNames)
					$.merge(markers, o.amNames);
				if (o.pmNames)
					$.merge(markers, o.pmNames);
				markers = $.map(markers, function(val) { return val.replace(/[.*+?|()\[\]{}\\]/g, '\\$&') });
				return '(' + markers.join('|') + ')?';
			},

			//########################################################################
			// figure out position of time elements.. cause js cant do named captures
			//########################################################################
			_getFormatPositions: function() {
				var finds = this._defaults.timeFormat.toLowerCase().match(/(h{1,2}|m{1,2}|s{1,2}|l{1}|t{1,2}|z)/g),
					orders = { h: -1, m: -1, s: -1, l: -1, t: -1, z: -1 };

				if (finds)
					for (var i = 0; i < finds.length; i++)
						if (orders[finds[i].toString().charAt(0)] == -1)
							orders[finds[i].toString().charAt(0)] = i + 1;

				return orders;
			},

			//########################################################################
			// generate and inject html for timepicker into ui datepicker
			//########################################################################
			_injectTimePicker: function() {
				var $dp = this.inst.dpDiv,
					o = this._defaults,
					tp_inst = this,
				// Added by Peter Medeiros:
				// - Figure out what the hour/minute/second max should be based on the step values.
				// - Example: if stepMinute is 15, then minMax is 45.
					hourMax = parseInt((o.hourMax - ((o.hourMax - o.hourMin) % o.stepHour)) ,10),
					minMax  = parseInt((o.minuteMax - ((o.minuteMax - o.minuteMin) % o.stepMinute)) ,10),
					secMax  = parseInt((o.secondMax - ((o.secondMax - o.secondMin) % o.stepSecond)) ,10),
					millisecMax  = parseInt((o.millisecMax - ((o.millisecMax - o.millisecMin) % o.stepMillisec)) ,10),
					dp_id = this.inst.id.toString().replace(/([^A-Za-z0-9_])/g, '');

				// Prevent displaying twice
				//if ($dp.find("div#ui-timepicker-div-"+ dp_id).length === 0) {
				if ($dp.find("div#ui-timepicker-div-"+ dp_id).length === 0 && o.showTimepicker) {
					var noDisplay = ' style="display:none;"',
						html =	'<div class="ui-timepicker-div" id="ui-timepicker-div-' + dp_id + '"><dl>' +
							'<dt class="ui_tpicker_time_label" id="ui_tpicker_time_label_' + dp_id + '"' +
							((o.showTime) ? '' : noDisplay) + '>' + o.timeText + '</dt>' +
							'<dd class="ui_tpicker_time" id="ui_tpicker_time_' + dp_id + '"' +
							((o.showTime) ? '' : noDisplay) + '></dd>' +
							'<dt class="ui_tpicker_hour_label" id="ui_tpicker_hour_label_' + dp_id + '"' +
							((o.showHour) ? '' : noDisplay) + '>' + o.hourText + '</dt>',
						hourGridSize = 0,
						minuteGridSize = 0,
						secondGridSize = 0,
						millisecGridSize = 0,
						size;

					// Hours
					html += '<dd class="ui_tpicker_hour"><div id="ui_tpicker_hour_' + dp_id + '"' +
						((o.showHour) ? '' : noDisplay) + '></div>';
					if (o.showHour && o.hourGrid > 0) {
						html += '<div style="padding-left: 1px"><table class="ui-tpicker-grid-label"><tr>';

						for (var h = o.hourMin; h <= hourMax; h += parseInt(o.hourGrid,10)) {
							hourGridSize++;
							var tmph = (o.ampm && h > 12) ? h-12 : h;
							if (tmph < 10) tmph = '0' + tmph;
							if (o.ampm) {
								if (h == 0) tmph = 12 +'a';
								else if (h < 12) tmph += 'a';
								else tmph += 'p';
							}
							html += '<td>' + tmph + '</td>';
						}

						html += '</tr></table></div>';
					}
					html += '</dd>';

					// Minutes
					html += '<dt class="ui_tpicker_minute_label" id="ui_tpicker_minute_label_' + dp_id + '"' +
						((o.showMinute) ? '' : noDisplay) + '>' + o.minuteText + '</dt>'+
						'<dd class="ui_tpicker_minute"><div id="ui_tpicker_minute_' + dp_id + '"' +
						((o.showMinute) ? '' : noDisplay) + '></div>';

					if (o.showMinute && o.minuteGrid > 0) {
						html += '<div style="padding-left: 1px"><table class="ui-tpicker-grid-label"><tr>';

						for (var m = o.minuteMin; m <= minMax; m += parseInt(o.minuteGrid,10)) {
							minuteGridSize++;
							html += '<td>' + ((m < 10) ? '0' : '') + m + '</td>';
						}

						html += '</tr></table></div>';
					}
					html += '</dd>';

					// Seconds
					html += '<dt class="ui_tpicker_second_label" id="ui_tpicker_second_label_' + dp_id + '"' +
						((o.showSecond) ? '' : noDisplay) + '>' + o.secondText + '</dt>'+
						'<dd class="ui_tpicker_second"><div id="ui_tpicker_second_' + dp_id + '"'+
						((o.showSecond) ? '' : noDisplay) + '></div>';

					if (o.showSecond && o.secondGrid > 0) {
						html += '<div style="padding-left: 1px"><table><tr>';

						for (var s = o.secondMin; s <= secMax; s += parseInt(o.secondGrid,10)) {
							secondGridSize++;
							html += '<td>' + ((s < 10) ? '0' : '') + s + '</td>';
						}

						html += '</tr></table></div>';
					}
					html += '</dd>';

					// Milliseconds
					html += '<dt class="ui_tpicker_millisec_label" id="ui_tpicker_millisec_label_' + dp_id + '"' +
						((o.showMillisec) ? '' : noDisplay) + '>' + o.millisecText + '</dt>'+
						'<dd class="ui_tpicker_millisec"><div id="ui_tpicker_millisec_' + dp_id + '"'+
						((o.showMillisec) ? '' : noDisplay) + '></div>';

					if (o.showMillisec && o.millisecGrid > 0) {
						html += '<div style="padding-left: 1px"><table><tr>';

						for (var l = o.millisecMin; l <= millisecMax; l += parseInt(o.millisecGrid,10)) {
							millisecGridSize++;
							html += '<td>' + ((l < 10) ? '0' : '') + l + '</td>';
						}

						html += '</tr></table></div>';
					}
					html += '</dd>';

					// Timezone
					html += '<dt class="ui_tpicker_timezone_label" id="ui_tpicker_timezone_label_' + dp_id + '"' +
						((o.showTimezone) ? '' : noDisplay) + '>' + o.timezoneText + '</dt>';
					html += '<dd class="ui_tpicker_timezone" id="ui_tpicker_timezone_' + dp_id + '"'	+
						((o.showTimezone) ? '' : noDisplay) + '></dd>';

					html += '</dl></div>';
					var $tp = $(html);

					// if we only want time picker...
					if (o.timeOnly === true) {
						$tp.prepend(
							'<div class="ui-widget-header ui-helper-clearfix ui-corner-all">' +
							'<div class="ui-datepicker-title">' + o.timeOnlyTitle + '</div>' +
							'</div>');
						$dp.find('.ui-datepicker-header, .ui-datepicker-calendar').hide();
					}

					this.hour_slider = $tp.find('#ui_tpicker_hour_'+ dp_id).slider({
						orientation: "horizontal",
						value: this.hour,
						min: o.hourMin,
						max: hourMax,
						step: o.stepHour,
						slide: function(event, ui) {
							tp_inst.hour_slider.slider( "option", "value", ui.value);
							tp_inst._onTimeChange();
						}
					});


					// Updated by Peter Medeiros:
					// - Pass in Event and UI instance into slide function
					this.minute_slider = $tp.find('#ui_tpicker_minute_'+ dp_id).slider({
						orientation: "horizontal",
						value: this.minute,
						min: o.minuteMin,
						max: minMax,
						step: o.stepMinute,
						slide: function(event, ui) {
							tp_inst.minute_slider.slider( "option", "value", ui.value);
							tp_inst._onTimeChange();
						}
					});

					this.second_slider = $tp.find('#ui_tpicker_second_'+ dp_id).slider({
						orientation: "horizontal",
						value: this.second,
						min: o.secondMin,
						max: secMax,
						step: o.stepSecond,
						slide: function(event, ui) {
							tp_inst.second_slider.slider( "option", "value", ui.value);
							tp_inst._onTimeChange();
						}
					});

					this.millisec_slider = $tp.find('#ui_tpicker_millisec_'+ dp_id).slider({
						orientation: "horizontal",
						value: this.millisec,
						min: o.millisecMin,
						max: millisecMax,
						step: o.stepMillisec,
						slide: function(event, ui) {
							tp_inst.millisec_slider.slider( "option", "value", ui.value);
							tp_inst._onTimeChange();
						}
					});

					this.timezone_select = $tp.find('#ui_tpicker_timezone_'+ dp_id).append('<select></select>').find("select");
					$.fn.append.apply(this.timezone_select,
						$.map(o.timezoneList, function(val, idx) {
							return $("<option />")
								.val(typeof val == "object" ? val.value : val)
								.text(typeof val == "object" ? val.label : val);
						})
					);
					this.timezone_select.val((typeof this.timezone != "undefined" && this.timezone != null && this.timezone != "") ? this.timezone : o.timezone);
					this.timezone_select.change(function() {
						tp_inst._onTimeChange();
					});

					// Add grid functionality
					if (o.showHour && o.hourGrid > 0) {
						size = 100 * hourGridSize * o.hourGrid / (hourMax - o.hourMin);

						$tp.find(".ui_tpicker_hour table").css({
							width: size + "%",
							marginLeft: (size / (-2 * hourGridSize)) + "%",
							borderCollapse: 'collapse'
						}).find("td").each( function(index) {
							$(this).click(function() {
								var h = $(this).html();
								if(o.ampm)	{
									var ap = h.substring(2).toLowerCase(),
										aph = parseInt(h.substring(0,2), 10);
									if (ap == 'a') {
										if (aph == 12) h = 0;
										else h = aph;
									} else if (aph == 12) h = 12;
									else h = aph + 12;
								}
								tp_inst.hour_slider.slider("option", "value", h);
								tp_inst._onTimeChange();
								tp_inst._onSelectHandler();
							}).css({
								cursor: 'pointer',
								width: (100 / hourGridSize) + '%',
								textAlign: 'center',
								overflow: 'hidden'
							});
						});
					}

					if (o.showMinute && o.minuteGrid > 0) {
						size = 100 * minuteGridSize * o.minuteGrid / (minMax - o.minuteMin);
						$tp.find(".ui_tpicker_minute table").css({
							width: size + "%",
							marginLeft: (size / (-2 * minuteGridSize)) + "%",
							borderCollapse: 'collapse'
						}).find("td").each(function(index) {
							$(this).click(function() {
								tp_inst.minute_slider.slider("option", "value", $(this).html());
								tp_inst._onTimeChange();
								tp_inst._onSelectHandler();
							}).css({
								cursor: 'pointer',
								width: (100 / minuteGridSize) + '%',
								textAlign: 'center',
								overflow: 'hidden'
							});
						});
					}

					if (o.showSecond && o.secondGrid > 0) {
						$tp.find(".ui_tpicker_second table").css({
							width: size + "%",
							marginLeft: (size / (-2 * secondGridSize)) + "%",
							borderCollapse: 'collapse'
						}).find("td").each(function(index) {
							$(this).click(function() {
								tp_inst.second_slider.slider("option", "value", $(this).html());
								tp_inst._onTimeChange();
								tp_inst._onSelectHandler();
							}).css({
								cursor: 'pointer',
								width: (100 / secondGridSize) + '%',
								textAlign: 'center',
								overflow: 'hidden'
							});
						});
					}

					if (o.showMillisec && o.millisecGrid > 0) {
						$tp.find(".ui_tpicker_millisec table").css({
							width: size + "%",
							marginLeft: (size / (-2 * millisecGridSize)) + "%",
							borderCollapse: 'collapse'
						}).find("td").each(function(index) {
							$(this).click(function() {
								tp_inst.millisec_slider.slider("option", "value", $(this).html());
								tp_inst._onTimeChange();
								tp_inst._onSelectHandler();
							}).css({
								cursor: 'pointer',
								width: (100 / millisecGridSize) + '%',
								textAlign: 'center',
								overflow: 'hidden'
							});
						});
					}

					var $buttonPanel = $dp.find('.ui-datepicker-buttonpane');
					if ($buttonPanel.length) $buttonPanel.before($tp);
					else $dp.append($tp);

					this.$timeObj = $tp.find('#ui_tpicker_time_'+ dp_id);

					if (this.inst !== null) {
						var timeDefined = this.timeDefined;
						this._onTimeChange();
						this.timeDefined = timeDefined;
					}

					//Emulate datepicker onSelect behavior. Call on slidestop.
					var onSelectDelegate = function() {
						tp_inst._onSelectHandler();
					};
					this.hour_slider.bind('slidestop',onSelectDelegate);
					this.minute_slider.bind('slidestop',onSelectDelegate);
					this.second_slider.bind('slidestop',onSelectDelegate);
					this.millisec_slider.bind('slidestop',onSelectDelegate);

					// slideAccess integration: http://trentrichardson.com/2011/11/11/jquery-ui-sliders-and-touch-accessibility/
					if (this._defaults.addSliderAccess){
						var sliderAccessArgs = this._defaults.sliderAccessArgs;
						setTimeout(function(){ // fix for inline mode
							if($tp.find('.ui-slider-access').length == 0){
								$tp.find('.ui-slider:visible').sliderAccess(sliderAccessArgs);

								// fix any grids since sliders are shorter
								var sliderAccessWidth = $tp.find('.ui-slider-access:eq(0)').outerWidth(true);
								if(sliderAccessWidth){
									$tp.find('table:visible').each(function(){
										var $g = $(this),
											oldWidth = $g.outerWidth(),
											oldMarginLeft = $g.css('marginLeft').toString().replace('%',''),
											newWidth = oldWidth - sliderAccessWidth,
											newMarginLeft = ((oldMarginLeft * newWidth)/oldWidth) + '%';

										$g.css({ width: newWidth, marginLeft: newMarginLeft });
									});
								}
							}
						},0);
					}
					// end slideAccess integration

				}
			},

			//########################################################################
			// This function tries to limit the ability to go outside the
			// min/max date range
			//########################################################################
			_limitMinMaxDateTime: function(dp_inst, adjustSliders){
				var o = this._defaults,
					dp_date = new Date(dp_inst.selectedYear, dp_inst.selectedMonth, dp_inst.selectedDay);

				if(!this._defaults.showTimepicker) return; // No time so nothing to check here

				if($.datepicker._get(dp_inst, 'minDateTime') !== null && $.datepicker._get(dp_inst, 'minDateTime') !== undefined && dp_date){
					var minDateTime = $.datepicker._get(dp_inst, 'minDateTime'),
						minDateTimeDate = new Date(minDateTime.getFullYear(), minDateTime.getMonth(), minDateTime.getDate(), 0, 0, 0, 0);

					if(this.hourMinOriginal === null || this.minuteMinOriginal === null || this.secondMinOriginal === null || this.millisecMinOriginal === null){
						this.hourMinOriginal = o.hourMin;
						this.minuteMinOriginal = o.minuteMin;
						this.secondMinOriginal = o.secondMin;
						this.millisecMinOriginal = o.millisecMin;
					}

					if(dp_inst.settings.timeOnly || minDateTimeDate.getTime() == dp_date.getTime()) {
						this._defaults.hourMin = minDateTime.getHours();
						if (this.hour <= this._defaults.hourMin) {
							this.hour = this._defaults.hourMin;
							this._defaults.minuteMin = minDateTime.getMinutes();
							if (this.minute <= this._defaults.minuteMin) {
								this.minute = this._defaults.minuteMin;
								this._defaults.secondMin = minDateTime.getSeconds();
							} else if (this.second <= this._defaults.secondMin){
								this.second = this._defaults.secondMin;
								this._defaults.millisecMin = minDateTime.getMilliseconds();
							} else {
								if(this.millisec < this._defaults.millisecMin)
									this.millisec = this._defaults.millisecMin;
								this._defaults.millisecMin = this.millisecMinOriginal;
							}
						} else {
							this._defaults.minuteMin = this.minuteMinOriginal;
							this._defaults.secondMin = this.secondMinOriginal;
							this._defaults.millisecMin = this.millisecMinOriginal;
						}
					}else{
						this._defaults.hourMin = this.hourMinOriginal;
						this._defaults.minuteMin = this.minuteMinOriginal;
						this._defaults.secondMin = this.secondMinOriginal;
						this._defaults.millisecMin = this.millisecMinOriginal;
					}
				}

				if($.datepicker._get(dp_inst, 'maxDateTime') !== null && $.datepicker._get(dp_inst, 'maxDateTime') !== undefined && dp_date){
					var maxDateTime = $.datepicker._get(dp_inst, 'maxDateTime'),
						maxDateTimeDate = new Date(maxDateTime.getFullYear(), maxDateTime.getMonth(), maxDateTime.getDate(), 0, 0, 0, 0);

					if(this.hourMaxOriginal === null || this.minuteMaxOriginal === null || this.secondMaxOriginal === null){
						this.hourMaxOriginal = o.hourMax;
						this.minuteMaxOriginal = o.minuteMax;
						this.secondMaxOriginal = o.secondMax;
						this.millisecMaxOriginal = o.millisecMax;
					}

					if(dp_inst.settings.timeOnly || maxDateTimeDate.getTime() == dp_date.getTime()){
						this._defaults.hourMax = maxDateTime.getHours();
						if (this.hour >= this._defaults.hourMax) {
							this.hour = this._defaults.hourMax;
							this._defaults.minuteMax = maxDateTime.getMinutes();
							if (this.minute >= this._defaults.minuteMax) {
								this.minute = this._defaults.minuteMax;
								this._defaults.secondMax = maxDateTime.getSeconds();
							} else if (this.second >= this._defaults.secondMax) {
								this.second = this._defaults.secondMax;
								this._defaults.millisecMax = maxDateTime.getMilliseconds();
							} else {
								if(this.millisec > this._defaults.millisecMax) this.millisec = this._defaults.millisecMax;
								this._defaults.millisecMax = this.millisecMaxOriginal;
							}
						} else {
							this._defaults.minuteMax = this.minuteMaxOriginal;
							this._defaults.secondMax = this.secondMaxOriginal;
							this._defaults.millisecMax = this.millisecMaxOriginal;
						}
					}else{
						this._defaults.hourMax = this.hourMaxOriginal;
						this._defaults.minuteMax = this.minuteMaxOriginal;
						this._defaults.secondMax = this.secondMaxOriginal;
						this._defaults.millisecMax = this.millisecMaxOriginal;
					}
				}

				if(adjustSliders !== undefined && adjustSliders === true){
					var hourMax = parseInt((this._defaults.hourMax - ((this._defaults.hourMax - this._defaults.hourMin) % this._defaults.stepHour)) ,10),
						minMax  = parseInt((this._defaults.minuteMax - ((this._defaults.minuteMax - this._defaults.minuteMin) % this._defaults.stepMinute)) ,10),
						secMax  = parseInt((this._defaults.secondMax - ((this._defaults.secondMax - this._defaults.secondMin) % this._defaults.stepSecond)) ,10),
						millisecMax  = parseInt((this._defaults.millisecMax - ((this._defaults.millisecMax - this._defaults.millisecMin) % this._defaults.stepMillisec)) ,10);

					if(this.hour_slider)
						this.hour_slider.slider("option", { min: this._defaults.hourMin, max: hourMax }).slider('value', this.hour);
					if(this.minute_slider)
						this.minute_slider.slider("option", { min: this._defaults.minuteMin, max: minMax }).slider('value', this.minute);
					if(this.second_slider)
						this.second_slider.slider("option", { min: this._defaults.secondMin, max: secMax }).slider('value', this.second);
					if(this.millisec_slider)
						this.millisec_slider.slider("option", { min: this._defaults.millisecMin, max: millisecMax }).slider('value', this.millisec);
				}

			},


			//########################################################################
			// when a slider moves, set the internal time...
			// on time change is also called when the time is updated in the text field
			//########################################################################
			_onTimeChange: function() {
				var hour   = (this.hour_slider) ? this.hour_slider.slider('value') : false,
					minute = (this.minute_slider) ? this.minute_slider.slider('value') : false,
					second = (this.second_slider) ? this.second_slider.slider('value') : false,
					millisec = (this.millisec_slider) ? this.millisec_slider.slider('value') : false,
					timezone = (this.timezone_select) ? this.timezone_select.val() : false,
					o = this._defaults;

				if (typeof(hour) == 'object') hour = false;
				if (typeof(minute) == 'object') minute = false;
				if (typeof(second) == 'object') second = false;
				if (typeof(millisec) == 'object') millisec = false;
				if (typeof(timezone) == 'object') timezone = false;

				if (hour !== false) hour = parseInt(hour,10);
				if (minute !== false) minute = parseInt(minute,10);
				if (second !== false) second = parseInt(second,10);
				if (millisec !== false) millisec = parseInt(millisec,10);

				var ampm = o[hour < 12 ? 'amNames' : 'pmNames'][0];

				// If the update was done in the input field, the input field should not be updated.
				// If the update was done using the sliders, update the input field.
				var hasChanged = (hour != this.hour || minute != this.minute
				|| second != this.second || millisec != this.millisec
				|| (this.ampm.length > 0
				&& (hour < 12) != ($.inArray(this.ampm.toUpperCase(), this.amNames) !== -1))
				|| timezone != this.timezone);

				if (hasChanged) {

					if (hour !== false)this.hour = hour;
					if (minute !== false) this.minute = minute;
					if (second !== false) this.second = second;
					if (millisec !== false) this.millisec = millisec;
					if (timezone !== false) this.timezone = timezone;

					if (!this.inst) this.inst = $.datepicker._getInst(this.$input[0]);

					this._limitMinMaxDateTime(this.inst, true);
				}
				if (o.ampm) this.ampm = ampm;

				//this._formatTime();
				this.formattedTime = $.datepicker.formatTime(this._defaults.timeFormat, this, this._defaults);
				if (this.$timeObj) this.$timeObj.text(this.formattedTime + o.timeSuffix);
				this.timeDefined = true;
				if (hasChanged) this._updateDateTime();
			},

			//########################################################################
			// call custom onSelect.
			// bind to sliders slidestop, and grid click.
			//########################################################################
			_onSelectHandler: function() {
				var onSelect = this._defaults.onSelect;
				var inputEl = this.$input ? this.$input[0] : null;
				if (onSelect && inputEl) {
					onSelect.apply(inputEl, [this.formattedDateTime, this]);
				}
			},

			//########################################################################
			// left for any backwards compatibility
			//########################################################################
			_formatTime: function(time, format) {
				time = time || { hour: this.hour, minute: this.minute, second: this.second, millisec: this.millisec, ampm: this.ampm, timezone: this.timezone };
				var tmptime = (format || this._defaults.timeFormat).toString();

				tmptime = $.datepicker.formatTime(tmptime, time, this._defaults);

				if (arguments.length) return tmptime;
				else this.formattedTime = tmptime;
			},

			//########################################################################
			// update our input with the new date time..
			//########################################################################
			_updateDateTime: function(dp_inst) {
				dp_inst = this.inst || dp_inst;
				var dt = $.datepicker._daylightSavingAdjust(new Date(dp_inst.selectedYear, dp_inst.selectedMonth, dp_inst.selectedDay)),
					dateFmt = $.datepicker._get(dp_inst, 'dateFormat'),
					formatCfg = $.datepicker._getFormatConfig(dp_inst),
					timeAvailable = dt !== null && this.timeDefined;
				this.formattedDate = $.datepicker.formatDate(dateFmt, (dt === null ? new Date() : dt), formatCfg);
				var formattedDateTime = this.formattedDate;
				if (dp_inst.lastVal !== undefined && (dp_inst.lastVal.length > 0 && this.$input.val().length === 0))
					return;

				if (this._defaults.timeOnly === true) {
					formattedDateTime = this.formattedTime;
				} else if (this._defaults.timeOnly !== true && (this._defaults.alwaysSetTime || timeAvailable)) {
					formattedDateTime += this._defaults.separator + this.formattedTime + this._defaults.timeSuffix;
				}

				this.formattedDateTime = formattedDateTime;

				if(!this._defaults.showTimepicker) {
					this.$input.val(this.formattedDate);
				} else if (this.$altInput && this._defaults.altFieldTimeOnly === true) {
					this.$altInput.val(this.formattedTime);
					this.$input.val(this.formattedDate);
				} else if(this.$altInput) {
					this.$altInput.val(formattedDateTime);
					this.$input.val(formattedDateTime);
				} else {
					this.$input.val(formattedDateTime);
				}

				this.$input.trigger("change");
			}

		});

		$.fn.extend({
			//########################################################################
			// shorthand just to use timepicker..
			//########################################################################
			timepicker: function(o) {
				o = o || {};
				var tmp_args = arguments;

				if (typeof o == 'object') tmp_args[0] = $.extend(o, { timeOnly: true });

				return $(this).each(function() {
					$.fn.datetimepicker.apply($(this), tmp_args);
				});
			},

			//########################################################################
			// extend timepicker to datepicker
			//########################################################################
			datetimepicker: function(o) {
				o = o || {};
				var $input = this,
					tmp_args = arguments;

				if (typeof(o) == 'string'){
					if(o == 'getDate')
						return $.fn.datepicker.apply($(this[0]), tmp_args);
					else
						return this.each(function() {
							var $t = $(this);
							$t.datepicker.apply($t, tmp_args);
						});
				}
				else
					return this.each(function() {
						var $t = $(this);
						$t.datepicker($.timepicker._newInst($t, o)._defaults);
					});
			}
		});

//########################################################################
// format the time all pretty...
// format = string format of the time
// time = a {}, not a Date() for timezones
// options = essentially the regional[].. amNames, pmNames, ampm
//########################################################################
		$.datepicker.formatTime = function(format, time, options) {
			options = options || {};
			options = $.extend($.timepicker._defaults, options);
			time = $.extend({hour:0, minute:0, second:0, millisec:0, timezone:'+0000'}, time);

			var tmptime = format;
			var ampmName = options['amNames'][0];

			var hour = parseInt(time.hour, 10);
			if (options.ampm) {
				if (hour > 11){
					ampmName = options['pmNames'][0];
					if(hour > 12)
						hour = hour % 12;
				}
				if (hour === 0)
					hour = 12;
			}
			tmptime = tmptime.replace(/(?:hh?|mm?|ss?|[tT]{1,2}|[lz])/g, function(match) {
				switch (match.toLowerCase()) {
					case 'hh': return ('0' + hour).slice(-2);
					case 'h':  return hour;
					case 'mm': return ('0' + time.minute).slice(-2);
					case 'm':  return time.minute;
					case 'ss': return ('0' + time.second).slice(-2);
					case 's':  return time.second;
					case 'l':  return ('00' + time.millisec).slice(-3);
					case 'z':  return time.timezone;
					case 't': case 'tt':
					if (options.ampm) {
						if (match.length == 1)
							ampmName = ampmName.charAt(0);
						return match.charAt(0) == 'T' ? ampmName.toUpperCase() : ampmName.toLowerCase();
					}
					return '';
				}
			});

			tmptime = $.trim(tmptime);
			return tmptime;
		}

//########################################################################
// the bad hack :/ override datepicker so it doesnt close on select
// inspired: http://stackoverflow.com/questions/1252512/jquery-datepicker-prevent-closing-picker-when-clicking-a-date/1762378#1762378
//########################################################################
		$.datepicker._base_selectDate = $.datepicker._selectDate;
		$.datepicker._selectDate = function (id, dateStr) {
			var inst = this._getInst($(id)[0]),
				tp_inst = this._get(inst, 'timepicker');

			if (tp_inst) {
				tp_inst._limitMinMaxDateTime(inst, true);
				inst.inline = inst.stay_open = true;
				//This way the onSelect handler called from calendarpicker get the full dateTime
				this._base_selectDate(id, dateStr);
				inst.inline = inst.stay_open = false;
				this._notifyChange(inst);
				this._updateDatepicker(inst);
			}
			else this._base_selectDate(id, dateStr);
		};

//#############################################################################################
// second bad hack :/ override datepicker so it triggers an event when changing the input field
// and does not redraw the datepicker on every selectDate event
//#############################################################################################
		$.datepicker._base_updateDatepicker = $.datepicker._updateDatepicker;
		$.datepicker._updateDatepicker = function(inst) {

			// don't popup the datepicker if there is another instance already opened
			var input = inst.input[0];
			if($.datepicker._curInst &&
				$.datepicker._curInst != inst &&
				$.datepicker._datepickerShowing &&
				$.datepicker._lastInput != input) {
				return;
			}

			if (typeof(inst.stay_open) !== 'boolean' || inst.stay_open === false) {

				this._base_updateDatepicker(inst);

				// Reload the time control when changing something in the input text field.
				var tp_inst = this._get(inst, 'timepicker');
				if(tp_inst) tp_inst._addTimePicker(inst);
			}
		};

//#######################################################################################
// third bad hack :/ override datepicker so it allows spaces and colon in the input field
//#######################################################################################
		$.datepicker._base_doKeyPress = $.datepicker._doKeyPress;
		$.datepicker._doKeyPress = function(event) {
			var inst = $.datepicker._getInst(event.target),
				tp_inst = $.datepicker._get(inst, 'timepicker');

			if (tp_inst) {
				if ($.datepicker._get(inst, 'constrainInput')) {
					var ampm = tp_inst._defaults.ampm,
						dateChars = $.datepicker._possibleChars($.datepicker._get(inst, 'dateFormat')),
						datetimeChars = tp_inst._defaults.timeFormat.toString()
								.replace(/[hms]/g, '')
								.replace(/TT/g, ampm ? 'APM' : '')
								.replace(/Tt/g, ampm ? 'AaPpMm' : '')
								.replace(/tT/g, ampm ? 'AaPpMm' : '')
								.replace(/T/g, ampm ? 'AP' : '')
								.replace(/tt/g, ampm ? 'apm' : '')
								.replace(/t/g, ampm ? 'ap' : '') +
							" " +
							tp_inst._defaults.separator +
							tp_inst._defaults.timeSuffix +
							(tp_inst._defaults.showTimezone ? tp_inst._defaults.timezoneList.join('') : '') +
							(tp_inst._defaults.amNames.join('')) +
							(tp_inst._defaults.pmNames.join('')) +
							dateChars,
						chr = String.fromCharCode(event.charCode === undefined ? event.keyCode : event.charCode);
					return event.ctrlKey || (chr < ' ' || !dateChars || datetimeChars.indexOf(chr) > -1);
				}
			}

			return $.datepicker._base_doKeyPress(event);
		};

//#######################################################################################
// Override key up event to sync manual input changes.
//#######################################################################################
		$.datepicker._base_doKeyUp = $.datepicker._doKeyUp;
		$.datepicker._doKeyUp = function (event) {
			var inst = $.datepicker._getInst(event.target),
				tp_inst = $.datepicker._get(inst, 'timepicker');

			if (tp_inst) {
				if (tp_inst._defaults.timeOnly && (inst.input.val() != inst.lastVal)) {
					try {
						$.datepicker._updateDatepicker(inst);
					}
					catch (err) {
						$.datepicker.log(err);
					}
				}
			}

			return $.datepicker._base_doKeyUp(event);
		};

//#######################################################################################
// override "Today" button to also grab the time.
//#######################################################################################
		$.datepicker._base_gotoToday = $.datepicker._gotoToday;
		$.datepicker._gotoToday = function(id) {
			var inst = this._getInst($(id)[0]),
				$dp = inst.dpDiv;
			this._base_gotoToday(id);
			var now = new Date();
			var tp_inst = this._get(inst, 'timepicker');
			if (tp_inst && tp_inst._defaults.showTimezone && tp_inst.timezone_select) {
				var tzoffset = now.getTimezoneOffset(); // If +0100, returns -60
				var tzsign = tzoffset > 0 ? '-' : '+';
				tzoffset = Math.abs(tzoffset);
				var tzmin = tzoffset % 60;
				tzoffset = tzsign + ('0' + (tzoffset - tzmin) / 60).slice(-2) + ('0' + tzmin).slice(-2);
				if (tp_inst._defaults.timezoneIso8609)
					tzoffset = tzoffset.substring(0, 3) + ':' + tzoffset.substring(3);
				tp_inst.timezone_select.val(tzoffset);
			}
			this._setTime(inst, now);
			$( '.ui-datepicker-today', $dp).click();
		};

//#######################################################################################
// Disable & enable the Time in the datetimepicker
//#######################################################################################
		$.datepicker._disableTimepickerDatepicker = function(target, date, withDate) {
			var inst = this._getInst(target),
				tp_inst = this._get(inst, 'timepicker');
			$(target).datepicker('getDate'); // Init selected[Year|Month|Day]
			if (tp_inst) {
				tp_inst._defaults.showTimepicker = false;
				tp_inst._updateDateTime(inst);
			}
		};

		$.datepicker._enableTimepickerDatepicker = function(target, date, withDate) {
			var inst = this._getInst(target),
				tp_inst = this._get(inst, 'timepicker');
			$(target).datepicker('getDate'); // Init selected[Year|Month|Day]
			if (tp_inst) {
				tp_inst._defaults.showTimepicker = true;
				tp_inst._addTimePicker(inst); // Could be disabled on page load
				tp_inst._updateDateTime(inst);
			}
		};

//#######################################################################################
// Create our own set time function
//#######################################################################################
		$.datepicker._setTime = function(inst, date) {
			var tp_inst = this._get(inst, 'timepicker');
			if (tp_inst) {
				var defaults = tp_inst._defaults,
				// calling _setTime with no date sets time to defaults
					hour = date ? date.getHours() : defaults.hour,
					minute = date ? date.getMinutes() : defaults.minute,
					second = date ? date.getSeconds() : defaults.second,
					millisec = date ? date.getMilliseconds() : defaults.millisec;

				//check if within min/max times..
				if ((hour < defaults.hourMin || hour > defaults.hourMax) || (minute < defaults.minuteMin || minute > defaults.minuteMax) || (second < defaults.secondMin || second > defaults.secondMax) || (millisec < defaults.millisecMin || millisec > defaults.millisecMax)) {
					hour = defaults.hourMin;
					minute = defaults.minuteMin;
					second = defaults.secondMin;
					millisec = defaults.millisecMin;
				}

				tp_inst.hour = hour;
				tp_inst.minute = minute;
				tp_inst.second = second;
				tp_inst.millisec = millisec;

				if (tp_inst.hour_slider) tp_inst.hour_slider.slider('value', hour);
				if (tp_inst.minute_slider) tp_inst.minute_slider.slider('value', minute);
				if (tp_inst.second_slider) tp_inst.second_slider.slider('value', second);
				if (tp_inst.millisec_slider) tp_inst.millisec_slider.slider('value', millisec);

				tp_inst._onTimeChange();
				tp_inst._updateDateTime(inst);
			}
		};

//#######################################################################################
// Create new public method to set only time, callable as $().datepicker('setTime', date)
//#######################################################################################
		$.datepicker._setTimeDatepicker = function(target, date, withDate) {
			var inst = this._getInst(target),
				tp_inst = this._get(inst, 'timepicker');

			if (tp_inst) {
				this._setDateFromField(inst);
				var tp_date;
				if (date) {
					if (typeof date == "string") {
						tp_inst._parseTime(date, withDate);
						tp_date = new Date();
						tp_date.setHours(tp_inst.hour, tp_inst.minute, tp_inst.second, tp_inst.millisec);
					}
					else tp_date = new Date(date.getTime());
					if (tp_date.toString() == 'Invalid Date') tp_date = undefined;
					this._setTime(inst, tp_date);
				}
			}

		};

//#######################################################################################
// override setDate() to allow setting time too within Date object
//#######################################################################################
		$.datepicker._base_setDateDatepicker = $.datepicker._setDateDatepicker;
		$.datepicker._setDateDatepicker = function(target, date) {
			var inst = this._getInst(target),
				tp_date = (date instanceof Date) ? new Date(date.getTime()) : date;

			this._updateDatepicker(inst);
			this._base_setDateDatepicker.apply(this, arguments);
			this._setTimeDatepicker(target, tp_date, true);
		};

//#######################################################################################
// override getDate() to allow getting time too within Date object
//#######################################################################################
		$.datepicker._base_getDateDatepicker = $.datepicker._getDateDatepicker;
		$.datepicker._getDateDatepicker = function(target, noDefault) {
			var inst = this._getInst(target),
				tp_inst = this._get(inst, 'timepicker');

			if (tp_inst) {
				this._setDateFromField(inst, noDefault);
				var date = this._getDate(inst);
				if (date && tp_inst._parseTime($(target).val(), tp_inst.timeOnly)) date.setHours(tp_inst.hour, tp_inst.minute, tp_inst.second, tp_inst.millisec);
				return date;
			}
			return this._base_getDateDatepicker(target, noDefault);
		};

//#######################################################################################
// override parseDate() because UI 1.8.14 throws an error about "Extra characters"
// An option in datapicker to ignore extra format characters would be nicer.
//#######################################################################################
		$.datepicker._base_parseDate = $.datepicker.parseDate;
		$.datepicker.parseDate = function(format, value, settings) {
			var date;
			try {
				date = this._base_parseDate(format, value, settings);
			} catch (err) {
				if (err.indexOf(":") >= 0) {
					// Hack!  The error message ends with a colon, a space, and
					// the "extra" characters.  We rely on that instead of
					// attempting to perfectly reproduce the parsing algorithm.
					date = this._base_parseDate(format, value.substring(0,value.length-(err.length-err.indexOf(':')-2)), settings);
				} else {
					// The underlying error was not related to the time
					throw err;
				}
			}
			return date;
		};

//#######################################################################################
// override formatDate to set date with time to the input
//#######################################################################################
		$.datepicker._base_formatDate=$.datepicker._formatDate;
		$.datepicker._formatDate = function(inst, day, month, year){
			var tp_inst = this._get(inst, 'timepicker');
			if(tp_inst)
			{
				if(day)
					var b = this._base_formatDate(inst, day, month, year);
				tp_inst._updateDateTime(inst);
				return tp_inst.$input.val();
			}
			return this._base_formatDate(inst);
		};

//#######################################################################################
// override options setter to add time to maxDate(Time) and minDate(Time). MaxDate
//#######################################################################################
		$.datepicker._base_optionDatepicker = $.datepicker._optionDatepicker;
		$.datepicker._optionDatepicker = function(target, name, value) {
			var inst = this._getInst(target),
				tp_inst = this._get(inst, 'timepicker');
			if (tp_inst) {
				var min,max,onselect;
				if (typeof name == 'string') { // if min/max was set with the string
					if (name==='minDate' || name==='minDateTime' )
						min = value;
					else if (name==='maxDate' || name==='maxDateTime')
						max = value;
					else if (name==='onSelect')
						onselect=value;
				} else if (typeof name == 'object') { //if min/max was set with the JSON
					if(name.minDate)
						min = name.minDate;
					else if (name.minDateTime)
						min = name.minDateTime;
					else if (name.maxDate)
						max = name.maxDate;
					else if (name.maxDateTime)
						max = name.maxDateTime;
				}
				if(min){ //if min was set
					if(min==0)
						min=new Date();
					else
						min= new Date(min);

					tp_inst._defaults.minDate = min;
					tp_inst._defaults.minDateTime = min;
				} else if (max){ //if max was set
					if(max==0)
						max=new Date();
					else
						max= new Date(max);
					tp_inst._defaults.maxDate = max;
					tp_inst._defaults.maxDateTime = max;
				}
				else if (onselect)
					tp_inst._defaults.onSelect=onselect;
			}
			if (value === undefined)
				return this._base_optionDatepicker(target, name);
			return this._base_optionDatepicker(target, name, value);
		};

//#######################################################################################
// jQuery extend now ignores nulls!
//#######################################################################################
		function extendRemove(target, props) {
			$.extend(target, props);
			for (var name in props)
				if (props[name] === null || props[name] === undefined)
					target[name] = props[name];
			return target;
		};

		$.timepicker = new Timepicker(); // singleton instance
		$.timepicker.version = "0.9.9";

	})(jQuery);


})


define('plugin/image-picker', [], function () {
    "use strict";

    var commonImagePickerLoaded = 0;//公共是否加载完
    var currentImagePickerLoaded = 0;//本页是否加载完
    window.uploadedImages = '';//用户页面提交时，将本页操作了的图片路径信息提交上去

    //给子iframe传递信息的对象
    window.imagePickerParam = {
        hide: function () {
            $('#myImagePicker').modal('hide')
        }
    };

    $().ready(function () {
        //选择框
        var content = '<style>#myImagePicker{z-index: 50001;}#myImagePicker .mg-b0{margin-bottom:0;}</style><div id="myImagePicker" tabindex="-1" role="dialog" data-width="840" data-hasfoot="false" data-backdrop="false" class="sui-modal hide fade"><div class="modal-dialog"><div class="modal-content"><div class="modal-body"><button type="button" data-dismiss="modal" aria-hidden="true" class="sui-close">×</button><style>.pd-t0{padding:0}</style><ul class="sui-nav nav-tabs mg-b0"><li class="active"><a href="#current" data-toggle="tab" data-type="current">本页</a></li><li><a href="#common" data-toggle="tab" data-type="common">公用</a></li></ul><div class="tab-content tab-wraped pd-t0" style="padding:10px;"><div id="current" class="tab-pane active"><iframe id="image-selector-current" width="100%" height="600" style="border: none;" src="" frameborder="0"></iframe></div><div id="common" class="tab-pane"><iframe id="image-selector-common" width="100%" height="600" src="" frameborder="0" style="border: none;"></iframe></div></div></div></div></div></div>';

        //将content查到页面中
        $('body').append(content);

        //选择框取消按钮
        $('.image-helper-main .image-helper-close').bind('click', function () {
            $('.image-helper-mask').hide();
            $('.image-helper-main').hide();
        })

        //在表单提交时，插入图片信息文本框一起提交
        $('form').on('submit', function () {
            var oInput = $('<input>');

            oInput.attr({name: 'uploadedImages', type: 'hidden', value: window.uploadedImages});
            $(this).append(oInput);
        })
    });

    $.fn.imagePicker = function (options) {
        var el = options.el;
        var triggerEvent = options.triggerEvent == undefined ? 'click' : options.triggerEvent;
        $(this).on(triggerEvent, function () {
            //
            $(this).attr({
                'data-toggle': 'modal',
                'data-target': '#myImagePicker'
            });

            //设置传给子iframe的参数
            if (el === 'self') {
                options.el = $(this);
            }
            window.imagePickerParam.el = options.el;
            window.imagePickerParam.mode = options.mode;
            window.imagePickerParam.format = options.format;
            window.imagePickerParam.objId = isNaN(options.objId) ? 0 : options.objId;
            window.imagePickerParam.objType = options.objType;
            window.imagePickerParam.width = options.width;
            window.imagePickerParam.height = options.height;
            if (typeof options.callback == 'function')window.imagePickerParam.callback = options.callback;

            //点击选择框各个tab看看页面是否加载过
            $('body').on('click', '#myImagePicker [data-toggle=tab]', function () {
                var type = $(this).attr('data-type');
                console.log(type);
                switch (type) {
                    case 'current':
                        if (currentImagePickerLoaded == 0) {
                            $('#image-selector-current').attr('src', '/admin.php?c=Image&a=current&objId=' + options.objId + '&objType=' + options.objType);
                            currentImagePickerLoaded = 1;
                        }
                        break;
                    case 'common':
                        if (commonImagePickerLoaded == 0) {
                            $('#image-selector-common').attr('src', '/admin.php?c=Image&a=index');
                            commonImagePickerLoaded = 1;
                        }
                        break;
                    default :
                    //
                }
            })
            //打开选择框时，刷新设置一下本页的数据
            $('#image-selector-current').attr('src', '/admin.php?c=Image&a=current&objId=' + options.objId + '&objType=' + options.objType);

            //打开选择框页面
            $('.image-helper-mask').show();
            $('.image-helper-main').show();

        });
    }

});
define('app/init', ['common/util', 'app/config','page/init'], function (require) {
    "use strict";

    var config = require('app/config');

    for (var i = 0, len = config.plugins.length; i < len; i++) {
        require(config.plugins[i]);
    }

    var Util = require('common/util');
    Util.init();

    //执行页面代码
    require('page/init');
    
});

// seajs配置
seajs.config({
    base: (STATIC||'/static/admin/')+"js/"
});